I0428 20:02:10.740577 29889 caffe.cpp:218] Using GPUs 0
I0428 20:02:10.778625 29889 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:11.288499 29889 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test922.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:11.288635 29889 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test922.prototxt
I0428 20:02:11.289072 29889 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:11.289093 29889 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:11.289196 29889 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:11.289273 29889 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:11.289371 29889 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:11.289396 29889 net.cpp:86] Creating Layer mnist
I0428 20:02:11.289402 29889 net.cpp:382] mnist -> data
I0428 20:02:11.289423 29889 net.cpp:382] mnist -> label
I0428 20:02:11.290511 29889 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:11.292960 29889 net.cpp:124] Setting up mnist
I0428 20:02:11.292978 29889 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:11.292999 29889 net.cpp:131] Top shape: 64 (64)
I0428 20:02:11.293001 29889 net.cpp:139] Memory required for data: 200960
I0428 20:02:11.293009 29889 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:11.293031 29889 net.cpp:86] Creating Layer conv0
I0428 20:02:11.293061 29889 net.cpp:408] conv0 <- data
I0428 20:02:11.293084 29889 net.cpp:382] conv0 -> conv0
I0428 20:02:11.552112 29889 net.cpp:124] Setting up conv0
I0428 20:02:11.552139 29889 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:11.552142 29889 net.cpp:139] Memory required for data: 1675520
I0428 20:02:11.552156 29889 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:11.552184 29889 net.cpp:86] Creating Layer pool0
I0428 20:02:11.552188 29889 net.cpp:408] pool0 <- conv0
I0428 20:02:11.552193 29889 net.cpp:382] pool0 -> pool0
I0428 20:02:11.552253 29889 net.cpp:124] Setting up pool0
I0428 20:02:11.552261 29889 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:11.552264 29889 net.cpp:139] Memory required for data: 2044160
I0428 20:02:11.552268 29889 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:11.552278 29889 net.cpp:86] Creating Layer conv1
I0428 20:02:11.552280 29889 net.cpp:408] conv1 <- pool0
I0428 20:02:11.552285 29889 net.cpp:382] conv1 -> conv1
I0428 20:02:11.555209 29889 net.cpp:124] Setting up conv1
I0428 20:02:11.555238 29889 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:02:11.555243 29889 net.cpp:139] Memory required for data: 2863360
I0428 20:02:11.555250 29889 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:11.555259 29889 net.cpp:86] Creating Layer pool1
I0428 20:02:11.555263 29889 net.cpp:408] pool1 <- conv1
I0428 20:02:11.555268 29889 net.cpp:382] pool1 -> pool1
I0428 20:02:11.555335 29889 net.cpp:124] Setting up pool1
I0428 20:02:11.555341 29889 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:02:11.555344 29889 net.cpp:139] Memory required for data: 3068160
I0428 20:02:11.555347 29889 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:11.555354 29889 net.cpp:86] Creating Layer ip1
I0428 20:02:11.555357 29889 net.cpp:408] ip1 <- pool1
I0428 20:02:11.555362 29889 net.cpp:382] ip1 -> ip1
I0428 20:02:11.555568 29889 net.cpp:124] Setting up ip1
I0428 20:02:11.555577 29889 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:11.555580 29889 net.cpp:139] Memory required for data: 3074560
I0428 20:02:11.555588 29889 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:11.555593 29889 net.cpp:86] Creating Layer relu1
I0428 20:02:11.555596 29889 net.cpp:408] relu1 <- ip1
I0428 20:02:11.555600 29889 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:11.555771 29889 net.cpp:124] Setting up relu1
I0428 20:02:11.555779 29889 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:11.555783 29889 net.cpp:139] Memory required for data: 3080960
I0428 20:02:11.555785 29889 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:11.555793 29889 net.cpp:86] Creating Layer ip2
I0428 20:02:11.555795 29889 net.cpp:408] ip2 <- ip1
I0428 20:02:11.555800 29889 net.cpp:382] ip2 -> ip2
I0428 20:02:11.555891 29889 net.cpp:124] Setting up ip2
I0428 20:02:11.555896 29889 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:11.555899 29889 net.cpp:139] Memory required for data: 3087360
I0428 20:02:11.555905 29889 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:11.555910 29889 net.cpp:86] Creating Layer relu2
I0428 20:02:11.555913 29889 net.cpp:408] relu2 <- ip2
I0428 20:02:11.555918 29889 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:11.556668 29889 net.cpp:124] Setting up relu2
I0428 20:02:11.556680 29889 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:11.556699 29889 net.cpp:139] Memory required for data: 3093760
I0428 20:02:11.556704 29889 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:11.556725 29889 net.cpp:86] Creating Layer ip3
I0428 20:02:11.556730 29889 net.cpp:408] ip3 <- ip2
I0428 20:02:11.556735 29889 net.cpp:382] ip3 -> ip3
I0428 20:02:11.556854 29889 net.cpp:124] Setting up ip3
I0428 20:02:11.556864 29889 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:11.556867 29889 net.cpp:139] Memory required for data: 3096320
I0428 20:02:11.556875 29889 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:11.556880 29889 net.cpp:86] Creating Layer relu3
I0428 20:02:11.556885 29889 net.cpp:408] relu3 <- ip3
I0428 20:02:11.556888 29889 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:11.557060 29889 net.cpp:124] Setting up relu3
I0428 20:02:11.557068 29889 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:11.557071 29889 net.cpp:139] Memory required for data: 3098880
I0428 20:02:11.557075 29889 layer_factory.hpp:77] Creating layer loss
I0428 20:02:11.557086 29889 net.cpp:86] Creating Layer loss
I0428 20:02:11.557090 29889 net.cpp:408] loss <- ip3
I0428 20:02:11.557096 29889 net.cpp:408] loss <- label
I0428 20:02:11.557101 29889 net.cpp:382] loss -> loss
I0428 20:02:11.557114 29889 layer_factory.hpp:77] Creating layer loss
I0428 20:02:11.557355 29889 net.cpp:124] Setting up loss
I0428 20:02:11.557364 29889 net.cpp:131] Top shape: (1)
I0428 20:02:11.557368 29889 net.cpp:134]     with loss weight 1
I0428 20:02:11.557381 29889 net.cpp:139] Memory required for data: 3098884
I0428 20:02:11.557384 29889 net.cpp:200] loss needs backward computation.
I0428 20:02:11.557389 29889 net.cpp:200] relu3 needs backward computation.
I0428 20:02:11.557391 29889 net.cpp:200] ip3 needs backward computation.
I0428 20:02:11.557394 29889 net.cpp:200] relu2 needs backward computation.
I0428 20:02:11.557397 29889 net.cpp:200] ip2 needs backward computation.
I0428 20:02:11.557400 29889 net.cpp:200] relu1 needs backward computation.
I0428 20:02:11.557402 29889 net.cpp:200] ip1 needs backward computation.
I0428 20:02:11.557405 29889 net.cpp:200] pool1 needs backward computation.
I0428 20:02:11.557409 29889 net.cpp:200] conv1 needs backward computation.
I0428 20:02:11.557411 29889 net.cpp:200] pool0 needs backward computation.
I0428 20:02:11.557415 29889 net.cpp:200] conv0 needs backward computation.
I0428 20:02:11.557418 29889 net.cpp:202] mnist does not need backward computation.
I0428 20:02:11.557421 29889 net.cpp:244] This network produces output loss
I0428 20:02:11.557430 29889 net.cpp:257] Network initialization done.
I0428 20:02:11.557842 29889 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test922.prototxt
I0428 20:02:11.557898 29889 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:11.557986 29889 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:11.558068 29889 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:11.558110 29889 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:11.558138 29889 net.cpp:86] Creating Layer mnist
I0428 20:02:11.558143 29889 net.cpp:382] mnist -> data
I0428 20:02:11.558151 29889 net.cpp:382] mnist -> label
I0428 20:02:11.558233 29889 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:11.560520 29889 net.cpp:124] Setting up mnist
I0428 20:02:11.560550 29889 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:11.560556 29889 net.cpp:131] Top shape: 100 (100)
I0428 20:02:11.560559 29889 net.cpp:139] Memory required for data: 314000
I0428 20:02:11.560564 29889 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:11.560572 29889 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:11.560576 29889 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:11.560581 29889 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:11.560588 29889 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:11.560684 29889 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:11.560693 29889 net.cpp:131] Top shape: 100 (100)
I0428 20:02:11.560695 29889 net.cpp:131] Top shape: 100 (100)
I0428 20:02:11.560698 29889 net.cpp:139] Memory required for data: 314800
I0428 20:02:11.560701 29889 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:11.560709 29889 net.cpp:86] Creating Layer conv0
I0428 20:02:11.560714 29889 net.cpp:408] conv0 <- data
I0428 20:02:11.560717 29889 net.cpp:382] conv0 -> conv0
I0428 20:02:11.562229 29889 net.cpp:124] Setting up conv0
I0428 20:02:11.562243 29889 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:11.562247 29889 net.cpp:139] Memory required for data: 2618800
I0428 20:02:11.562257 29889 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:11.562263 29889 net.cpp:86] Creating Layer pool0
I0428 20:02:11.562265 29889 net.cpp:408] pool0 <- conv0
I0428 20:02:11.562270 29889 net.cpp:382] pool0 -> pool0
I0428 20:02:11.562304 29889 net.cpp:124] Setting up pool0
I0428 20:02:11.562310 29889 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:11.562314 29889 net.cpp:139] Memory required for data: 3194800
I0428 20:02:11.562316 29889 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:11.562324 29889 net.cpp:86] Creating Layer conv1
I0428 20:02:11.562327 29889 net.cpp:408] conv1 <- pool0
I0428 20:02:11.562331 29889 net.cpp:382] conv1 -> conv1
I0428 20:02:11.563941 29889 net.cpp:124] Setting up conv1
I0428 20:02:11.563969 29889 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:02:11.563974 29889 net.cpp:139] Memory required for data: 4474800
I0428 20:02:11.563982 29889 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:11.563989 29889 net.cpp:86] Creating Layer pool1
I0428 20:02:11.563993 29889 net.cpp:408] pool1 <- conv1
I0428 20:02:11.563998 29889 net.cpp:382] pool1 -> pool1
I0428 20:02:11.564034 29889 net.cpp:124] Setting up pool1
I0428 20:02:11.564040 29889 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:02:11.564044 29889 net.cpp:139] Memory required for data: 4794800
I0428 20:02:11.564049 29889 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:11.564054 29889 net.cpp:86] Creating Layer ip1
I0428 20:02:11.564057 29889 net.cpp:408] ip1 <- pool1
I0428 20:02:11.564062 29889 net.cpp:382] ip1 -> ip1
I0428 20:02:11.564318 29889 net.cpp:124] Setting up ip1
I0428 20:02:11.564327 29889 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:11.564340 29889 net.cpp:139] Memory required for data: 4804800
I0428 20:02:11.564349 29889 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:11.564354 29889 net.cpp:86] Creating Layer relu1
I0428 20:02:11.564357 29889 net.cpp:408] relu1 <- ip1
I0428 20:02:11.564363 29889 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:11.564544 29889 net.cpp:124] Setting up relu1
I0428 20:02:11.564553 29889 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:11.564556 29889 net.cpp:139] Memory required for data: 4814800
I0428 20:02:11.564559 29889 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:11.564566 29889 net.cpp:86] Creating Layer ip2
I0428 20:02:11.564569 29889 net.cpp:408] ip2 <- ip1
I0428 20:02:11.564575 29889 net.cpp:382] ip2 -> ip2
I0428 20:02:11.564673 29889 net.cpp:124] Setting up ip2
I0428 20:02:11.564680 29889 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:11.564684 29889 net.cpp:139] Memory required for data: 4824800
I0428 20:02:11.564690 29889 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:11.564694 29889 net.cpp:86] Creating Layer relu2
I0428 20:02:11.564698 29889 net.cpp:408] relu2 <- ip2
I0428 20:02:11.564702 29889 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:11.564916 29889 net.cpp:124] Setting up relu2
I0428 20:02:11.564926 29889 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:11.564929 29889 net.cpp:139] Memory required for data: 4834800
I0428 20:02:11.564934 29889 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:11.564939 29889 net.cpp:86] Creating Layer ip3
I0428 20:02:11.564942 29889 net.cpp:408] ip3 <- ip2
I0428 20:02:11.564949 29889 net.cpp:382] ip3 -> ip3
I0428 20:02:11.565100 29889 net.cpp:124] Setting up ip3
I0428 20:02:11.565109 29889 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:11.565112 29889 net.cpp:139] Memory required for data: 4838800
I0428 20:02:11.565126 29889 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:11.565131 29889 net.cpp:86] Creating Layer relu3
I0428 20:02:11.565135 29889 net.cpp:408] relu3 <- ip3
I0428 20:02:11.565153 29889 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:11.565940 29889 net.cpp:124] Setting up relu3
I0428 20:02:11.565953 29889 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:11.565970 29889 net.cpp:139] Memory required for data: 4842800
I0428 20:02:11.565974 29889 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:02:11.565979 29889 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:02:11.565984 29889 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:02:11.565989 29889 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:02:11.565994 29889 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:02:11.566069 29889 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:02:11.566076 29889 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:11.566081 29889 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:11.566082 29889 net.cpp:139] Memory required for data: 4850800
I0428 20:02:11.566085 29889 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:11.566090 29889 net.cpp:86] Creating Layer accuracy
I0428 20:02:11.566094 29889 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:02:11.566099 29889 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:11.566103 29889 net.cpp:382] accuracy -> accuracy
I0428 20:02:11.566110 29889 net.cpp:124] Setting up accuracy
I0428 20:02:11.566114 29889 net.cpp:131] Top shape: (1)
I0428 20:02:11.566118 29889 net.cpp:139] Memory required for data: 4850804
I0428 20:02:11.566125 29889 layer_factory.hpp:77] Creating layer loss
I0428 20:02:11.566145 29889 net.cpp:86] Creating Layer loss
I0428 20:02:11.566148 29889 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:02:11.566153 29889 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:11.566157 29889 net.cpp:382] loss -> loss
I0428 20:02:11.566164 29889 layer_factory.hpp:77] Creating layer loss
I0428 20:02:11.566429 29889 net.cpp:124] Setting up loss
I0428 20:02:11.566439 29889 net.cpp:131] Top shape: (1)
I0428 20:02:11.566443 29889 net.cpp:134]     with loss weight 1
I0428 20:02:11.566476 29889 net.cpp:139] Memory required for data: 4850808
I0428 20:02:11.566480 29889 net.cpp:200] loss needs backward computation.
I0428 20:02:11.566484 29889 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:11.566488 29889 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:02:11.566491 29889 net.cpp:200] relu3 needs backward computation.
I0428 20:02:11.566494 29889 net.cpp:200] ip3 needs backward computation.
I0428 20:02:11.566499 29889 net.cpp:200] relu2 needs backward computation.
I0428 20:02:11.566515 29889 net.cpp:200] ip2 needs backward computation.
I0428 20:02:11.566519 29889 net.cpp:200] relu1 needs backward computation.
I0428 20:02:11.566521 29889 net.cpp:200] ip1 needs backward computation.
I0428 20:02:11.566525 29889 net.cpp:200] pool1 needs backward computation.
I0428 20:02:11.566529 29889 net.cpp:200] conv1 needs backward computation.
I0428 20:02:11.566531 29889 net.cpp:200] pool0 needs backward computation.
I0428 20:02:11.566535 29889 net.cpp:200] conv0 needs backward computation.
I0428 20:02:11.566540 29889 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:11.566543 29889 net.cpp:202] mnist does not need backward computation.
I0428 20:02:11.566546 29889 net.cpp:244] This network produces output accuracy
I0428 20:02:11.566550 29889 net.cpp:244] This network produces output loss
I0428 20:02:11.566573 29889 net.cpp:257] Network initialization done.
I0428 20:02:11.566614 29889 solver.cpp:56] Solver scaffolding done.
I0428 20:02:11.566957 29889 caffe.cpp:248] Starting Optimization
I0428 20:02:11.566963 29889 solver.cpp:273] Solving LeNet
I0428 20:02:11.566967 29889 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:11.567790 29889 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:11.572024 29889 blocking_queue.cpp:49] Waiting for data
I0428 20:02:11.641656 29896 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:11.642241 29889 solver.cpp:398]     Test net output #0: accuracy = 0.1038
I0428 20:02:11.642262 29889 solver.cpp:398]     Test net output #1: loss = 2.30359 (* 1 = 2.30359 loss)
I0428 20:02:11.645508 29889 solver.cpp:219] Iteration 0 (-1.03556e-42 iter/s, 0.0784949s/100 iters), loss = 2.31602
I0428 20:02:11.645530 29889 solver.cpp:238]     Train net output #0: loss = 2.31602 (* 1 = 2.31602 loss)
I0428 20:02:11.645540 29889 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:11.754741 29889 solver.cpp:219] Iteration 100 (915.755 iter/s, 0.109199s/100 iters), loss = 0.927735
I0428 20:02:11.754781 29889 solver.cpp:238]     Train net output #0: loss = 0.927735 (* 1 = 0.927735 loss)
I0428 20:02:11.754787 29889 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:11.862207 29889 solver.cpp:219] Iteration 200 (931.018 iter/s, 0.107409s/100 iters), loss = 0.86768
I0428 20:02:11.862263 29889 solver.cpp:238]     Train net output #0: loss = 0.86768 (* 1 = 0.86768 loss)
I0428 20:02:11.862277 29889 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:11.985497 29889 solver.cpp:219] Iteration 300 (811.516 iter/s, 0.123226s/100 iters), loss = 0.29285
I0428 20:02:11.985533 29889 solver.cpp:238]     Train net output #0: loss = 0.29285 (* 1 = 0.29285 loss)
I0428 20:02:11.985543 29889 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:12.099288 29889 solver.cpp:219] Iteration 400 (879.168 iter/s, 0.113744s/100 iters), loss = 0.237708
I0428 20:02:12.099324 29889 solver.cpp:238]     Train net output #0: loss = 0.237708 (* 1 = 0.237708 loss)
I0428 20:02:12.099333 29889 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:12.211844 29889 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:12.265532 29896 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:12.266077 29889 solver.cpp:398]     Test net output #0: accuracy = 0.8489
I0428 20:02:12.266100 29889 solver.cpp:398]     Test net output #1: loss = 0.396347 (* 1 = 0.396347 loss)
I0428 20:02:12.267220 29889 solver.cpp:219] Iteration 500 (595.657 iter/s, 0.167882s/100 iters), loss = 0.435874
I0428 20:02:12.267274 29889 solver.cpp:238]     Train net output #0: loss = 0.435874 (* 1 = 0.435874 loss)
I0428 20:02:12.267283 29889 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:12.381934 29889 solver.cpp:219] Iteration 600 (872.223 iter/s, 0.11465s/100 iters), loss = 0.138228
I0428 20:02:12.381969 29889 solver.cpp:238]     Train net output #0: loss = 0.138228 (* 1 = 0.138228 loss)
I0428 20:02:12.381978 29889 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:12.498395 29889 solver.cpp:219] Iteration 700 (859.007 iter/s, 0.116413s/100 iters), loss = 0.174927
I0428 20:02:12.498433 29889 solver.cpp:238]     Train net output #0: loss = 0.174927 (* 1 = 0.174927 loss)
I0428 20:02:12.498441 29889 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:12.611271 29889 solver.cpp:219] Iteration 800 (886.317 iter/s, 0.112826s/100 iters), loss = 0.32395
I0428 20:02:12.611304 29889 solver.cpp:238]     Train net output #0: loss = 0.32395 (* 1 = 0.32395 loss)
I0428 20:02:12.611312 29889 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:12.728754 29889 solver.cpp:219] Iteration 900 (851.51 iter/s, 0.117438s/100 iters), loss = 0.179457
I0428 20:02:12.728788 29889 solver.cpp:238]     Train net output #0: loss = 0.179457 (* 1 = 0.179457 loss)
I0428 20:02:12.728797 29889 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:12.766819 29895 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:12.841435 29889 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:12.842895 29889 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:12.843930 29889 solver.cpp:311] Iteration 1000, loss = 0.080657
I0428 20:02:12.843966 29889 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:12.902662 29896 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:12.904484 29889 solver.cpp:398]     Test net output #0: accuracy = 0.9771
I0428 20:02:12.904512 29889 solver.cpp:398]     Test net output #1: loss = 0.0735475 (* 1 = 0.0735475 loss)
I0428 20:02:12.904531 29889 solver.cpp:316] Optimization Done.
I0428 20:02:12.904536 29889 caffe.cpp:259] Optimization Done.
