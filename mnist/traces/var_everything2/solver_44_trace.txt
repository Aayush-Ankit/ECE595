I0428 19:28:59.375759 21894 caffe.cpp:218] Using GPUs 0
I0428 19:28:59.416049 21894 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:28:59.935536 21894 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test44.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:28:59.935675 21894 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test44.prototxt
I0428 19:28:59.935997 21894 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:28:59.936013 21894 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:28:59.936089 21894 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:28:59.936151 21894 layer_factory.hpp:77] Creating layer mnist
I0428 19:28:59.936256 21894 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:28:59.936281 21894 net.cpp:86] Creating Layer mnist
I0428 19:28:59.936290 21894 net.cpp:382] mnist -> data
I0428 19:28:59.936312 21894 net.cpp:382] mnist -> label
I0428 19:28:59.937425 21894 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:28:59.939859 21894 net.cpp:124] Setting up mnist
I0428 19:28:59.939877 21894 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:28:59.939882 21894 net.cpp:131] Top shape: 64 (64)
I0428 19:28:59.939887 21894 net.cpp:139] Memory required for data: 200960
I0428 19:28:59.939893 21894 layer_factory.hpp:77] Creating layer conv0
I0428 19:28:59.939909 21894 net.cpp:86] Creating Layer conv0
I0428 19:28:59.939914 21894 net.cpp:408] conv0 <- data
I0428 19:28:59.939925 21894 net.cpp:382] conv0 -> conv0
I0428 19:29:00.204272 21894 net.cpp:124] Setting up conv0
I0428 19:29:00.204313 21894 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:29:00.204316 21894 net.cpp:139] Memory required for data: 495872
I0428 19:29:00.204331 21894 layer_factory.hpp:77] Creating layer pool0
I0428 19:29:00.204344 21894 net.cpp:86] Creating Layer pool0
I0428 19:29:00.204347 21894 net.cpp:408] pool0 <- conv0
I0428 19:29:00.204352 21894 net.cpp:382] pool0 -> pool0
I0428 19:29:00.204447 21894 net.cpp:124] Setting up pool0
I0428 19:29:00.204453 21894 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:29:00.204457 21894 net.cpp:139] Memory required for data: 569600
I0428 19:29:00.204479 21894 layer_factory.hpp:77] Creating layer ip1
I0428 19:29:00.204504 21894 net.cpp:86] Creating Layer ip1
I0428 19:29:00.204507 21894 net.cpp:408] ip1 <- pool0
I0428 19:29:00.204514 21894 net.cpp:382] ip1 -> ip1
I0428 19:29:00.205554 21894 net.cpp:124] Setting up ip1
I0428 19:29:00.205569 21894 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:00.205574 21894 net.cpp:139] Memory required for data: 572160
I0428 19:29:00.205584 21894 layer_factory.hpp:77] Creating layer relu1
I0428 19:29:00.205590 21894 net.cpp:86] Creating Layer relu1
I0428 19:29:00.205595 21894 net.cpp:408] relu1 <- ip1
I0428 19:29:00.205600 21894 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:29:00.205783 21894 net.cpp:124] Setting up relu1
I0428 19:29:00.205793 21894 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:00.205797 21894 net.cpp:139] Memory required for data: 574720
I0428 19:29:00.205801 21894 layer_factory.hpp:77] Creating layer ip2
I0428 19:29:00.205808 21894 net.cpp:86] Creating Layer ip2
I0428 19:29:00.205812 21894 net.cpp:408] ip2 <- ip1
I0428 19:29:00.205817 21894 net.cpp:382] ip2 -> ip2
I0428 19:29:00.205919 21894 net.cpp:124] Setting up ip2
I0428 19:29:00.205926 21894 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:00.205929 21894 net.cpp:139] Memory required for data: 577280
I0428 19:29:00.205937 21894 layer_factory.hpp:77] Creating layer relu2
I0428 19:29:00.205943 21894 net.cpp:86] Creating Layer relu2
I0428 19:29:00.205946 21894 net.cpp:408] relu2 <- ip2
I0428 19:29:00.205950 21894 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:29:00.206763 21894 net.cpp:124] Setting up relu2
I0428 19:29:00.206778 21894 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:00.206781 21894 net.cpp:139] Memory required for data: 579840
I0428 19:29:00.206785 21894 layer_factory.hpp:77] Creating layer loss
I0428 19:29:00.206792 21894 net.cpp:86] Creating Layer loss
I0428 19:29:00.206795 21894 net.cpp:408] loss <- ip2
I0428 19:29:00.206800 21894 net.cpp:408] loss <- label
I0428 19:29:00.206807 21894 net.cpp:382] loss -> loss
I0428 19:29:00.206822 21894 layer_factory.hpp:77] Creating layer loss
I0428 19:29:00.207087 21894 net.cpp:124] Setting up loss
I0428 19:29:00.207098 21894 net.cpp:131] Top shape: (1)
I0428 19:29:00.207101 21894 net.cpp:134]     with loss weight 1
I0428 19:29:00.207116 21894 net.cpp:139] Memory required for data: 579844
I0428 19:29:00.207120 21894 net.cpp:200] loss needs backward computation.
I0428 19:29:00.207123 21894 net.cpp:200] relu2 needs backward computation.
I0428 19:29:00.207128 21894 net.cpp:200] ip2 needs backward computation.
I0428 19:29:00.207130 21894 net.cpp:200] relu1 needs backward computation.
I0428 19:29:00.207134 21894 net.cpp:200] ip1 needs backward computation.
I0428 19:29:00.207136 21894 net.cpp:200] pool0 needs backward computation.
I0428 19:29:00.207139 21894 net.cpp:200] conv0 needs backward computation.
I0428 19:29:00.207144 21894 net.cpp:202] mnist does not need backward computation.
I0428 19:29:00.207146 21894 net.cpp:244] This network produces output loss
I0428 19:29:00.207154 21894 net.cpp:257] Network initialization done.
I0428 19:29:00.207424 21894 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test44.prototxt
I0428 19:29:00.207475 21894 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:29:00.207548 21894 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:29:00.207643 21894 layer_factory.hpp:77] Creating layer mnist
I0428 19:29:00.207695 21894 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:29:00.207713 21894 net.cpp:86] Creating Layer mnist
I0428 19:29:00.207718 21894 net.cpp:382] mnist -> data
I0428 19:29:00.207728 21894 net.cpp:382] mnist -> label
I0428 19:29:00.207859 21894 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:29:00.209918 21894 net.cpp:124] Setting up mnist
I0428 19:29:00.209946 21894 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:29:00.209952 21894 net.cpp:131] Top shape: 100 (100)
I0428 19:29:00.209955 21894 net.cpp:139] Memory required for data: 314000
I0428 19:29:00.209959 21894 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:29:00.209965 21894 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:29:00.209969 21894 net.cpp:408] label_mnist_1_split <- label
I0428 19:29:00.209974 21894 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:29:00.209981 21894 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:29:00.210031 21894 net.cpp:124] Setting up label_mnist_1_split
I0428 19:29:00.210042 21894 net.cpp:131] Top shape: 100 (100)
I0428 19:29:00.210047 21894 net.cpp:131] Top shape: 100 (100)
I0428 19:29:00.210048 21894 net.cpp:139] Memory required for data: 314800
I0428 19:29:00.210052 21894 layer_factory.hpp:77] Creating layer conv0
I0428 19:29:00.210062 21894 net.cpp:86] Creating Layer conv0
I0428 19:29:00.210065 21894 net.cpp:408] conv0 <- data
I0428 19:29:00.210070 21894 net.cpp:382] conv0 -> conv0
I0428 19:29:00.211954 21894 net.cpp:124] Setting up conv0
I0428 19:29:00.211968 21894 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:29:00.211988 21894 net.cpp:139] Memory required for data: 775600
I0428 19:29:00.211997 21894 layer_factory.hpp:77] Creating layer pool0
I0428 19:29:00.212004 21894 net.cpp:86] Creating Layer pool0
I0428 19:29:00.212007 21894 net.cpp:408] pool0 <- conv0
I0428 19:29:00.212014 21894 net.cpp:382] pool0 -> pool0
I0428 19:29:00.212051 21894 net.cpp:124] Setting up pool0
I0428 19:29:00.212057 21894 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:29:00.212059 21894 net.cpp:139] Memory required for data: 890800
I0428 19:29:00.212062 21894 layer_factory.hpp:77] Creating layer ip1
I0428 19:29:00.212070 21894 net.cpp:86] Creating Layer ip1
I0428 19:29:00.212074 21894 net.cpp:408] ip1 <- pool0
I0428 19:29:00.212080 21894 net.cpp:382] ip1 -> ip1
I0428 19:29:00.212190 21894 net.cpp:124] Setting up ip1
I0428 19:29:00.212198 21894 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:00.212203 21894 net.cpp:139] Memory required for data: 894800
I0428 19:29:00.212208 21894 layer_factory.hpp:77] Creating layer relu1
I0428 19:29:00.212213 21894 net.cpp:86] Creating Layer relu1
I0428 19:29:00.212216 21894 net.cpp:408] relu1 <- ip1
I0428 19:29:00.212220 21894 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:29:00.212429 21894 net.cpp:124] Setting up relu1
I0428 19:29:00.212437 21894 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:00.212442 21894 net.cpp:139] Memory required for data: 898800
I0428 19:29:00.212457 21894 layer_factory.hpp:77] Creating layer ip2
I0428 19:29:00.212463 21894 net.cpp:86] Creating Layer ip2
I0428 19:29:00.212467 21894 net.cpp:408] ip2 <- ip1
I0428 19:29:00.212473 21894 net.cpp:382] ip2 -> ip2
I0428 19:29:00.212579 21894 net.cpp:124] Setting up ip2
I0428 19:29:00.212587 21894 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:00.212590 21894 net.cpp:139] Memory required for data: 902800
I0428 19:29:00.212599 21894 layer_factory.hpp:77] Creating layer relu2
I0428 19:29:00.212604 21894 net.cpp:86] Creating Layer relu2
I0428 19:29:00.212608 21894 net.cpp:408] relu2 <- ip2
I0428 19:29:00.212612 21894 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:29:00.212788 21894 net.cpp:124] Setting up relu2
I0428 19:29:00.212796 21894 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:00.212800 21894 net.cpp:139] Memory required for data: 906800
I0428 19:29:00.212803 21894 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:29:00.212827 21894 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:29:00.212831 21894 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:29:00.212836 21894 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:29:00.212842 21894 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:29:00.212882 21894 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:29:00.212889 21894 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:00.212893 21894 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:00.212896 21894 net.cpp:139] Memory required for data: 914800
I0428 19:29:00.212899 21894 layer_factory.hpp:77] Creating layer accuracy
I0428 19:29:00.212904 21894 net.cpp:86] Creating Layer accuracy
I0428 19:29:00.212908 21894 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:29:00.212913 21894 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:29:00.212918 21894 net.cpp:382] accuracy -> accuracy
I0428 19:29:00.212925 21894 net.cpp:124] Setting up accuracy
I0428 19:29:00.212929 21894 net.cpp:131] Top shape: (1)
I0428 19:29:00.212932 21894 net.cpp:139] Memory required for data: 914804
I0428 19:29:00.212935 21894 layer_factory.hpp:77] Creating layer loss
I0428 19:29:00.212940 21894 net.cpp:86] Creating Layer loss
I0428 19:29:00.212944 21894 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:29:00.212947 21894 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:29:00.212952 21894 net.cpp:382] loss -> loss
I0428 19:29:00.212959 21894 layer_factory.hpp:77] Creating layer loss
I0428 19:29:00.213907 21894 net.cpp:124] Setting up loss
I0428 19:29:00.213918 21894 net.cpp:131] Top shape: (1)
I0428 19:29:00.213937 21894 net.cpp:134]     with loss weight 1
I0428 19:29:00.213944 21894 net.cpp:139] Memory required for data: 914808
I0428 19:29:00.213948 21894 net.cpp:200] loss needs backward computation.
I0428 19:29:00.213953 21894 net.cpp:202] accuracy does not need backward computation.
I0428 19:29:00.213956 21894 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:29:00.213959 21894 net.cpp:200] relu2 needs backward computation.
I0428 19:29:00.213963 21894 net.cpp:200] ip2 needs backward computation.
I0428 19:29:00.213965 21894 net.cpp:200] relu1 needs backward computation.
I0428 19:29:00.213968 21894 net.cpp:200] ip1 needs backward computation.
I0428 19:29:00.213970 21894 net.cpp:200] pool0 needs backward computation.
I0428 19:29:00.213973 21894 net.cpp:200] conv0 needs backward computation.
I0428 19:29:00.213977 21894 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:29:00.213980 21894 net.cpp:202] mnist does not need backward computation.
I0428 19:29:00.213984 21894 net.cpp:244] This network produces output accuracy
I0428 19:29:00.213986 21894 net.cpp:244] This network produces output loss
I0428 19:29:00.213999 21894 net.cpp:257] Network initialization done.
I0428 19:29:00.214032 21894 solver.cpp:56] Solver scaffolding done.
I0428 19:29:00.214282 21894 caffe.cpp:248] Starting Optimization
I0428 19:29:00.214303 21894 solver.cpp:273] Solving LeNet
I0428 19:29:00.214306 21894 solver.cpp:274] Learning Rate Policy: inv
I0428 19:29:00.215317 21894 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:29:00.215440 21894 blocking_queue.cpp:49] Waiting for data
I0428 19:29:00.308240 21901 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:00.308729 21894 solver.cpp:398]     Test net output #0: accuracy = 0.0808
I0428 19:29:00.308765 21894 solver.cpp:398]     Test net output #1: loss = 2.31818 (* 1 = 2.31818 loss)
I0428 19:29:00.310889 21894 solver.cpp:219] Iteration 0 (0 iter/s, 0.0965007s/100 iters), loss = 2.30267
I0428 19:29:00.310930 21894 solver.cpp:238]     Train net output #0: loss = 2.30267 (* 1 = 2.30267 loss)
I0428 19:29:00.310945 21894 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:29:00.371039 21894 solver.cpp:219] Iteration 100 (1663.93 iter/s, 0.0600986s/100 iters), loss = 0.987161
I0428 19:29:00.371080 21894 solver.cpp:238]     Train net output #0: loss = 0.987161 (* 1 = 0.987161 loss)
I0428 19:29:00.371089 21894 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:29:00.422554 21894 solver.cpp:219] Iteration 200 (1943.18 iter/s, 0.0514621s/100 iters), loss = 0.467748
I0428 19:29:00.422580 21894 solver.cpp:238]     Train net output #0: loss = 0.467748 (* 1 = 0.467748 loss)
I0428 19:29:00.422586 21894 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:29:00.471067 21894 solver.cpp:219] Iteration 300 (2062.7 iter/s, 0.0484803s/100 iters), loss = 0.438584
I0428 19:29:00.471091 21894 solver.cpp:238]     Train net output #0: loss = 0.438584 (* 1 = 0.438584 loss)
I0428 19:29:00.471096 21894 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:29:00.519824 21894 solver.cpp:219] Iteration 400 (2052.38 iter/s, 0.048724s/100 iters), loss = 0.269235
I0428 19:29:00.519862 21894 solver.cpp:238]     Train net output #0: loss = 0.269235 (* 1 = 0.269235 loss)
I0428 19:29:00.519868 21894 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:29:00.568028 21894 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:29:00.623685 21901 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:00.624184 21894 solver.cpp:398]     Test net output #0: accuracy = 0.9045
I0428 19:29:00.624222 21894 solver.cpp:398]     Test net output #1: loss = 0.328089 (* 1 = 0.328089 loss)
I0428 19:29:00.624971 21894 solver.cpp:219] Iteration 500 (951.537 iter/s, 0.105093s/100 iters), loss = 0.469804
I0428 19:29:00.625068 21894 solver.cpp:238]     Train net output #0: loss = 0.469804 (* 1 = 0.469804 loss)
I0428 19:29:00.625082 21894 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:29:00.687451 21894 solver.cpp:219] Iteration 600 (1603.09 iter/s, 0.0623796s/100 iters), loss = 0.318555
I0428 19:29:00.687486 21894 solver.cpp:238]     Train net output #0: loss = 0.318555 (* 1 = 0.318555 loss)
I0428 19:29:00.687494 21894 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:29:00.741480 21894 solver.cpp:219] Iteration 700 (1852.32 iter/s, 0.0539863s/100 iters), loss = 0.442181
I0428 19:29:00.741510 21894 solver.cpp:238]     Train net output #0: loss = 0.442181 (* 1 = 0.442181 loss)
I0428 19:29:00.741518 21894 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:29:00.794034 21894 solver.cpp:219] Iteration 800 (1904.19 iter/s, 0.0525158s/100 iters), loss = 0.487877
I0428 19:29:00.794062 21894 solver.cpp:238]     Train net output #0: loss = 0.487877 (* 1 = 0.487877 loss)
I0428 19:29:00.794070 21894 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:29:00.846854 21894 solver.cpp:219] Iteration 900 (1894.55 iter/s, 0.0527831s/100 iters), loss = 0.483567
I0428 19:29:00.846884 21894 solver.cpp:238]     Train net output #0: loss = 0.483567 (* 1 = 0.483567 loss)
I0428 19:29:00.846890 21894 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:29:00.864590 21900 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:00.898994 21894 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:29:00.899567 21894 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:29:00.900161 21894 solver.cpp:311] Iteration 1000, loss = 0.31972
I0428 19:29:00.900193 21894 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:29:00.975126 21901 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:00.975634 21894 solver.cpp:398]     Test net output #0: accuracy = 0.9198
I0428 19:29:00.975672 21894 solver.cpp:398]     Test net output #1: loss = 0.26492 (* 1 = 0.26492 loss)
I0428 19:29:00.975679 21894 solver.cpp:316] Optimization Done.
I0428 19:29:00.975687 21894 caffe.cpp:259] Optimization Done.
