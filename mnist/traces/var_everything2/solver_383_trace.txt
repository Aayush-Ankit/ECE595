I0428 19:42:04.414432 24979 caffe.cpp:218] Using GPUs 0
I0428 19:42:04.455605 24979 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:42:04.912642 24979 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test383.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:42:04.912801 24979 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test383.prototxt
I0428 19:42:04.913245 24979 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:42:04.913265 24979 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:42:04.913353 24979 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:42:04.913441 24979 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:04.913544 24979 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:42:04.913569 24979 net.cpp:86] Creating Layer mnist
I0428 19:42:04.913583 24979 net.cpp:382] mnist -> data
I0428 19:42:04.913606 24979 net.cpp:382] mnist -> label
I0428 19:42:04.914690 24979 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:42:04.916900 24979 net.cpp:124] Setting up mnist
I0428 19:42:04.916918 24979 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:42:04.916925 24979 net.cpp:131] Top shape: 64 (64)
I0428 19:42:04.916930 24979 net.cpp:139] Memory required for data: 200960
I0428 19:42:04.916939 24979 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:04.916973 24979 net.cpp:86] Creating Layer conv0
I0428 19:42:04.916993 24979 net.cpp:408] conv0 <- data
I0428 19:42:04.917011 24979 net.cpp:382] conv0 -> conv0
I0428 19:42:05.144608 24979 net.cpp:124] Setting up conv0
I0428 19:42:05.144636 24979 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:42:05.144642 24979 net.cpp:139] Memory required for data: 495872
I0428 19:42:05.144661 24979 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:05.144678 24979 net.cpp:86] Creating Layer pool0
I0428 19:42:05.144685 24979 net.cpp:408] pool0 <- conv0
I0428 19:42:05.144693 24979 net.cpp:382] pool0 -> pool0
I0428 19:42:05.144749 24979 net.cpp:124] Setting up pool0
I0428 19:42:05.144758 24979 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:42:05.144762 24979 net.cpp:139] Memory required for data: 569600
I0428 19:42:05.144767 24979 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:05.144783 24979 net.cpp:86] Creating Layer conv1
I0428 19:42:05.144789 24979 net.cpp:408] conv1 <- pool0
I0428 19:42:05.144798 24979 net.cpp:382] conv1 -> conv1
I0428 19:42:05.146852 24979 net.cpp:124] Setting up conv1
I0428 19:42:05.146867 24979 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:42:05.146872 24979 net.cpp:139] Memory required for data: 733440
I0428 19:42:05.146900 24979 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:05.146911 24979 net.cpp:86] Creating Layer pool1
I0428 19:42:05.146917 24979 net.cpp:408] pool1 <- conv1
I0428 19:42:05.146925 24979 net.cpp:382] pool1 -> pool1
I0428 19:42:05.146968 24979 net.cpp:124] Setting up pool1
I0428 19:42:05.146976 24979 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:42:05.146981 24979 net.cpp:139] Memory required for data: 774400
I0428 19:42:05.146986 24979 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:05.146997 24979 net.cpp:86] Creating Layer ip1
I0428 19:42:05.147002 24979 net.cpp:408] ip1 <- pool1
I0428 19:42:05.147011 24979 net.cpp:382] ip1 -> ip1
I0428 19:42:05.147991 24979 net.cpp:124] Setting up ip1
I0428 19:42:05.148005 24979 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:42:05.148010 24979 net.cpp:139] Memory required for data: 787200
I0428 19:42:05.148022 24979 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:05.148031 24979 net.cpp:86] Creating Layer relu1
I0428 19:42:05.148037 24979 net.cpp:408] relu1 <- ip1
I0428 19:42:05.148044 24979 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:05.148221 24979 net.cpp:124] Setting up relu1
I0428 19:42:05.148231 24979 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:42:05.148236 24979 net.cpp:139] Memory required for data: 800000
I0428 19:42:05.148241 24979 layer_factory.hpp:77] Creating layer ip2
I0428 19:42:05.148252 24979 net.cpp:86] Creating Layer ip2
I0428 19:42:05.148257 24979 net.cpp:408] ip2 <- ip1
I0428 19:42:05.148264 24979 net.cpp:382] ip2 -> ip2
I0428 19:42:05.148363 24979 net.cpp:124] Setting up ip2
I0428 19:42:05.148372 24979 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:05.148377 24979 net.cpp:139] Memory required for data: 802560
I0428 19:42:05.148386 24979 layer_factory.hpp:77] Creating layer relu2
I0428 19:42:05.148394 24979 net.cpp:86] Creating Layer relu2
I0428 19:42:05.148403 24979 net.cpp:408] relu2 <- ip2
I0428 19:42:05.148421 24979 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:42:05.149204 24979 net.cpp:124] Setting up relu2
I0428 19:42:05.149217 24979 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:05.149222 24979 net.cpp:139] Memory required for data: 805120
I0428 19:42:05.149227 24979 layer_factory.hpp:77] Creating layer ip3
I0428 19:42:05.149237 24979 net.cpp:86] Creating Layer ip3
I0428 19:42:05.149243 24979 net.cpp:408] ip3 <- ip2
I0428 19:42:05.149251 24979 net.cpp:382] ip3 -> ip3
I0428 19:42:05.149363 24979 net.cpp:124] Setting up ip3
I0428 19:42:05.149371 24979 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:05.149376 24979 net.cpp:139] Memory required for data: 807680
I0428 19:42:05.149389 24979 layer_factory.hpp:77] Creating layer relu3
I0428 19:42:05.149399 24979 net.cpp:86] Creating Layer relu3
I0428 19:42:05.149406 24979 net.cpp:408] relu3 <- ip3
I0428 19:42:05.149413 24979 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:42:05.149579 24979 net.cpp:124] Setting up relu3
I0428 19:42:05.149588 24979 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:05.149593 24979 net.cpp:139] Memory required for data: 810240
I0428 19:42:05.149598 24979 layer_factory.hpp:77] Creating layer loss
I0428 19:42:05.149606 24979 net.cpp:86] Creating Layer loss
I0428 19:42:05.149612 24979 net.cpp:408] loss <- ip3
I0428 19:42:05.149618 24979 net.cpp:408] loss <- label
I0428 19:42:05.149626 24979 net.cpp:382] loss -> loss
I0428 19:42:05.149648 24979 layer_factory.hpp:77] Creating layer loss
I0428 19:42:05.149894 24979 net.cpp:124] Setting up loss
I0428 19:42:05.149905 24979 net.cpp:131] Top shape: (1)
I0428 19:42:05.149910 24979 net.cpp:134]     with loss weight 1
I0428 19:42:05.149930 24979 net.cpp:139] Memory required for data: 810244
I0428 19:42:05.149935 24979 net.cpp:200] loss needs backward computation.
I0428 19:42:05.149941 24979 net.cpp:200] relu3 needs backward computation.
I0428 19:42:05.149946 24979 net.cpp:200] ip3 needs backward computation.
I0428 19:42:05.149950 24979 net.cpp:200] relu2 needs backward computation.
I0428 19:42:05.149955 24979 net.cpp:200] ip2 needs backward computation.
I0428 19:42:05.149960 24979 net.cpp:200] relu1 needs backward computation.
I0428 19:42:05.149965 24979 net.cpp:200] ip1 needs backward computation.
I0428 19:42:05.149986 24979 net.cpp:200] pool1 needs backward computation.
I0428 19:42:05.149991 24979 net.cpp:200] conv1 needs backward computation.
I0428 19:42:05.149996 24979 net.cpp:200] pool0 needs backward computation.
I0428 19:42:05.150001 24979 net.cpp:200] conv0 needs backward computation.
I0428 19:42:05.150007 24979 net.cpp:202] mnist does not need backward computation.
I0428 19:42:05.150012 24979 net.cpp:244] This network produces output loss
I0428 19:42:05.150025 24979 net.cpp:257] Network initialization done.
I0428 19:42:05.150388 24979 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test383.prototxt
I0428 19:42:05.150419 24979 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:42:05.150532 24979 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:42:05.150642 24979 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:05.150701 24979 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:42:05.150718 24979 net.cpp:86] Creating Layer mnist
I0428 19:42:05.150727 24979 net.cpp:382] mnist -> data
I0428 19:42:05.150738 24979 net.cpp:382] mnist -> label
I0428 19:42:05.150882 24979 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:42:05.153043 24979 net.cpp:124] Setting up mnist
I0428 19:42:05.153074 24979 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:42:05.153082 24979 net.cpp:131] Top shape: 100 (100)
I0428 19:42:05.153102 24979 net.cpp:139] Memory required for data: 314000
I0428 19:42:05.153110 24979 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:42:05.153137 24979 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:42:05.153143 24979 net.cpp:408] label_mnist_1_split <- label
I0428 19:42:05.153151 24979 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:42:05.153173 24979 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:42:05.153239 24979 net.cpp:124] Setting up label_mnist_1_split
I0428 19:42:05.153247 24979 net.cpp:131] Top shape: 100 (100)
I0428 19:42:05.153254 24979 net.cpp:131] Top shape: 100 (100)
I0428 19:42:05.153259 24979 net.cpp:139] Memory required for data: 314800
I0428 19:42:05.153264 24979 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:05.153276 24979 net.cpp:86] Creating Layer conv0
I0428 19:42:05.153283 24979 net.cpp:408] conv0 <- data
I0428 19:42:05.153292 24979 net.cpp:382] conv0 -> conv0
I0428 19:42:05.154829 24979 net.cpp:124] Setting up conv0
I0428 19:42:05.154844 24979 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:42:05.154850 24979 net.cpp:139] Memory required for data: 775600
I0428 19:42:05.154880 24979 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:05.154889 24979 net.cpp:86] Creating Layer pool0
I0428 19:42:05.154896 24979 net.cpp:408] pool0 <- conv0
I0428 19:42:05.154903 24979 net.cpp:382] pool0 -> pool0
I0428 19:42:05.154947 24979 net.cpp:124] Setting up pool0
I0428 19:42:05.154973 24979 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:42:05.154978 24979 net.cpp:139] Memory required for data: 890800
I0428 19:42:05.154983 24979 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:05.154997 24979 net.cpp:86] Creating Layer conv1
I0428 19:42:05.155004 24979 net.cpp:408] conv1 <- pool0
I0428 19:42:05.155015 24979 net.cpp:382] conv1 -> conv1
I0428 19:42:05.156613 24979 net.cpp:124] Setting up conv1
I0428 19:42:05.156630 24979 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:42:05.156635 24979 net.cpp:139] Memory required for data: 1146800
I0428 19:42:05.156656 24979 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:05.156666 24979 net.cpp:86] Creating Layer pool1
I0428 19:42:05.156673 24979 net.cpp:408] pool1 <- conv1
I0428 19:42:05.156685 24979 net.cpp:382] pool1 -> pool1
I0428 19:42:05.156728 24979 net.cpp:124] Setting up pool1
I0428 19:42:05.156738 24979 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:42:05.156743 24979 net.cpp:139] Memory required for data: 1210800
I0428 19:42:05.156749 24979 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:05.156761 24979 net.cpp:86] Creating Layer ip1
I0428 19:42:05.156769 24979 net.cpp:408] ip1 <- pool1
I0428 19:42:05.156777 24979 net.cpp:382] ip1 -> ip1
I0428 19:42:05.156976 24979 net.cpp:124] Setting up ip1
I0428 19:42:05.156988 24979 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:42:05.157008 24979 net.cpp:139] Memory required for data: 1230800
I0428 19:42:05.157022 24979 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:05.157032 24979 net.cpp:86] Creating Layer relu1
I0428 19:42:05.157038 24979 net.cpp:408] relu1 <- ip1
I0428 19:42:05.157047 24979 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:05.157277 24979 net.cpp:124] Setting up relu1
I0428 19:42:05.157290 24979 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:42:05.157296 24979 net.cpp:139] Memory required for data: 1250800
I0428 19:42:05.157301 24979 layer_factory.hpp:77] Creating layer ip2
I0428 19:42:05.157323 24979 net.cpp:86] Creating Layer ip2
I0428 19:42:05.157330 24979 net.cpp:408] ip2 <- ip1
I0428 19:42:05.157341 24979 net.cpp:382] ip2 -> ip2
I0428 19:42:05.157457 24979 net.cpp:124] Setting up ip2
I0428 19:42:05.157467 24979 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:05.157474 24979 net.cpp:139] Memory required for data: 1254800
I0428 19:42:05.157486 24979 layer_factory.hpp:77] Creating layer relu2
I0428 19:42:05.157496 24979 net.cpp:86] Creating Layer relu2
I0428 19:42:05.157502 24979 net.cpp:408] relu2 <- ip2
I0428 19:42:05.157510 24979 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:42:05.157681 24979 net.cpp:124] Setting up relu2
I0428 19:42:05.157691 24979 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:05.157696 24979 net.cpp:139] Memory required for data: 1258800
I0428 19:42:05.157701 24979 layer_factory.hpp:77] Creating layer ip3
I0428 19:42:05.157712 24979 net.cpp:86] Creating Layer ip3
I0428 19:42:05.157718 24979 net.cpp:408] ip3 <- ip2
I0428 19:42:05.157729 24979 net.cpp:382] ip3 -> ip3
I0428 19:42:05.157871 24979 net.cpp:124] Setting up ip3
I0428 19:42:05.157896 24979 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:05.157901 24979 net.cpp:139] Memory required for data: 1262800
I0428 19:42:05.157912 24979 layer_factory.hpp:77] Creating layer relu3
I0428 19:42:05.157920 24979 net.cpp:86] Creating Layer relu3
I0428 19:42:05.157929 24979 net.cpp:408] relu3 <- ip3
I0428 19:42:05.157940 24979 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:42:05.158764 24979 net.cpp:124] Setting up relu3
I0428 19:42:05.158778 24979 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:05.158783 24979 net.cpp:139] Memory required for data: 1266800
I0428 19:42:05.158788 24979 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:42:05.158797 24979 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:42:05.158802 24979 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:42:05.158812 24979 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:42:05.158821 24979 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:42:05.158866 24979 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:42:05.158874 24979 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:05.158881 24979 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:05.158885 24979 net.cpp:139] Memory required for data: 1274800
I0428 19:42:05.158890 24979 layer_factory.hpp:77] Creating layer accuracy
I0428 19:42:05.158898 24979 net.cpp:86] Creating Layer accuracy
I0428 19:42:05.158905 24979 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:42:05.158911 24979 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:42:05.158918 24979 net.cpp:382] accuracy -> accuracy
I0428 19:42:05.158929 24979 net.cpp:124] Setting up accuracy
I0428 19:42:05.158936 24979 net.cpp:131] Top shape: (1)
I0428 19:42:05.158941 24979 net.cpp:139] Memory required for data: 1274804
I0428 19:42:05.158946 24979 layer_factory.hpp:77] Creating layer loss
I0428 19:42:05.158956 24979 net.cpp:86] Creating Layer loss
I0428 19:42:05.158962 24979 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:42:05.158968 24979 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:42:05.158975 24979 net.cpp:382] loss -> loss
I0428 19:42:05.158984 24979 layer_factory.hpp:77] Creating layer loss
I0428 19:42:05.159317 24979 net.cpp:124] Setting up loss
I0428 19:42:05.159329 24979 net.cpp:131] Top shape: (1)
I0428 19:42:05.159334 24979 net.cpp:134]     with loss weight 1
I0428 19:42:05.159344 24979 net.cpp:139] Memory required for data: 1274808
I0428 19:42:05.159361 24979 net.cpp:200] loss needs backward computation.
I0428 19:42:05.159368 24979 net.cpp:202] accuracy does not need backward computation.
I0428 19:42:05.159375 24979 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:42:05.159380 24979 net.cpp:200] relu3 needs backward computation.
I0428 19:42:05.159400 24979 net.cpp:200] ip3 needs backward computation.
I0428 19:42:05.159405 24979 net.cpp:200] relu2 needs backward computation.
I0428 19:42:05.159425 24979 net.cpp:200] ip2 needs backward computation.
I0428 19:42:05.159430 24979 net.cpp:200] relu1 needs backward computation.
I0428 19:42:05.159448 24979 net.cpp:200] ip1 needs backward computation.
I0428 19:42:05.159468 24979 net.cpp:200] pool1 needs backward computation.
I0428 19:42:05.159473 24979 net.cpp:200] conv1 needs backward computation.
I0428 19:42:05.159478 24979 net.cpp:200] pool0 needs backward computation.
I0428 19:42:05.159483 24979 net.cpp:200] conv0 needs backward computation.
I0428 19:42:05.159488 24979 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:42:05.159494 24979 net.cpp:202] mnist does not need backward computation.
I0428 19:42:05.159498 24979 net.cpp:244] This network produces output accuracy
I0428 19:42:05.159503 24979 net.cpp:244] This network produces output loss
I0428 19:42:05.159520 24979 net.cpp:257] Network initialization done.
I0428 19:42:05.159565 24979 solver.cpp:56] Solver scaffolding done.
I0428 19:42:05.159924 24979 caffe.cpp:248] Starting Optimization
I0428 19:42:05.159931 24979 solver.cpp:273] Solving LeNet
I0428 19:42:05.159936 24979 solver.cpp:274] Learning Rate Policy: inv
I0428 19:42:05.160729 24979 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:42:05.164134 24979 blocking_queue.cpp:49] Waiting for data
I0428 19:42:05.214396 24986 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:05.214813 24979 solver.cpp:398]     Test net output #0: accuracy = 0.1105
I0428 19:42:05.214849 24979 solver.cpp:398]     Test net output #1: loss = 2.29985 (* 1 = 2.29985 loss)
I0428 19:42:05.216771 24979 solver.cpp:219] Iteration 0 (-1.9911e-31 iter/s, 0.0568064s/100 iters), loss = 2.30102
I0428 19:42:05.216825 24979 solver.cpp:238]     Train net output #0: loss = 2.30102 (* 1 = 2.30102 loss)
I0428 19:42:05.216858 24979 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:42:05.292294 24979 solver.cpp:219] Iteration 100 (1324.73 iter/s, 0.0754872s/100 iters), loss = 1.16087
I0428 19:42:05.292321 24979 solver.cpp:238]     Train net output #0: loss = 1.16087 (* 1 = 1.16087 loss)
I0428 19:42:05.292330 24979 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:42:05.369022 24979 solver.cpp:219] Iteration 200 (1303.91 iter/s, 0.0766925s/100 iters), loss = 0.483417
I0428 19:42:05.369048 24979 solver.cpp:238]     Train net output #0: loss = 0.483417 (* 1 = 0.483417 loss)
I0428 19:42:05.369073 24979 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:42:05.446153 24979 solver.cpp:219] Iteration 300 (1297.05 iter/s, 0.077098s/100 iters), loss = 0.233988
I0428 19:42:05.446179 24979 solver.cpp:238]     Train net output #0: loss = 0.233988 (* 1 = 0.233988 loss)
I0428 19:42:05.446204 24979 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:42:05.522846 24979 solver.cpp:219] Iteration 400 (1304.48 iter/s, 0.0766589s/100 iters), loss = 0.334284
I0428 19:42:05.522872 24979 solver.cpp:238]     Train net output #0: loss = 0.334284 (* 1 = 0.334284 loss)
I0428 19:42:05.522897 24979 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:42:05.597863 24979 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:42:05.648186 24986 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:05.648593 24979 solver.cpp:398]     Test net output #0: accuracy = 0.9417
I0428 19:42:05.648615 24979 solver.cpp:398]     Test net output #1: loss = 0.186558 (* 1 = 0.186558 loss)
I0428 19:42:05.649420 24979 solver.cpp:219] Iteration 500 (790.277 iter/s, 0.126538s/100 iters), loss = 0.144684
I0428 19:42:05.649448 24979 solver.cpp:238]     Train net output #0: loss = 0.144684 (* 1 = 0.144684 loss)
I0428 19:42:05.649478 24979 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:42:05.727308 24979 solver.cpp:219] Iteration 600 (1284.55 iter/s, 0.0778486s/100 iters), loss = 0.0949032
I0428 19:42:05.727336 24979 solver.cpp:238]     Train net output #0: loss = 0.0949032 (* 1 = 0.0949032 loss)
I0428 19:42:05.727377 24979 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:42:05.807057 24979 solver.cpp:219] Iteration 700 (1254.5 iter/s, 0.0797132s/100 iters), loss = 0.244011
I0428 19:42:05.807127 24979 solver.cpp:238]     Train net output #0: loss = 0.244011 (* 1 = 0.244011 loss)
I0428 19:42:05.807137 24979 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:42:05.882262 24979 solver.cpp:219] Iteration 800 (1331.12 iter/s, 0.0751249s/100 iters), loss = 0.380787
I0428 19:42:05.882289 24979 solver.cpp:238]     Train net output #0: loss = 0.380787 (* 1 = 0.380787 loss)
I0428 19:42:05.882314 24979 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:42:05.957147 24979 solver.cpp:219] Iteration 900 (1336.06 iter/s, 0.0748472s/100 iters), loss = 0.279881
I0428 19:42:05.957175 24979 solver.cpp:238]     Train net output #0: loss = 0.279881 (* 1 = 0.279881 loss)
I0428 19:42:05.957201 24979 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:42:05.981910 24985 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:06.031409 24979 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:42:06.032205 24979 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:42:06.032711 24979 solver.cpp:311] Iteration 1000, loss = 0.211574
I0428 19:42:06.032727 24979 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:42:06.079023 24986 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:06.079462 24979 solver.cpp:398]     Test net output #0: accuracy = 0.9641
I0428 19:42:06.079483 24979 solver.cpp:398]     Test net output #1: loss = 0.116026 (* 1 = 0.116026 loss)
I0428 19:42:06.079490 24979 solver.cpp:316] Optimization Done.
I0428 19:42:06.079495 24979 caffe.cpp:259] Optimization Done.
