I0428 19:29:03.119849 21910 caffe.cpp:218] Using GPUs 0
I0428 19:29:03.160502 21910 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:29:03.679261 21910 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test46.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:29:03.679396 21910 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test46.prototxt
I0428 19:29:03.679733 21910 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:29:03.679749 21910 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:29:03.679827 21910 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:29:03.679896 21910 layer_factory.hpp:77] Creating layer mnist
I0428 19:29:03.679999 21910 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:29:03.680024 21910 net.cpp:86] Creating Layer mnist
I0428 19:29:03.680035 21910 net.cpp:382] mnist -> data
I0428 19:29:03.680058 21910 net.cpp:382] mnist -> label
I0428 19:29:03.681157 21910 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:29:03.683619 21910 net.cpp:124] Setting up mnist
I0428 19:29:03.683635 21910 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:29:03.683641 21910 net.cpp:131] Top shape: 64 (64)
I0428 19:29:03.683645 21910 net.cpp:139] Memory required for data: 200960
I0428 19:29:03.683652 21910 layer_factory.hpp:77] Creating layer conv0
I0428 19:29:03.683668 21910 net.cpp:86] Creating Layer conv0
I0428 19:29:03.683675 21910 net.cpp:408] conv0 <- data
I0428 19:29:03.683687 21910 net.cpp:382] conv0 -> conv0
I0428 19:29:03.973311 21910 net.cpp:124] Setting up conv0
I0428 19:29:03.973340 21910 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:29:03.973345 21910 net.cpp:139] Memory required for data: 495872
I0428 19:29:03.973363 21910 layer_factory.hpp:77] Creating layer pool0
I0428 19:29:03.973377 21910 net.cpp:86] Creating Layer pool0
I0428 19:29:03.973382 21910 net.cpp:408] pool0 <- conv0
I0428 19:29:03.973389 21910 net.cpp:382] pool0 -> pool0
I0428 19:29:03.973441 21910 net.cpp:124] Setting up pool0
I0428 19:29:03.973448 21910 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:29:03.973451 21910 net.cpp:139] Memory required for data: 569600
I0428 19:29:03.973472 21910 layer_factory.hpp:77] Creating layer ip1
I0428 19:29:03.973481 21910 net.cpp:86] Creating Layer ip1
I0428 19:29:03.973485 21910 net.cpp:408] ip1 <- pool0
I0428 19:29:03.973491 21910 net.cpp:382] ip1 -> ip1
I0428 19:29:03.974580 21910 net.cpp:124] Setting up ip1
I0428 19:29:03.974594 21910 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:29:03.974598 21910 net.cpp:139] Memory required for data: 576000
I0428 19:29:03.974608 21910 layer_factory.hpp:77] Creating layer relu1
I0428 19:29:03.974617 21910 net.cpp:86] Creating Layer relu1
I0428 19:29:03.974620 21910 net.cpp:408] relu1 <- ip1
I0428 19:29:03.974625 21910 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:29:03.974817 21910 net.cpp:124] Setting up relu1
I0428 19:29:03.974827 21910 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:29:03.974830 21910 net.cpp:139] Memory required for data: 582400
I0428 19:29:03.974834 21910 layer_factory.hpp:77] Creating layer ip2
I0428 19:29:03.974841 21910 net.cpp:86] Creating Layer ip2
I0428 19:29:03.974845 21910 net.cpp:408] ip2 <- ip1
I0428 19:29:03.974850 21910 net.cpp:382] ip2 -> ip2
I0428 19:29:03.974956 21910 net.cpp:124] Setting up ip2
I0428 19:29:03.974963 21910 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:03.974967 21910 net.cpp:139] Memory required for data: 584960
I0428 19:29:03.974975 21910 layer_factory.hpp:77] Creating layer relu2
I0428 19:29:03.974982 21910 net.cpp:86] Creating Layer relu2
I0428 19:29:03.974984 21910 net.cpp:408] relu2 <- ip2
I0428 19:29:03.974989 21910 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:29:03.975805 21910 net.cpp:124] Setting up relu2
I0428 19:29:03.975819 21910 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:03.975823 21910 net.cpp:139] Memory required for data: 587520
I0428 19:29:03.975827 21910 layer_factory.hpp:77] Creating layer loss
I0428 19:29:03.975834 21910 net.cpp:86] Creating Layer loss
I0428 19:29:03.975837 21910 net.cpp:408] loss <- ip2
I0428 19:29:03.975843 21910 net.cpp:408] loss <- label
I0428 19:29:03.975849 21910 net.cpp:382] loss -> loss
I0428 19:29:03.975869 21910 layer_factory.hpp:77] Creating layer loss
I0428 19:29:03.976133 21910 net.cpp:124] Setting up loss
I0428 19:29:03.976145 21910 net.cpp:131] Top shape: (1)
I0428 19:29:03.976148 21910 net.cpp:134]     with loss weight 1
I0428 19:29:03.976163 21910 net.cpp:139] Memory required for data: 587524
I0428 19:29:03.976167 21910 net.cpp:200] loss needs backward computation.
I0428 19:29:03.976171 21910 net.cpp:200] relu2 needs backward computation.
I0428 19:29:03.976176 21910 net.cpp:200] ip2 needs backward computation.
I0428 19:29:03.976179 21910 net.cpp:200] relu1 needs backward computation.
I0428 19:29:03.976182 21910 net.cpp:200] ip1 needs backward computation.
I0428 19:29:03.976186 21910 net.cpp:200] pool0 needs backward computation.
I0428 19:29:03.976189 21910 net.cpp:200] conv0 needs backward computation.
I0428 19:29:03.976193 21910 net.cpp:202] mnist does not need backward computation.
I0428 19:29:03.976197 21910 net.cpp:244] This network produces output loss
I0428 19:29:03.976205 21910 net.cpp:257] Network initialization done.
I0428 19:29:03.976487 21910 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test46.prototxt
I0428 19:29:03.976514 21910 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:29:03.976596 21910 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:29:03.976676 21910 layer_factory.hpp:77] Creating layer mnist
I0428 19:29:03.976724 21910 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:29:03.976738 21910 net.cpp:86] Creating Layer mnist
I0428 19:29:03.976744 21910 net.cpp:382] mnist -> data
I0428 19:29:03.976752 21910 net.cpp:382] mnist -> label
I0428 19:29:03.976860 21910 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:29:03.979125 21910 net.cpp:124] Setting up mnist
I0428 19:29:03.979140 21910 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:29:03.979146 21910 net.cpp:131] Top shape: 100 (100)
I0428 19:29:03.979149 21910 net.cpp:139] Memory required for data: 314000
I0428 19:29:03.979153 21910 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:29:03.979161 21910 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:29:03.979164 21910 net.cpp:408] label_mnist_1_split <- label
I0428 19:29:03.979171 21910 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:29:03.979178 21910 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:29:03.979252 21910 net.cpp:124] Setting up label_mnist_1_split
I0428 19:29:03.979269 21910 net.cpp:131] Top shape: 100 (100)
I0428 19:29:03.979274 21910 net.cpp:131] Top shape: 100 (100)
I0428 19:29:03.979276 21910 net.cpp:139] Memory required for data: 314800
I0428 19:29:03.979280 21910 layer_factory.hpp:77] Creating layer conv0
I0428 19:29:03.979290 21910 net.cpp:86] Creating Layer conv0
I0428 19:29:03.979293 21910 net.cpp:408] conv0 <- data
I0428 19:29:03.979298 21910 net.cpp:382] conv0 -> conv0
I0428 19:29:03.980830 21910 net.cpp:124] Setting up conv0
I0428 19:29:03.980846 21910 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:29:03.980851 21910 net.cpp:139] Memory required for data: 775600
I0428 19:29:03.980861 21910 layer_factory.hpp:77] Creating layer pool0
I0428 19:29:03.980870 21910 net.cpp:86] Creating Layer pool0
I0428 19:29:03.980873 21910 net.cpp:408] pool0 <- conv0
I0428 19:29:03.980880 21910 net.cpp:382] pool0 -> pool0
I0428 19:29:03.980918 21910 net.cpp:124] Setting up pool0
I0428 19:29:03.980926 21910 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:29:03.980928 21910 net.cpp:139] Memory required for data: 890800
I0428 19:29:03.980932 21910 layer_factory.hpp:77] Creating layer ip1
I0428 19:29:03.980940 21910 net.cpp:86] Creating Layer ip1
I0428 19:29:03.980943 21910 net.cpp:408] ip1 <- pool0
I0428 19:29:03.980948 21910 net.cpp:382] ip1 -> ip1
I0428 19:29:03.981101 21910 net.cpp:124] Setting up ip1
I0428 19:29:03.981109 21910 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:29:03.981113 21910 net.cpp:139] Memory required for data: 900800
I0428 19:29:03.981122 21910 layer_factory.hpp:77] Creating layer relu1
I0428 19:29:03.981134 21910 net.cpp:86] Creating Layer relu1
I0428 19:29:03.981138 21910 net.cpp:408] relu1 <- ip1
I0428 19:29:03.981142 21910 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:29:03.981371 21910 net.cpp:124] Setting up relu1
I0428 19:29:03.981386 21910 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:29:03.981389 21910 net.cpp:139] Memory required for data: 910800
I0428 19:29:03.981405 21910 layer_factory.hpp:77] Creating layer ip2
I0428 19:29:03.981411 21910 net.cpp:86] Creating Layer ip2
I0428 19:29:03.981415 21910 net.cpp:408] ip2 <- ip1
I0428 19:29:03.981420 21910 net.cpp:382] ip2 -> ip2
I0428 19:29:03.981546 21910 net.cpp:124] Setting up ip2
I0428 19:29:03.981556 21910 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:03.981559 21910 net.cpp:139] Memory required for data: 914800
I0428 19:29:03.981568 21910 layer_factory.hpp:77] Creating layer relu2
I0428 19:29:03.981573 21910 net.cpp:86] Creating Layer relu2
I0428 19:29:03.981577 21910 net.cpp:408] relu2 <- ip2
I0428 19:29:03.981587 21910 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:29:03.981753 21910 net.cpp:124] Setting up relu2
I0428 19:29:03.981762 21910 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:03.981766 21910 net.cpp:139] Memory required for data: 918800
I0428 19:29:03.981770 21910 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:29:03.981775 21910 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:29:03.981779 21910 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:29:03.981784 21910 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:29:03.981791 21910 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:29:03.981828 21910 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:29:03.981835 21910 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:03.981840 21910 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:03.981843 21910 net.cpp:139] Memory required for data: 926800
I0428 19:29:03.981853 21910 layer_factory.hpp:77] Creating layer accuracy
I0428 19:29:03.981859 21910 net.cpp:86] Creating Layer accuracy
I0428 19:29:03.981863 21910 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:29:03.981868 21910 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:29:03.981873 21910 net.cpp:382] accuracy -> accuracy
I0428 19:29:03.981879 21910 net.cpp:124] Setting up accuracy
I0428 19:29:03.981884 21910 net.cpp:131] Top shape: (1)
I0428 19:29:03.981887 21910 net.cpp:139] Memory required for data: 926804
I0428 19:29:03.981891 21910 layer_factory.hpp:77] Creating layer loss
I0428 19:29:03.981895 21910 net.cpp:86] Creating Layer loss
I0428 19:29:03.981899 21910 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:29:03.981904 21910 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:29:03.981907 21910 net.cpp:382] loss -> loss
I0428 19:29:03.981914 21910 layer_factory.hpp:77] Creating layer loss
I0428 19:29:03.982857 21910 net.cpp:124] Setting up loss
I0428 19:29:03.982870 21910 net.cpp:131] Top shape: (1)
I0428 19:29:03.982874 21910 net.cpp:134]     with loss weight 1
I0428 19:29:03.982882 21910 net.cpp:139] Memory required for data: 926808
I0428 19:29:03.982885 21910 net.cpp:200] loss needs backward computation.
I0428 19:29:03.982889 21910 net.cpp:202] accuracy does not need backward computation.
I0428 19:29:03.982893 21910 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:29:03.982897 21910 net.cpp:200] relu2 needs backward computation.
I0428 19:29:03.982902 21910 net.cpp:200] ip2 needs backward computation.
I0428 19:29:03.982904 21910 net.cpp:200] relu1 needs backward computation.
I0428 19:29:03.982908 21910 net.cpp:200] ip1 needs backward computation.
I0428 19:29:03.982911 21910 net.cpp:200] pool0 needs backward computation.
I0428 19:29:03.982914 21910 net.cpp:200] conv0 needs backward computation.
I0428 19:29:03.982918 21910 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:29:03.982923 21910 net.cpp:202] mnist does not need backward computation.
I0428 19:29:03.982925 21910 net.cpp:244] This network produces output accuracy
I0428 19:29:03.982929 21910 net.cpp:244] This network produces output loss
I0428 19:29:03.982940 21910 net.cpp:257] Network initialization done.
I0428 19:29:03.982975 21910 solver.cpp:56] Solver scaffolding done.
I0428 19:29:03.983201 21910 caffe.cpp:248] Starting Optimization
I0428 19:29:03.983208 21910 solver.cpp:273] Solving LeNet
I0428 19:29:03.983212 21910 solver.cpp:274] Learning Rate Policy: inv
I0428 19:29:03.983358 21910 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:29:03.986572 21910 blocking_queue.cpp:49] Waiting for data
I0428 19:29:04.058344 21918 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:04.058754 21910 solver.cpp:398]     Test net output #0: accuracy = 0.1776
I0428 19:29:04.058785 21910 solver.cpp:398]     Test net output #1: loss = 2.2919 (* 1 = 2.2919 loss)
I0428 19:29:04.060202 21910 solver.cpp:219] Iteration 0 (2.95826 iter/s, 0.0769536s/100 iters), loss = 2.28741
I0428 19:29:04.060262 21910 solver.cpp:238]     Train net output #0: loss = 2.28741 (* 1 = 2.28741 loss)
I0428 19:29:04.060274 21910 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:29:04.115952 21910 solver.cpp:219] Iteration 100 (1795.38 iter/s, 0.0556985s/100 iters), loss = 1.12767
I0428 19:29:04.115978 21910 solver.cpp:238]     Train net output #0: loss = 1.12767 (* 1 = 1.12767 loss)
I0428 19:29:04.115984 21910 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:29:04.164063 21910 solver.cpp:219] Iteration 200 (2079.96 iter/s, 0.0480778s/100 iters), loss = 1.40155
I0428 19:29:04.164111 21910 solver.cpp:238]     Train net output #0: loss = 1.40155 (* 1 = 1.40155 loss)
I0428 19:29:04.164119 21910 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:29:04.215983 21910 solver.cpp:219] Iteration 300 (1927.52 iter/s, 0.0518801s/100 iters), loss = 1.11509
I0428 19:29:04.216030 21910 solver.cpp:238]     Train net output #0: loss = 1.11509 (* 1 = 1.11509 loss)
I0428 19:29:04.216037 21910 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:29:04.265137 21910 solver.cpp:219] Iteration 400 (2036.63 iter/s, 0.0491008s/100 iters), loss = 0.755123
I0428 19:29:04.265175 21910 solver.cpp:238]     Train net output #0: loss = 0.755123 (* 1 = 0.755123 loss)
I0428 19:29:04.265182 21910 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:29:04.314684 21910 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:29:04.390238 21918 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:04.390632 21910 solver.cpp:398]     Test net output #0: accuracy = 0.7423
I0428 19:29:04.390650 21910 solver.cpp:398]     Test net output #1: loss = 0.707189 (* 1 = 0.707189 loss)
I0428 19:29:04.391132 21910 solver.cpp:219] Iteration 500 (793.895 iter/s, 0.125961s/100 iters), loss = 0.744012
I0428 19:29:04.391175 21910 solver.cpp:238]     Train net output #0: loss = 0.744012 (* 1 = 0.744012 loss)
I0428 19:29:04.391183 21910 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:29:04.446352 21910 solver.cpp:219] Iteration 600 (1812.52 iter/s, 0.0551717s/100 iters), loss = 0.782873
I0428 19:29:04.446394 21910 solver.cpp:238]     Train net output #0: loss = 0.782873 (* 1 = 0.782873 loss)
I0428 19:29:04.446400 21910 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:29:04.493798 21910 solver.cpp:219] Iteration 700 (2109.07 iter/s, 0.0474143s/100 iters), loss = 0.746074
I0428 19:29:04.493844 21910 solver.cpp:238]     Train net output #0: loss = 0.746074 (* 1 = 0.746074 loss)
I0428 19:29:04.493850 21910 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:29:04.544787 21910 solver.cpp:219] Iteration 800 (1963.32 iter/s, 0.0509341s/100 iters), loss = 0.769903
I0428 19:29:04.544839 21910 solver.cpp:238]     Train net output #0: loss = 0.769903 (* 1 = 0.769903 loss)
I0428 19:29:04.544847 21910 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:29:04.595121 21910 solver.cpp:219] Iteration 900 (1988.97 iter/s, 0.0502772s/100 iters), loss = 0.773329
I0428 19:29:04.595158 21910 solver.cpp:238]     Train net output #0: loss = 0.773329 (* 1 = 0.773329 loss)
I0428 19:29:04.595165 21910 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:29:04.611682 21917 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:04.643844 21910 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:29:04.644418 21910 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:29:04.644841 21910 solver.cpp:311] Iteration 1000, loss = 0.4752
I0428 19:29:04.644858 21910 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:29:04.719413 21918 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:04.719789 21910 solver.cpp:398]     Test net output #0: accuracy = 0.8423
I0428 19:29:04.719812 21910 solver.cpp:398]     Test net output #1: loss = 0.457129 (* 1 = 0.457129 loss)
I0428 19:29:04.719817 21910 solver.cpp:316] Optimization Done.
I0428 19:29:04.719820 21910 caffe.cpp:259] Optimization Done.
