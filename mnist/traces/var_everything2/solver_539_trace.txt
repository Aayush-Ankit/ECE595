I0428 19:48:15.275040 26436 caffe.cpp:218] Using GPUs 0
I0428 19:48:15.316519 26436 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:15.830907 26436 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test539.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:15.831080 26436 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test539.prototxt
I0428 19:48:15.831491 26436 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:15.831516 26436 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:15.831621 26436 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:15.831727 26436 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:15.831861 26436 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:15.831893 26436 net.cpp:86] Creating Layer mnist
I0428 19:48:15.831905 26436 net.cpp:382] mnist -> data
I0428 19:48:15.831935 26436 net.cpp:382] mnist -> label
I0428 19:48:15.833223 26436 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:15.835752 26436 net.cpp:124] Setting up mnist
I0428 19:48:15.835772 26436 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:15.835783 26436 net.cpp:131] Top shape: 64 (64)
I0428 19:48:15.835789 26436 net.cpp:139] Memory required for data: 200960
I0428 19:48:15.835800 26436 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:15.835824 26436 net.cpp:86] Creating Layer conv0
I0428 19:48:15.835849 26436 net.cpp:408] conv0 <- data
I0428 19:48:15.835866 26436 net.cpp:382] conv0 -> conv0
I0428 19:48:16.125438 26436 net.cpp:124] Setting up conv0
I0428 19:48:16.125469 26436 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:16.125476 26436 net.cpp:139] Memory required for data: 938240
I0428 19:48:16.125497 26436 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:16.125517 26436 net.cpp:86] Creating Layer pool0
I0428 19:48:16.125524 26436 net.cpp:408] pool0 <- conv0
I0428 19:48:16.125535 26436 net.cpp:382] pool0 -> pool0
I0428 19:48:16.125604 26436 net.cpp:124] Setting up pool0
I0428 19:48:16.125614 26436 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:16.125619 26436 net.cpp:139] Memory required for data: 1122560
I0428 19:48:16.125625 26436 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:16.125643 26436 net.cpp:86] Creating Layer conv1
I0428 19:48:16.125650 26436 net.cpp:408] conv1 <- pool0
I0428 19:48:16.125660 26436 net.cpp:382] conv1 -> conv1
I0428 19:48:16.127668 26436 net.cpp:124] Setting up conv1
I0428 19:48:16.127686 26436 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:48:16.127692 26436 net.cpp:139] Memory required for data: 1155328
I0428 19:48:16.127707 26436 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:16.127720 26436 net.cpp:86] Creating Layer pool1
I0428 19:48:16.127727 26436 net.cpp:408] pool1 <- conv1
I0428 19:48:16.127737 26436 net.cpp:382] pool1 -> pool1
I0428 19:48:16.127804 26436 net.cpp:124] Setting up pool1
I0428 19:48:16.127813 26436 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:48:16.127820 26436 net.cpp:139] Memory required for data: 1163520
I0428 19:48:16.127825 26436 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:16.127838 26436 net.cpp:86] Creating Layer ip1
I0428 19:48:16.127849 26436 net.cpp:408] ip1 <- pool1
I0428 19:48:16.127859 26436 net.cpp:382] ip1 -> ip1
I0428 19:48:16.128922 26436 net.cpp:124] Setting up ip1
I0428 19:48:16.128938 26436 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:16.128944 26436 net.cpp:139] Memory required for data: 1176320
I0428 19:48:16.128958 26436 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:16.128969 26436 net.cpp:86] Creating Layer relu1
I0428 19:48:16.128985 26436 net.cpp:408] relu1 <- ip1
I0428 19:48:16.128994 26436 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:16.129199 26436 net.cpp:124] Setting up relu1
I0428 19:48:16.129211 26436 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:16.129217 26436 net.cpp:139] Memory required for data: 1189120
I0428 19:48:16.129223 26436 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:16.129235 26436 net.cpp:86] Creating Layer ip2
I0428 19:48:16.129240 26436 net.cpp:408] ip2 <- ip1
I0428 19:48:16.129250 26436 net.cpp:382] ip2 -> ip2
I0428 19:48:16.129366 26436 net.cpp:124] Setting up ip2
I0428 19:48:16.129376 26436 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:16.129381 26436 net.cpp:139] Memory required for data: 1191680
I0428 19:48:16.129393 26436 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:16.129405 26436 net.cpp:86] Creating Layer relu2
I0428 19:48:16.129413 26436 net.cpp:408] relu2 <- ip2
I0428 19:48:16.129421 26436 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:16.130237 26436 net.cpp:124] Setting up relu2
I0428 19:48:16.130252 26436 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:16.130259 26436 net.cpp:139] Memory required for data: 1194240
I0428 19:48:16.130265 26436 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:16.130276 26436 net.cpp:86] Creating Layer ip3
I0428 19:48:16.130283 26436 net.cpp:408] ip3 <- ip2
I0428 19:48:16.130293 26436 net.cpp:382] ip3 -> ip3
I0428 19:48:16.130414 26436 net.cpp:124] Setting up ip3
I0428 19:48:16.130424 26436 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:16.130429 26436 net.cpp:139] Memory required for data: 1196800
I0428 19:48:16.130444 26436 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:16.130453 26436 net.cpp:86] Creating Layer relu3
I0428 19:48:16.130460 26436 net.cpp:408] relu3 <- ip3
I0428 19:48:16.130468 26436 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:16.130662 26436 net.cpp:124] Setting up relu3
I0428 19:48:16.130673 26436 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:16.130679 26436 net.cpp:139] Memory required for data: 1199360
I0428 19:48:16.130686 26436 layer_factory.hpp:77] Creating layer loss
I0428 19:48:16.130699 26436 net.cpp:86] Creating Layer loss
I0428 19:48:16.130705 26436 net.cpp:408] loss <- ip3
I0428 19:48:16.130712 26436 net.cpp:408] loss <- label
I0428 19:48:16.130722 26436 net.cpp:382] loss -> loss
I0428 19:48:16.130743 26436 layer_factory.hpp:77] Creating layer loss
I0428 19:48:16.131002 26436 net.cpp:124] Setting up loss
I0428 19:48:16.131014 26436 net.cpp:131] Top shape: (1)
I0428 19:48:16.131021 26436 net.cpp:134]     with loss weight 1
I0428 19:48:16.131042 26436 net.cpp:139] Memory required for data: 1199364
I0428 19:48:16.131048 26436 net.cpp:200] loss needs backward computation.
I0428 19:48:16.131054 26436 net.cpp:200] relu3 needs backward computation.
I0428 19:48:16.131060 26436 net.cpp:200] ip3 needs backward computation.
I0428 19:48:16.131067 26436 net.cpp:200] relu2 needs backward computation.
I0428 19:48:16.131072 26436 net.cpp:200] ip2 needs backward computation.
I0428 19:48:16.131078 26436 net.cpp:200] relu1 needs backward computation.
I0428 19:48:16.131083 26436 net.cpp:200] ip1 needs backward computation.
I0428 19:48:16.131088 26436 net.cpp:200] pool1 needs backward computation.
I0428 19:48:16.131094 26436 net.cpp:200] conv1 needs backward computation.
I0428 19:48:16.131100 26436 net.cpp:200] pool0 needs backward computation.
I0428 19:48:16.131106 26436 net.cpp:200] conv0 needs backward computation.
I0428 19:48:16.131114 26436 net.cpp:202] mnist does not need backward computation.
I0428 19:48:16.131119 26436 net.cpp:244] This network produces output loss
I0428 19:48:16.131134 26436 net.cpp:257] Network initialization done.
I0428 19:48:16.131501 26436 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test539.prototxt
I0428 19:48:16.131539 26436 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:16.131647 26436 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:16.131772 26436 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:16.131835 26436 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:16.131861 26436 net.cpp:86] Creating Layer mnist
I0428 19:48:16.131870 26436 net.cpp:382] mnist -> data
I0428 19:48:16.131882 26436 net.cpp:382] mnist -> label
I0428 19:48:16.132014 26436 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:16.134265 26436 net.cpp:124] Setting up mnist
I0428 19:48:16.134281 26436 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:16.134290 26436 net.cpp:131] Top shape: 100 (100)
I0428 19:48:16.134296 26436 net.cpp:139] Memory required for data: 314000
I0428 19:48:16.134302 26436 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:16.134313 26436 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:16.134320 26436 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:16.134327 26436 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:16.134340 26436 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:16.134420 26436 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:16.134429 26436 net.cpp:131] Top shape: 100 (100)
I0428 19:48:16.134436 26436 net.cpp:131] Top shape: 100 (100)
I0428 19:48:16.134441 26436 net.cpp:139] Memory required for data: 314800
I0428 19:48:16.134448 26436 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:16.134461 26436 net.cpp:86] Creating Layer conv0
I0428 19:48:16.134469 26436 net.cpp:408] conv0 <- data
I0428 19:48:16.134479 26436 net.cpp:382] conv0 -> conv0
I0428 19:48:16.135975 26436 net.cpp:124] Setting up conv0
I0428 19:48:16.135993 26436 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:16.135999 26436 net.cpp:139] Memory required for data: 1466800
I0428 19:48:16.136014 26436 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:16.136024 26436 net.cpp:86] Creating Layer pool0
I0428 19:48:16.136032 26436 net.cpp:408] pool0 <- conv0
I0428 19:48:16.136041 26436 net.cpp:382] pool0 -> pool0
I0428 19:48:16.136090 26436 net.cpp:124] Setting up pool0
I0428 19:48:16.136098 26436 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:16.136104 26436 net.cpp:139] Memory required for data: 1754800
I0428 19:48:16.136111 26436 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:16.136123 26436 net.cpp:86] Creating Layer conv1
I0428 19:48:16.136131 26436 net.cpp:408] conv1 <- pool0
I0428 19:48:16.136140 26436 net.cpp:382] conv1 -> conv1
I0428 19:48:16.138257 26436 net.cpp:124] Setting up conv1
I0428 19:48:16.138273 26436 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:48:16.138279 26436 net.cpp:139] Memory required for data: 1806000
I0428 19:48:16.138293 26436 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:16.138303 26436 net.cpp:86] Creating Layer pool1
I0428 19:48:16.138309 26436 net.cpp:408] pool1 <- conv1
I0428 19:48:16.138319 26436 net.cpp:382] pool1 -> pool1
I0428 19:48:16.138388 26436 net.cpp:124] Setting up pool1
I0428 19:48:16.138398 26436 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:48:16.138404 26436 net.cpp:139] Memory required for data: 1818800
I0428 19:48:16.138409 26436 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:16.138419 26436 net.cpp:86] Creating Layer ip1
I0428 19:48:16.138427 26436 net.cpp:408] ip1 <- pool1
I0428 19:48:16.138434 26436 net.cpp:382] ip1 -> ip1
I0428 19:48:16.138557 26436 net.cpp:124] Setting up ip1
I0428 19:48:16.138568 26436 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:16.138587 26436 net.cpp:139] Memory required for data: 1838800
I0428 19:48:16.138602 26436 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:16.138610 26436 net.cpp:86] Creating Layer relu1
I0428 19:48:16.138617 26436 net.cpp:408] relu1 <- ip1
I0428 19:48:16.138629 26436 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:16.138811 26436 net.cpp:124] Setting up relu1
I0428 19:48:16.138823 26436 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:16.138831 26436 net.cpp:139] Memory required for data: 1858800
I0428 19:48:16.138836 26436 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:16.138849 26436 net.cpp:86] Creating Layer ip2
I0428 19:48:16.138855 26436 net.cpp:408] ip2 <- ip1
I0428 19:48:16.138865 26436 net.cpp:382] ip2 -> ip2
I0428 19:48:16.138981 26436 net.cpp:124] Setting up ip2
I0428 19:48:16.138990 26436 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:16.138996 26436 net.cpp:139] Memory required for data: 1862800
I0428 19:48:16.139005 26436 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:16.139017 26436 net.cpp:86] Creating Layer relu2
I0428 19:48:16.139025 26436 net.cpp:408] relu2 <- ip2
I0428 19:48:16.139034 26436 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:16.139250 26436 net.cpp:124] Setting up relu2
I0428 19:48:16.139261 26436 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:16.139267 26436 net.cpp:139] Memory required for data: 1866800
I0428 19:48:16.139272 26436 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:16.139281 26436 net.cpp:86] Creating Layer ip3
I0428 19:48:16.139287 26436 net.cpp:408] ip3 <- ip2
I0428 19:48:16.139297 26436 net.cpp:382] ip3 -> ip3
I0428 19:48:16.139405 26436 net.cpp:124] Setting up ip3
I0428 19:48:16.139415 26436 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:16.139420 26436 net.cpp:139] Memory required for data: 1870800
I0428 19:48:16.139433 26436 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:16.139441 26436 net.cpp:86] Creating Layer relu3
I0428 19:48:16.139449 26436 net.cpp:408] relu3 <- ip3
I0428 19:48:16.139457 26436 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:16.140295 26436 net.cpp:124] Setting up relu3
I0428 19:48:16.140310 26436 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:16.140316 26436 net.cpp:139] Memory required for data: 1874800
I0428 19:48:16.140321 26436 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:48:16.140329 26436 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:48:16.140336 26436 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:48:16.140346 26436 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:48:16.140357 26436 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:48:16.140408 26436 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:48:16.140417 26436 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:16.140424 26436 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:16.140429 26436 net.cpp:139] Memory required for data: 1882800
I0428 19:48:16.140434 26436 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:16.140444 26436 net.cpp:86] Creating Layer accuracy
I0428 19:48:16.140450 26436 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:48:16.140457 26436 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:16.140466 26436 net.cpp:382] accuracy -> accuracy
I0428 19:48:16.140478 26436 net.cpp:124] Setting up accuracy
I0428 19:48:16.140487 26436 net.cpp:131] Top shape: (1)
I0428 19:48:16.140492 26436 net.cpp:139] Memory required for data: 1882804
I0428 19:48:16.140498 26436 layer_factory.hpp:77] Creating layer loss
I0428 19:48:16.140506 26436 net.cpp:86] Creating Layer loss
I0428 19:48:16.140511 26436 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:48:16.140518 26436 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:16.140525 26436 net.cpp:382] loss -> loss
I0428 19:48:16.140535 26436 layer_factory.hpp:77] Creating layer loss
I0428 19:48:16.140815 26436 net.cpp:124] Setting up loss
I0428 19:48:16.140838 26436 net.cpp:131] Top shape: (1)
I0428 19:48:16.140843 26436 net.cpp:134]     with loss weight 1
I0428 19:48:16.140853 26436 net.cpp:139] Memory required for data: 1882808
I0428 19:48:16.140871 26436 net.cpp:200] loss needs backward computation.
I0428 19:48:16.140877 26436 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:16.140884 26436 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:48:16.140889 26436 net.cpp:200] relu3 needs backward computation.
I0428 19:48:16.140894 26436 net.cpp:200] ip3 needs backward computation.
I0428 19:48:16.140902 26436 net.cpp:200] relu2 needs backward computation.
I0428 19:48:16.140907 26436 net.cpp:200] ip2 needs backward computation.
I0428 19:48:16.140911 26436 net.cpp:200] relu1 needs backward computation.
I0428 19:48:16.140916 26436 net.cpp:200] ip1 needs backward computation.
I0428 19:48:16.140923 26436 net.cpp:200] pool1 needs backward computation.
I0428 19:48:16.140928 26436 net.cpp:200] conv1 needs backward computation.
I0428 19:48:16.140933 26436 net.cpp:200] pool0 needs backward computation.
I0428 19:48:16.140938 26436 net.cpp:200] conv0 needs backward computation.
I0428 19:48:16.140944 26436 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:16.140950 26436 net.cpp:202] mnist does not need backward computation.
I0428 19:48:16.140955 26436 net.cpp:244] This network produces output accuracy
I0428 19:48:16.140961 26436 net.cpp:244] This network produces output loss
I0428 19:48:16.140980 26436 net.cpp:257] Network initialization done.
I0428 19:48:16.141031 26436 solver.cpp:56] Solver scaffolding done.
I0428 19:48:16.141392 26436 caffe.cpp:248] Starting Optimization
I0428 19:48:16.141400 26436 solver.cpp:273] Solving LeNet
I0428 19:48:16.141404 26436 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:16.142197 26436 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:16.146172 26436 blocking_queue.cpp:49] Waiting for data
I0428 19:48:16.219146 26443 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:16.219647 26436 solver.cpp:398]     Test net output #0: accuracy = 0.1057
I0428 19:48:16.219666 26436 solver.cpp:398]     Test net output #1: loss = 2.305 (* 1 = 2.305 loss)
I0428 19:48:16.221426 26436 solver.cpp:219] Iteration 0 (-1.01594e-42 iter/s, 0.0799816s/100 iters), loss = 2.29864
I0428 19:48:16.221467 26436 solver.cpp:238]     Train net output #0: loss = 2.29864 (* 1 = 2.29864 loss)
I0428 19:48:16.221484 26436 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:16.315681 26436 solver.cpp:219] Iteration 100 (1061.68 iter/s, 0.0941906s/100 iters), loss = 1.15804
I0428 19:48:16.315726 26436 solver.cpp:238]     Train net output #0: loss = 1.15804 (* 1 = 1.15804 loss)
I0428 19:48:16.315737 26436 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:16.399551 26436 solver.cpp:219] Iteration 200 (1193.07 iter/s, 0.0838175s/100 iters), loss = 0.443018
I0428 19:48:16.399581 26436 solver.cpp:238]     Train net output #0: loss = 0.443018 (* 1 = 0.443018 loss)
I0428 19:48:16.399601 26436 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:16.474464 26436 solver.cpp:219] Iteration 300 (1335.56 iter/s, 0.0748749s/100 iters), loss = 0.337976
I0428 19:48:16.474493 26436 solver.cpp:238]     Train net output #0: loss = 0.337976 (* 1 = 0.337976 loss)
I0428 19:48:16.474501 26436 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:16.548521 26436 solver.cpp:219] Iteration 400 (1351.03 iter/s, 0.0740178s/100 iters), loss = 0.294127
I0428 19:48:16.548550 26436 solver.cpp:238]     Train net output #0: loss = 0.294127 (* 1 = 0.294127 loss)
I0428 19:48:16.548557 26436 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:16.621626 26436 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:16.696774 26443 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:16.697306 26436 solver.cpp:398]     Test net output #0: accuracy = 0.92
I0428 19:48:16.697330 26436 solver.cpp:398]     Test net output #1: loss = 0.264039 (* 1 = 0.264039 loss)
I0428 19:48:16.698161 26436 solver.cpp:219] Iteration 500 (668.452 iter/s, 0.149599s/100 iters), loss = 0.144953
I0428 19:48:16.698189 26436 solver.cpp:238]     Train net output #0: loss = 0.144953 (* 1 = 0.144953 loss)
I0428 19:48:16.698215 26436 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:16.775341 26436 solver.cpp:219] Iteration 600 (1296.31 iter/s, 0.077142s/100 iters), loss = 0.273913
I0428 19:48:16.775370 26436 solver.cpp:238]     Train net output #0: loss = 0.273913 (* 1 = 0.273913 loss)
I0428 19:48:16.775378 26436 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:16.849728 26436 solver.cpp:219] Iteration 700 (1345.02 iter/s, 0.0743485s/100 iters), loss = 0.426426
I0428 19:48:16.849758 26436 solver.cpp:238]     Train net output #0: loss = 0.426426 (* 1 = 0.426426 loss)
I0428 19:48:16.849766 26436 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:16.923707 26436 solver.cpp:219] Iteration 800 (1352.49 iter/s, 0.0739379s/100 iters), loss = 0.36423
I0428 19:48:16.923737 26436 solver.cpp:238]     Train net output #0: loss = 0.36423 (* 1 = 0.36423 loss)
I0428 19:48:16.923743 26436 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:16.997603 26436 solver.cpp:219] Iteration 900 (1353.96 iter/s, 0.0738572s/100 iters), loss = 0.348406
I0428 19:48:16.997632 26436 solver.cpp:238]     Train net output #0: loss = 0.348406 (* 1 = 0.348406 loss)
I0428 19:48:16.997640 26436 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:17.022383 26442 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:17.071138 26436 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:17.071825 26436 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:17.072273 26436 solver.cpp:311] Iteration 1000, loss = 0.239409
I0428 19:48:17.072289 26436 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:17.145908 26443 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:17.146423 26436 solver.cpp:398]     Test net output #0: accuracy = 0.9306
I0428 19:48:17.146458 26436 solver.cpp:398]     Test net output #1: loss = 0.215126 (* 1 = 0.215126 loss)
I0428 19:48:17.146463 26436 solver.cpp:316] Optimization Done.
I0428 19:48:17.146466 26436 caffe.cpp:259] Optimization Done.
