I0428 20:10:15.523905 31800 caffe.cpp:218] Using GPUs 0
I0428 20:10:15.557566 31800 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:10:16.079393 31800 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1130.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:10:16.079532 31800 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1130.prototxt
I0428 20:10:16.079952 31800 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:10:16.079972 31800 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:10:16.080073 31800 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:10:16.080153 31800 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:16.080251 31800 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:10:16.080276 31800 net.cpp:86] Creating Layer mnist
I0428 20:10:16.080287 31800 net.cpp:382] mnist -> data
I0428 20:10:16.080312 31800 net.cpp:382] mnist -> label
I0428 20:10:16.081428 31800 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:10:16.083904 31800 net.cpp:124] Setting up mnist
I0428 20:10:16.083920 31800 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:10:16.083926 31800 net.cpp:131] Top shape: 64 (64)
I0428 20:10:16.083930 31800 net.cpp:139] Memory required for data: 200960
I0428 20:10:16.083937 31800 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:16.083955 31800 net.cpp:86] Creating Layer conv0
I0428 20:10:16.083976 31800 net.cpp:408] conv0 <- data
I0428 20:10:16.083991 31800 net.cpp:382] conv0 -> conv0
I0428 20:10:16.374028 31800 net.cpp:124] Setting up conv0
I0428 20:10:16.374060 31800 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:10:16.374065 31800 net.cpp:139] Memory required for data: 3887360
I0428 20:10:16.374083 31800 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:16.374099 31800 net.cpp:86] Creating Layer pool0
I0428 20:10:16.374104 31800 net.cpp:408] pool0 <- conv0
I0428 20:10:16.374110 31800 net.cpp:382] pool0 -> pool0
I0428 20:10:16.374163 31800 net.cpp:124] Setting up pool0
I0428 20:10:16.374171 31800 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:10:16.374176 31800 net.cpp:139] Memory required for data: 4808960
I0428 20:10:16.374179 31800 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:16.374191 31800 net.cpp:86] Creating Layer conv1
I0428 20:10:16.374198 31800 net.cpp:408] conv1 <- pool0
I0428 20:10:16.374204 31800 net.cpp:382] conv1 -> conv1
I0428 20:10:16.377447 31800 net.cpp:124] Setting up conv1
I0428 20:10:16.377465 31800 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:10:16.377470 31800 net.cpp:139] Memory required for data: 5218560
I0428 20:10:16.377480 31800 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:16.377496 31800 net.cpp:86] Creating Layer pool1
I0428 20:10:16.377501 31800 net.cpp:408] pool1 <- conv1
I0428 20:10:16.377506 31800 net.cpp:382] pool1 -> pool1
I0428 20:10:16.377552 31800 net.cpp:124] Setting up pool1
I0428 20:10:16.377560 31800 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:10:16.377564 31800 net.cpp:139] Memory required for data: 5320960
I0428 20:10:16.377568 31800 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:16.377576 31800 net.cpp:86] Creating Layer ip1
I0428 20:10:16.377580 31800 net.cpp:408] ip1 <- pool1
I0428 20:10:16.377585 31800 net.cpp:382] ip1 -> ip1
I0428 20:10:16.377835 31800 net.cpp:124] Setting up ip1
I0428 20:10:16.377842 31800 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:10:16.377846 31800 net.cpp:139] Memory required for data: 5333760
I0428 20:10:16.377854 31800 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:16.377861 31800 net.cpp:86] Creating Layer relu1
I0428 20:10:16.377866 31800 net.cpp:408] relu1 <- ip1
I0428 20:10:16.377871 31800 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:16.378072 31800 net.cpp:124] Setting up relu1
I0428 20:10:16.378082 31800 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:10:16.378087 31800 net.cpp:139] Memory required for data: 5346560
I0428 20:10:16.378090 31800 layer_factory.hpp:77] Creating layer ip2
I0428 20:10:16.378098 31800 net.cpp:86] Creating Layer ip2
I0428 20:10:16.378101 31800 net.cpp:408] ip2 <- ip1
I0428 20:10:16.378108 31800 net.cpp:382] ip2 -> ip2
I0428 20:10:16.379225 31800 net.cpp:124] Setting up ip2
I0428 20:10:16.379240 31800 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:10:16.379245 31800 net.cpp:139] Memory required for data: 5359360
I0428 20:10:16.379251 31800 layer_factory.hpp:77] Creating layer relu2
I0428 20:10:16.379259 31800 net.cpp:86] Creating Layer relu2
I0428 20:10:16.379263 31800 net.cpp:408] relu2 <- ip2
I0428 20:10:16.379269 31800 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:10:16.380121 31800 net.cpp:124] Setting up relu2
I0428 20:10:16.380137 31800 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:10:16.380141 31800 net.cpp:139] Memory required for data: 5372160
I0428 20:10:16.380146 31800 layer_factory.hpp:77] Creating layer ip3
I0428 20:10:16.380154 31800 net.cpp:86] Creating Layer ip3
I0428 20:10:16.380158 31800 net.cpp:408] ip3 <- ip2
I0428 20:10:16.380164 31800 net.cpp:382] ip3 -> ip3
I0428 20:10:16.380286 31800 net.cpp:124] Setting up ip3
I0428 20:10:16.380296 31800 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:16.380300 31800 net.cpp:139] Memory required for data: 5374720
I0428 20:10:16.380309 31800 layer_factory.hpp:77] Creating layer relu3
I0428 20:10:16.380317 31800 net.cpp:86] Creating Layer relu3
I0428 20:10:16.380321 31800 net.cpp:408] relu3 <- ip3
I0428 20:10:16.380326 31800 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:10:16.380524 31800 net.cpp:124] Setting up relu3
I0428 20:10:16.380534 31800 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:16.380538 31800 net.cpp:139] Memory required for data: 5377280
I0428 20:10:16.380542 31800 layer_factory.hpp:77] Creating layer loss
I0428 20:10:16.380550 31800 net.cpp:86] Creating Layer loss
I0428 20:10:16.380553 31800 net.cpp:408] loss <- ip3
I0428 20:10:16.380558 31800 net.cpp:408] loss <- label
I0428 20:10:16.380565 31800 net.cpp:382] loss -> loss
I0428 20:10:16.380583 31800 layer_factory.hpp:77] Creating layer loss
I0428 20:10:16.380870 31800 net.cpp:124] Setting up loss
I0428 20:10:16.380882 31800 net.cpp:131] Top shape: (1)
I0428 20:10:16.380885 31800 net.cpp:134]     with loss weight 1
I0428 20:10:16.380903 31800 net.cpp:139] Memory required for data: 5377284
I0428 20:10:16.380908 31800 net.cpp:200] loss needs backward computation.
I0428 20:10:16.380911 31800 net.cpp:200] relu3 needs backward computation.
I0428 20:10:16.380915 31800 net.cpp:200] ip3 needs backward computation.
I0428 20:10:16.380918 31800 net.cpp:200] relu2 needs backward computation.
I0428 20:10:16.380923 31800 net.cpp:200] ip2 needs backward computation.
I0428 20:10:16.380925 31800 net.cpp:200] relu1 needs backward computation.
I0428 20:10:16.380929 31800 net.cpp:200] ip1 needs backward computation.
I0428 20:10:16.380933 31800 net.cpp:200] pool1 needs backward computation.
I0428 20:10:16.380936 31800 net.cpp:200] conv1 needs backward computation.
I0428 20:10:16.380940 31800 net.cpp:200] pool0 needs backward computation.
I0428 20:10:16.380944 31800 net.cpp:200] conv0 needs backward computation.
I0428 20:10:16.380949 31800 net.cpp:202] mnist does not need backward computation.
I0428 20:10:16.380951 31800 net.cpp:244] This network produces output loss
I0428 20:10:16.380962 31800 net.cpp:257] Network initialization done.
I0428 20:10:16.381346 31800 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1130.prototxt
I0428 20:10:16.381378 31800 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:10:16.381485 31800 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:10:16.381580 31800 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:16.381634 31800 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:10:16.381649 31800 net.cpp:86] Creating Layer mnist
I0428 20:10:16.381654 31800 net.cpp:382] mnist -> data
I0428 20:10:16.381664 31800 net.cpp:382] mnist -> label
I0428 20:10:16.381767 31800 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:10:16.384201 31800 net.cpp:124] Setting up mnist
I0428 20:10:16.384217 31800 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:10:16.384222 31800 net.cpp:131] Top shape: 100 (100)
I0428 20:10:16.384227 31800 net.cpp:139] Memory required for data: 314000
I0428 20:10:16.384230 31800 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:10:16.384238 31800 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:10:16.384243 31800 net.cpp:408] label_mnist_1_split <- label
I0428 20:10:16.384270 31800 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:10:16.384279 31800 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:10:16.384338 31800 net.cpp:124] Setting up label_mnist_1_split
I0428 20:10:16.384346 31800 net.cpp:131] Top shape: 100 (100)
I0428 20:10:16.384351 31800 net.cpp:131] Top shape: 100 (100)
I0428 20:10:16.384354 31800 net.cpp:139] Memory required for data: 314800
I0428 20:10:16.384358 31800 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:16.384369 31800 net.cpp:86] Creating Layer conv0
I0428 20:10:16.384374 31800 net.cpp:408] conv0 <- data
I0428 20:10:16.384382 31800 net.cpp:382] conv0 -> conv0
I0428 20:10:16.386371 31800 net.cpp:124] Setting up conv0
I0428 20:10:16.386389 31800 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:10:16.386392 31800 net.cpp:139] Memory required for data: 6074800
I0428 20:10:16.386404 31800 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:16.386412 31800 net.cpp:86] Creating Layer pool0
I0428 20:10:16.386416 31800 net.cpp:408] pool0 <- conv0
I0428 20:10:16.386421 31800 net.cpp:382] pool0 -> pool0
I0428 20:10:16.386467 31800 net.cpp:124] Setting up pool0
I0428 20:10:16.386476 31800 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:10:16.386479 31800 net.cpp:139] Memory required for data: 7514800
I0428 20:10:16.386482 31800 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:16.386493 31800 net.cpp:86] Creating Layer conv1
I0428 20:10:16.386498 31800 net.cpp:408] conv1 <- pool0
I0428 20:10:16.386505 31800 net.cpp:382] conv1 -> conv1
I0428 20:10:16.388978 31800 net.cpp:124] Setting up conv1
I0428 20:10:16.388994 31800 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:10:16.389000 31800 net.cpp:139] Memory required for data: 8154800
I0428 20:10:16.389010 31800 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:16.389022 31800 net.cpp:86] Creating Layer pool1
I0428 20:10:16.389026 31800 net.cpp:408] pool1 <- conv1
I0428 20:10:16.389032 31800 net.cpp:382] pool1 -> pool1
I0428 20:10:16.389104 31800 net.cpp:124] Setting up pool1
I0428 20:10:16.389114 31800 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:10:16.389117 31800 net.cpp:139] Memory required for data: 8314800
I0428 20:10:16.389122 31800 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:16.389144 31800 net.cpp:86] Creating Layer ip1
I0428 20:10:16.389150 31800 net.cpp:408] ip1 <- pool1
I0428 20:10:16.389156 31800 net.cpp:382] ip1 -> ip1
I0428 20:10:16.389425 31800 net.cpp:124] Setting up ip1
I0428 20:10:16.389434 31800 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:10:16.389451 31800 net.cpp:139] Memory required for data: 8334800
I0428 20:10:16.389461 31800 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:16.389467 31800 net.cpp:86] Creating Layer relu1
I0428 20:10:16.389472 31800 net.cpp:408] relu1 <- ip1
I0428 20:10:16.389477 31800 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:16.389691 31800 net.cpp:124] Setting up relu1
I0428 20:10:16.389703 31800 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:10:16.389709 31800 net.cpp:139] Memory required for data: 8354800
I0428 20:10:16.389720 31800 layer_factory.hpp:77] Creating layer ip2
I0428 20:10:16.389729 31800 net.cpp:86] Creating Layer ip2
I0428 20:10:16.389734 31800 net.cpp:408] ip2 <- ip1
I0428 20:10:16.389741 31800 net.cpp:382] ip2 -> ip2
I0428 20:10:16.389894 31800 net.cpp:124] Setting up ip2
I0428 20:10:16.389905 31800 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:10:16.389909 31800 net.cpp:139] Memory required for data: 8374800
I0428 20:10:16.389916 31800 layer_factory.hpp:77] Creating layer relu2
I0428 20:10:16.389925 31800 net.cpp:86] Creating Layer relu2
I0428 20:10:16.389930 31800 net.cpp:408] relu2 <- ip2
I0428 20:10:16.389935 31800 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:10:16.390189 31800 net.cpp:124] Setting up relu2
I0428 20:10:16.390202 31800 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:10:16.390205 31800 net.cpp:139] Memory required for data: 8394800
I0428 20:10:16.390209 31800 layer_factory.hpp:77] Creating layer ip3
I0428 20:10:16.390218 31800 net.cpp:86] Creating Layer ip3
I0428 20:10:16.390223 31800 net.cpp:408] ip3 <- ip2
I0428 20:10:16.390229 31800 net.cpp:382] ip3 -> ip3
I0428 20:10:16.390382 31800 net.cpp:124] Setting up ip3
I0428 20:10:16.390390 31800 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:16.390394 31800 net.cpp:139] Memory required for data: 8398800
I0428 20:10:16.390403 31800 layer_factory.hpp:77] Creating layer relu3
I0428 20:10:16.390410 31800 net.cpp:86] Creating Layer relu3
I0428 20:10:16.390420 31800 net.cpp:408] relu3 <- ip3
I0428 20:10:16.390429 31800 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:10:16.391505 31800 net.cpp:124] Setting up relu3
I0428 20:10:16.391521 31800 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:16.391531 31800 net.cpp:139] Memory required for data: 8402800
I0428 20:10:16.391535 31800 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:10:16.391541 31800 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:10:16.391546 31800 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:10:16.391553 31800 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:10:16.391562 31800 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:10:16.391613 31800 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:10:16.391623 31800 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:16.391628 31800 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:16.391631 31800 net.cpp:139] Memory required for data: 8410800
I0428 20:10:16.391635 31800 layer_factory.hpp:77] Creating layer accuracy
I0428 20:10:16.391641 31800 net.cpp:86] Creating Layer accuracy
I0428 20:10:16.391645 31800 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:10:16.391650 31800 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:10:16.391656 31800 net.cpp:382] accuracy -> accuracy
I0428 20:10:16.391664 31800 net.cpp:124] Setting up accuracy
I0428 20:10:16.391670 31800 net.cpp:131] Top shape: (1)
I0428 20:10:16.391674 31800 net.cpp:139] Memory required for data: 8410804
I0428 20:10:16.391685 31800 layer_factory.hpp:77] Creating layer loss
I0428 20:10:16.391701 31800 net.cpp:86] Creating Layer loss
I0428 20:10:16.391705 31800 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:10:16.391710 31800 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:10:16.391721 31800 net.cpp:382] loss -> loss
I0428 20:10:16.391728 31800 layer_factory.hpp:77] Creating layer loss
I0428 20:10:16.392031 31800 net.cpp:124] Setting up loss
I0428 20:10:16.392041 31800 net.cpp:131] Top shape: (1)
I0428 20:10:16.392047 31800 net.cpp:134]     with loss weight 1
I0428 20:10:16.392068 31800 net.cpp:139] Memory required for data: 8410808
I0428 20:10:16.392072 31800 net.cpp:200] loss needs backward computation.
I0428 20:10:16.392084 31800 net.cpp:202] accuracy does not need backward computation.
I0428 20:10:16.392089 31800 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:10:16.392093 31800 net.cpp:200] relu3 needs backward computation.
I0428 20:10:16.392097 31800 net.cpp:200] ip3 needs backward computation.
I0428 20:10:16.392101 31800 net.cpp:200] relu2 needs backward computation.
I0428 20:10:16.392104 31800 net.cpp:200] ip2 needs backward computation.
I0428 20:10:16.392107 31800 net.cpp:200] relu1 needs backward computation.
I0428 20:10:16.392112 31800 net.cpp:200] ip1 needs backward computation.
I0428 20:10:16.392115 31800 net.cpp:200] pool1 needs backward computation.
I0428 20:10:16.392119 31800 net.cpp:200] conv1 needs backward computation.
I0428 20:10:16.392123 31800 net.cpp:200] pool0 needs backward computation.
I0428 20:10:16.392127 31800 net.cpp:200] conv0 needs backward computation.
I0428 20:10:16.392133 31800 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:10:16.392138 31800 net.cpp:202] mnist does not need backward computation.
I0428 20:10:16.392143 31800 net.cpp:244] This network produces output accuracy
I0428 20:10:16.392146 31800 net.cpp:244] This network produces output loss
I0428 20:10:16.392160 31800 net.cpp:257] Network initialization done.
I0428 20:10:16.392217 31800 solver.cpp:56] Solver scaffolding done.
I0428 20:10:16.392657 31800 caffe.cpp:248] Starting Optimization
I0428 20:10:16.392664 31800 solver.cpp:273] Solving LeNet
I0428 20:10:16.392668 31800 solver.cpp:274] Learning Rate Policy: inv
I0428 20:10:16.393626 31800 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:10:16.399878 31800 blocking_queue.cpp:49] Waiting for data
I0428 20:10:16.469249 31807 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:16.469909 31800 solver.cpp:398]     Test net output #0: accuracy = 0.0813
I0428 20:10:16.469935 31800 solver.cpp:398]     Test net output #1: loss = 2.32508 (* 1 = 2.32508 loss)
I0428 20:10:16.474031 31800 solver.cpp:219] Iteration 0 (0 iter/s, 0.0813281s/100 iters), loss = 2.32401
I0428 20:10:16.474062 31800 solver.cpp:238]     Train net output #0: loss = 2.32401 (* 1 = 2.32401 loss)
I0428 20:10:16.474078 31800 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:10:16.580411 31800 solver.cpp:219] Iteration 100 (940.423 iter/s, 0.106335s/100 iters), loss = 0.802062
I0428 20:10:16.580446 31800 solver.cpp:238]     Train net output #0: loss = 0.802062 (* 1 = 0.802062 loss)
I0428 20:10:16.580453 31800 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:10:16.688793 31800 solver.cpp:219] Iteration 200 (923.037 iter/s, 0.108338s/100 iters), loss = 0.290836
I0428 20:10:16.688834 31800 solver.cpp:238]     Train net output #0: loss = 0.290836 (* 1 = 0.290836 loss)
I0428 20:10:16.688843 31800 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:10:16.792600 31800 solver.cpp:219] Iteration 300 (963.783 iter/s, 0.103758s/100 iters), loss = 0.424061
I0428 20:10:16.792625 31800 solver.cpp:238]     Train net output #0: loss = 0.424061 (* 1 = 0.424061 loss)
I0428 20:10:16.792632 31800 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:10:16.902853 31800 solver.cpp:219] Iteration 400 (907.299 iter/s, 0.110217s/100 iters), loss = 0.165618
I0428 20:10:16.902880 31800 solver.cpp:238]     Train net output #0: loss = 0.165618 (* 1 = 0.165618 loss)
I0428 20:10:16.902887 31800 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:10:17.004519 31800 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:10:17.080056 31807 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:17.080714 31800 solver.cpp:398]     Test net output #0: accuracy = 0.9642
I0428 20:10:17.080754 31800 solver.cpp:398]     Test net output #1: loss = 0.113121 (* 1 = 0.113121 loss)
I0428 20:10:17.081773 31800 solver.cpp:219] Iteration 500 (559.042 iter/s, 0.178877s/100 iters), loss = 0.0609809
I0428 20:10:17.081835 31800 solver.cpp:238]     Train net output #0: loss = 0.0609809 (* 1 = 0.0609809 loss)
I0428 20:10:17.081845 31800 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:10:17.189559 31800 solver.cpp:219] Iteration 600 (928.348 iter/s, 0.107718s/100 iters), loss = 0.0802939
I0428 20:10:17.189602 31800 solver.cpp:238]     Train net output #0: loss = 0.0802939 (* 1 = 0.0802939 loss)
I0428 20:10:17.189610 31800 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:10:17.294265 31800 solver.cpp:219] Iteration 700 (955.569 iter/s, 0.10465s/100 iters), loss = 0.178322
I0428 20:10:17.294311 31800 solver.cpp:238]     Train net output #0: loss = 0.178322 (* 1 = 0.178322 loss)
I0428 20:10:17.294322 31800 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:10:17.403863 31800 solver.cpp:219] Iteration 800 (912.871 iter/s, 0.109544s/100 iters), loss = 0.30426
I0428 20:10:17.403892 31800 solver.cpp:238]     Train net output #0: loss = 0.30426 (* 1 = 0.30426 loss)
I0428 20:10:17.403900 31800 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:10:17.510926 31800 solver.cpp:219] Iteration 900 (934.375 iter/s, 0.107023s/100 iters), loss = 0.179584
I0428 20:10:17.510951 31800 solver.cpp:238]     Train net output #0: loss = 0.179584 (* 1 = 0.179584 loss)
I0428 20:10:17.510972 31800 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:10:17.545892 31806 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:17.611990 31800 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:10:17.613438 31800 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:10:17.614256 31800 solver.cpp:311] Iteration 1000, loss = 0.0828735
I0428 20:10:17.614274 31800 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:10:17.689239 31807 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:17.689857 31800 solver.cpp:398]     Test net output #0: accuracy = 0.9769
I0428 20:10:17.689877 31800 solver.cpp:398]     Test net output #1: loss = 0.0695199 (* 1 = 0.0695199 loss)
I0428 20:10:17.689882 31800 solver.cpp:316] Optimization Done.
I0428 20:10:17.689887 31800 caffe.cpp:259] Optimization Done.
