I0428 19:44:44.337247 25667 caffe.cpp:218] Using GPUs 0
I0428 19:44:44.377061 25667 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:44.897482 25667 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test455.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:44.897656 25667 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test455.prototxt
I0428 19:44:44.898085 25667 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:44.898113 25667 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:44.898226 25667 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:44.898342 25667 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:44.898474 25667 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:44.898510 25667 net.cpp:86] Creating Layer mnist
I0428 19:44:44.898522 25667 net.cpp:382] mnist -> data
I0428 19:44:44.898553 25667 net.cpp:382] mnist -> label
I0428 19:44:44.899837 25667 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:44.902309 25667 net.cpp:124] Setting up mnist
I0428 19:44:44.902329 25667 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:44.902343 25667 net.cpp:131] Top shape: 64 (64)
I0428 19:44:44.902349 25667 net.cpp:139] Memory required for data: 200960
I0428 19:44:44.902360 25667 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:44.902381 25667 net.cpp:86] Creating Layer conv0
I0428 19:44:44.902405 25667 net.cpp:408] conv0 <- data
I0428 19:44:44.902426 25667 net.cpp:382] conv0 -> conv0
I0428 19:44:45.174775 25667 net.cpp:124] Setting up conv0
I0428 19:44:45.174803 25667 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:45.174808 25667 net.cpp:139] Memory required for data: 495872
I0428 19:44:45.174829 25667 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:45.174844 25667 net.cpp:86] Creating Layer pool0
I0428 19:44:45.174857 25667 net.cpp:408] pool0 <- conv0
I0428 19:44:45.174866 25667 net.cpp:382] pool0 -> pool0
I0428 19:44:45.174922 25667 net.cpp:124] Setting up pool0
I0428 19:44:45.174932 25667 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:45.174935 25667 net.cpp:139] Memory required for data: 569600
I0428 19:44:45.174940 25667 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:45.174955 25667 net.cpp:86] Creating Layer conv1
I0428 19:44:45.174962 25667 net.cpp:408] conv1 <- pool0
I0428 19:44:45.174969 25667 net.cpp:382] conv1 -> conv1
I0428 19:44:45.177714 25667 net.cpp:124] Setting up conv1
I0428 19:44:45.177731 25667 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:45.177737 25667 net.cpp:139] Memory required for data: 1388800
I0428 19:44:45.177750 25667 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:45.177762 25667 net.cpp:86] Creating Layer pool1
I0428 19:44:45.177768 25667 net.cpp:408] pool1 <- conv1
I0428 19:44:45.177776 25667 net.cpp:382] pool1 -> pool1
I0428 19:44:45.177834 25667 net.cpp:124] Setting up pool1
I0428 19:44:45.177844 25667 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:45.177848 25667 net.cpp:139] Memory required for data: 1593600
I0428 19:44:45.177852 25667 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:45.177863 25667 net.cpp:86] Creating Layer ip1
I0428 19:44:45.177870 25667 net.cpp:408] ip1 <- pool1
I0428 19:44:45.177877 25667 net.cpp:382] ip1 -> ip1
I0428 19:44:45.178103 25667 net.cpp:124] Setting up ip1
I0428 19:44:45.178112 25667 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:45.178117 25667 net.cpp:139] Memory required for data: 1600000
I0428 19:44:45.178128 25667 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:45.178141 25667 net.cpp:86] Creating Layer relu1
I0428 19:44:45.178149 25667 net.cpp:408] relu1 <- ip1
I0428 19:44:45.178156 25667 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:45.178326 25667 net.cpp:124] Setting up relu1
I0428 19:44:45.178336 25667 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:45.178341 25667 net.cpp:139] Memory required for data: 1606400
I0428 19:44:45.178357 25667 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:45.178365 25667 net.cpp:86] Creating Layer ip2
I0428 19:44:45.178370 25667 net.cpp:408] ip2 <- ip1
I0428 19:44:45.178378 25667 net.cpp:382] ip2 -> ip2
I0428 19:44:45.178472 25667 net.cpp:124] Setting up ip2
I0428 19:44:45.178479 25667 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:45.178484 25667 net.cpp:139] Memory required for data: 1612800
I0428 19:44:45.178493 25667 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:45.178500 25667 net.cpp:86] Creating Layer relu2
I0428 19:44:45.178509 25667 net.cpp:408] relu2 <- ip2
I0428 19:44:45.178516 25667 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:45.179239 25667 net.cpp:124] Setting up relu2
I0428 19:44:45.179253 25667 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:45.179258 25667 net.cpp:139] Memory required for data: 1619200
I0428 19:44:45.179263 25667 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:45.179273 25667 net.cpp:86] Creating Layer ip3
I0428 19:44:45.179280 25667 net.cpp:408] ip3 <- ip2
I0428 19:44:45.179288 25667 net.cpp:382] ip3 -> ip3
I0428 19:44:45.179389 25667 net.cpp:124] Setting up ip3
I0428 19:44:45.179399 25667 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:45.179404 25667 net.cpp:139] Memory required for data: 1621760
I0428 19:44:45.179416 25667 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:45.179425 25667 net.cpp:86] Creating Layer relu3
I0428 19:44:45.179432 25667 net.cpp:408] relu3 <- ip3
I0428 19:44:45.179453 25667 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:45.179618 25667 net.cpp:124] Setting up relu3
I0428 19:44:45.179627 25667 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:45.179631 25667 net.cpp:139] Memory required for data: 1624320
I0428 19:44:45.179636 25667 layer_factory.hpp:77] Creating layer loss
I0428 19:44:45.179644 25667 net.cpp:86] Creating Layer loss
I0428 19:44:45.179649 25667 net.cpp:408] loss <- ip3
I0428 19:44:45.179656 25667 net.cpp:408] loss <- label
I0428 19:44:45.179662 25667 net.cpp:382] loss -> loss
I0428 19:44:45.179683 25667 layer_factory.hpp:77] Creating layer loss
I0428 19:44:45.179906 25667 net.cpp:124] Setting up loss
I0428 19:44:45.179916 25667 net.cpp:131] Top shape: (1)
I0428 19:44:45.179936 25667 net.cpp:134]     with loss weight 1
I0428 19:44:45.179957 25667 net.cpp:139] Memory required for data: 1624324
I0428 19:44:45.179963 25667 net.cpp:200] loss needs backward computation.
I0428 19:44:45.179970 25667 net.cpp:200] relu3 needs backward computation.
I0428 19:44:45.179975 25667 net.cpp:200] ip3 needs backward computation.
I0428 19:44:45.179980 25667 net.cpp:200] relu2 needs backward computation.
I0428 19:44:45.179985 25667 net.cpp:200] ip2 needs backward computation.
I0428 19:44:45.179989 25667 net.cpp:200] relu1 needs backward computation.
I0428 19:44:45.179994 25667 net.cpp:200] ip1 needs backward computation.
I0428 19:44:45.179999 25667 net.cpp:200] pool1 needs backward computation.
I0428 19:44:45.180004 25667 net.cpp:200] conv1 needs backward computation.
I0428 19:44:45.180009 25667 net.cpp:200] pool0 needs backward computation.
I0428 19:44:45.180014 25667 net.cpp:200] conv0 needs backward computation.
I0428 19:44:45.180021 25667 net.cpp:202] mnist does not need backward computation.
I0428 19:44:45.180025 25667 net.cpp:244] This network produces output loss
I0428 19:44:45.180038 25667 net.cpp:257] Network initialization done.
I0428 19:44:45.180357 25667 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test455.prototxt
I0428 19:44:45.180390 25667 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:45.180527 25667 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:45.180636 25667 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:45.180694 25667 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:45.180713 25667 net.cpp:86] Creating Layer mnist
I0428 19:44:45.180721 25667 net.cpp:382] mnist -> data
I0428 19:44:45.180732 25667 net.cpp:382] mnist -> label
I0428 19:44:45.180915 25667 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:45.183116 25667 net.cpp:124] Setting up mnist
I0428 19:44:45.183147 25667 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:45.183156 25667 net.cpp:131] Top shape: 100 (100)
I0428 19:44:45.183161 25667 net.cpp:139] Memory required for data: 314000
I0428 19:44:45.183167 25667 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:45.183197 25667 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:45.183202 25667 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:45.183210 25667 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:45.183223 25667 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:45.183311 25667 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:45.183320 25667 net.cpp:131] Top shape: 100 (100)
I0428 19:44:45.183327 25667 net.cpp:131] Top shape: 100 (100)
I0428 19:44:45.183332 25667 net.cpp:139] Memory required for data: 314800
I0428 19:44:45.183337 25667 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:45.183351 25667 net.cpp:86] Creating Layer conv0
I0428 19:44:45.183358 25667 net.cpp:408] conv0 <- data
I0428 19:44:45.183367 25667 net.cpp:382] conv0 -> conv0
I0428 19:44:45.184993 25667 net.cpp:124] Setting up conv0
I0428 19:44:45.185008 25667 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:45.185014 25667 net.cpp:139] Memory required for data: 775600
I0428 19:44:45.185026 25667 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:45.185036 25667 net.cpp:86] Creating Layer pool0
I0428 19:44:45.185042 25667 net.cpp:408] pool0 <- conv0
I0428 19:44:45.185050 25667 net.cpp:382] pool0 -> pool0
I0428 19:44:45.185092 25667 net.cpp:124] Setting up pool0
I0428 19:44:45.185101 25667 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:45.185106 25667 net.cpp:139] Memory required for data: 890800
I0428 19:44:45.185111 25667 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:45.185123 25667 net.cpp:86] Creating Layer conv1
I0428 19:44:45.185143 25667 net.cpp:408] conv1 <- pool0
I0428 19:44:45.185151 25667 net.cpp:382] conv1 -> conv1
I0428 19:44:45.186748 25667 net.cpp:124] Setting up conv1
I0428 19:44:45.186764 25667 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:45.186769 25667 net.cpp:139] Memory required for data: 2170800
I0428 19:44:45.186781 25667 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:45.186791 25667 net.cpp:86] Creating Layer pool1
I0428 19:44:45.186797 25667 net.cpp:408] pool1 <- conv1
I0428 19:44:45.186805 25667 net.cpp:382] pool1 -> pool1
I0428 19:44:45.186847 25667 net.cpp:124] Setting up pool1
I0428 19:44:45.186856 25667 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:45.186861 25667 net.cpp:139] Memory required for data: 2490800
I0428 19:44:45.186866 25667 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:45.186877 25667 net.cpp:86] Creating Layer ip1
I0428 19:44:45.186882 25667 net.cpp:408] ip1 <- pool1
I0428 19:44:45.186890 25667 net.cpp:382] ip1 -> ip1
I0428 19:44:45.187144 25667 net.cpp:124] Setting up ip1
I0428 19:44:45.187155 25667 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:45.187171 25667 net.cpp:139] Memory required for data: 2500800
I0428 19:44:45.187183 25667 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:45.187192 25667 net.cpp:86] Creating Layer relu1
I0428 19:44:45.187197 25667 net.cpp:408] relu1 <- ip1
I0428 19:44:45.187204 25667 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:45.187386 25667 net.cpp:124] Setting up relu1
I0428 19:44:45.187396 25667 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:45.187400 25667 net.cpp:139] Memory required for data: 2510800
I0428 19:44:45.187405 25667 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:45.187420 25667 net.cpp:86] Creating Layer ip2
I0428 19:44:45.187427 25667 net.cpp:408] ip2 <- ip1
I0428 19:44:45.187435 25667 net.cpp:382] ip2 -> ip2
I0428 19:44:45.187566 25667 net.cpp:124] Setting up ip2
I0428 19:44:45.187575 25667 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:45.187580 25667 net.cpp:139] Memory required for data: 2520800
I0428 19:44:45.187588 25667 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:45.187597 25667 net.cpp:86] Creating Layer relu2
I0428 19:44:45.187602 25667 net.cpp:408] relu2 <- ip2
I0428 19:44:45.187608 25667 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:45.187871 25667 net.cpp:124] Setting up relu2
I0428 19:44:45.187880 25667 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:45.187885 25667 net.cpp:139] Memory required for data: 2530800
I0428 19:44:45.187891 25667 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:45.187899 25667 net.cpp:86] Creating Layer ip3
I0428 19:44:45.187906 25667 net.cpp:408] ip3 <- ip2
I0428 19:44:45.187913 25667 net.cpp:382] ip3 -> ip3
I0428 19:44:45.188045 25667 net.cpp:124] Setting up ip3
I0428 19:44:45.188053 25667 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:45.188060 25667 net.cpp:139] Memory required for data: 2534800
I0428 19:44:45.188071 25667 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:45.188081 25667 net.cpp:86] Creating Layer relu3
I0428 19:44:45.188086 25667 net.cpp:408] relu3 <- ip3
I0428 19:44:45.188093 25667 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:45.188946 25667 net.cpp:124] Setting up relu3
I0428 19:44:45.188974 25667 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:45.188980 25667 net.cpp:139] Memory required for data: 2538800
I0428 19:44:45.188985 25667 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:45.188994 25667 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:45.189000 25667 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:45.189008 25667 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:45.189019 25667 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:45.189067 25667 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:45.189076 25667 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:45.189082 25667 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:45.189088 25667 net.cpp:139] Memory required for data: 2546800
I0428 19:44:45.189093 25667 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:45.189102 25667 net.cpp:86] Creating Layer accuracy
I0428 19:44:45.189107 25667 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:45.189116 25667 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:45.189126 25667 net.cpp:382] accuracy -> accuracy
I0428 19:44:45.189152 25667 net.cpp:124] Setting up accuracy
I0428 19:44:45.189159 25667 net.cpp:131] Top shape: (1)
I0428 19:44:45.189164 25667 net.cpp:139] Memory required for data: 2546804
I0428 19:44:45.189169 25667 layer_factory.hpp:77] Creating layer loss
I0428 19:44:45.189188 25667 net.cpp:86] Creating Layer loss
I0428 19:44:45.189193 25667 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:45.189199 25667 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:45.189223 25667 net.cpp:382] loss -> loss
I0428 19:44:45.189231 25667 layer_factory.hpp:77] Creating layer loss
I0428 19:44:45.189465 25667 net.cpp:124] Setting up loss
I0428 19:44:45.189476 25667 net.cpp:131] Top shape: (1)
I0428 19:44:45.189481 25667 net.cpp:134]     with loss weight 1
I0428 19:44:45.189489 25667 net.cpp:139] Memory required for data: 2546808
I0428 19:44:45.189507 25667 net.cpp:200] loss needs backward computation.
I0428 19:44:45.189528 25667 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:45.189534 25667 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:45.189551 25667 net.cpp:200] relu3 needs backward computation.
I0428 19:44:45.189556 25667 net.cpp:200] ip3 needs backward computation.
I0428 19:44:45.189563 25667 net.cpp:200] relu2 needs backward computation.
I0428 19:44:45.189577 25667 net.cpp:200] ip2 needs backward computation.
I0428 19:44:45.189582 25667 net.cpp:200] relu1 needs backward computation.
I0428 19:44:45.189589 25667 net.cpp:200] ip1 needs backward computation.
I0428 19:44:45.189597 25667 net.cpp:200] pool1 needs backward computation.
I0428 19:44:45.189602 25667 net.cpp:200] conv1 needs backward computation.
I0428 19:44:45.189609 25667 net.cpp:200] pool0 needs backward computation.
I0428 19:44:45.189615 25667 net.cpp:200] conv0 needs backward computation.
I0428 19:44:45.189620 25667 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:45.189635 25667 net.cpp:202] mnist does not need backward computation.
I0428 19:44:45.189638 25667 net.cpp:244] This network produces output accuracy
I0428 19:44:45.189644 25667 net.cpp:244] This network produces output loss
I0428 19:44:45.189659 25667 net.cpp:257] Network initialization done.
I0428 19:44:45.189723 25667 solver.cpp:56] Solver scaffolding done.
I0428 19:44:45.190102 25667 caffe.cpp:248] Starting Optimization
I0428 19:44:45.190109 25667 solver.cpp:273] Solving LeNet
I0428 19:44:45.190114 25667 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:45.191052 25667 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:45.194667 25667 blocking_queue.cpp:49] Waiting for data
I0428 19:44:45.264967 25674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:45.265492 25667 solver.cpp:398]     Test net output #0: accuracy = 0.1247
I0428 19:44:45.265513 25667 solver.cpp:398]     Test net output #1: loss = 2.30748 (* 1 = 2.30748 loss)
I0428 19:44:45.267678 25667 solver.cpp:219] Iteration 0 (-1.29126e-31 iter/s, 0.0775311s/100 iters), loss = 2.29852
I0428 19:44:45.267704 25667 solver.cpp:238]     Train net output #0: loss = 2.29852 (* 1 = 2.29852 loss)
I0428 19:44:45.267720 25667 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:45.371558 25667 solver.cpp:219] Iteration 100 (962.975 iter/s, 0.103845s/100 iters), loss = 0.487972
I0428 19:44:45.371590 25667 solver.cpp:238]     Train net output #0: loss = 0.487972 (* 1 = 0.487972 loss)
I0428 19:44:45.371600 25667 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:45.479343 25667 solver.cpp:219] Iteration 200 (928.124 iter/s, 0.107744s/100 iters), loss = 0.29632
I0428 19:44:45.479370 25667 solver.cpp:238]     Train net output #0: loss = 0.29632 (* 1 = 0.29632 loss)
I0428 19:44:45.479380 25667 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:45.583716 25667 solver.cpp:219] Iteration 300 (958.429 iter/s, 0.104337s/100 iters), loss = 0.241208
I0428 19:44:45.583744 25667 solver.cpp:238]     Train net output #0: loss = 0.241208 (* 1 = 0.241208 loss)
I0428 19:44:45.583768 25667 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:45.690635 25667 solver.cpp:219] Iteration 400 (935.593 iter/s, 0.106884s/100 iters), loss = 0.100591
I0428 19:44:45.690676 25667 solver.cpp:238]     Train net output #0: loss = 0.100591 (* 1 = 0.100591 loss)
I0428 19:44:45.690701 25667 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:45.795569 25667 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:45.848248 25674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:45.848740 25667 solver.cpp:398]     Test net output #0: accuracy = 0.9499
I0428 19:44:45.848764 25667 solver.cpp:398]     Test net output #1: loss = 0.163308 (* 1 = 0.163308 loss)
I0428 19:44:45.849814 25667 solver.cpp:219] Iteration 500 (628.435 iter/s, 0.159126s/100 iters), loss = 0.276073
I0428 19:44:45.849884 25667 solver.cpp:238]     Train net output #0: loss = 0.276073 (* 1 = 0.276073 loss)
I0428 19:44:45.849907 25667 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:45.957947 25667 solver.cpp:219] Iteration 600 (925.432 iter/s, 0.108058s/100 iters), loss = 0.154764
I0428 19:44:45.957975 25667 solver.cpp:238]     Train net output #0: loss = 0.154764 (* 1 = 0.154764 loss)
I0428 19:44:45.957986 25667 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:46.059737 25667 solver.cpp:219] Iteration 700 (982.773 iter/s, 0.101753s/100 iters), loss = 0.255234
I0428 19:44:46.059767 25667 solver.cpp:238]     Train net output #0: loss = 0.255234 (* 1 = 0.255234 loss)
I0428 19:44:46.059778 25667 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:46.171298 25667 solver.cpp:219] Iteration 800 (896.687 iter/s, 0.111522s/100 iters), loss = 0.43217
I0428 19:44:46.171335 25667 solver.cpp:238]     Train net output #0: loss = 0.43217 (* 1 = 0.43217 loss)
I0428 19:44:46.171349 25667 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:46.276269 25667 solver.cpp:219] Iteration 900 (953.04 iter/s, 0.104927s/100 iters), loss = 0.30144
I0428 19:44:46.276304 25667 solver.cpp:238]     Train net output #0: loss = 0.30144 (* 1 = 0.30144 loss)
I0428 19:44:46.276315 25667 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:46.311193 25673 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:46.379824 25667 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:46.381062 25667 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:46.381685 25667 solver.cpp:311] Iteration 1000, loss = 0.169732
I0428 19:44:46.381702 25667 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:46.433825 25674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:46.434300 25667 solver.cpp:398]     Test net output #0: accuracy = 0.9695
I0428 19:44:46.434324 25667 solver.cpp:398]     Test net output #1: loss = 0.0950024 (* 1 = 0.0950024 loss)
I0428 19:44:46.434336 25667 solver.cpp:316] Optimization Done.
I0428 19:44:46.434342 25667 caffe.cpp:259] Optimization Done.
