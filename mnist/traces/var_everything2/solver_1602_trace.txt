I0428 20:34:15.812582  4446 caffe.cpp:218] Using GPUs 0
I0428 20:34:15.850785  4446 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:34:16.315551  4446 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1602.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:34:16.315688  4446 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1602.prototxt
I0428 20:34:16.316000  4446 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:34:16.316030  4446 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:34:16.316099  4446 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:34:16.316160  4446 layer_factory.hpp:77] Creating layer mnist
I0428 20:34:16.316258  4446 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:34:16.316282  4446 net.cpp:86] Creating Layer mnist
I0428 20:34:16.316288  4446 net.cpp:382] mnist -> data
I0428 20:34:16.316308  4446 net.cpp:382] mnist -> label
I0428 20:34:16.317216  4446 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:34:16.319619  4446 net.cpp:124] Setting up mnist
I0428 20:34:16.319661  4446 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:34:16.319670  4446 net.cpp:131] Top shape: 64 (64)
I0428 20:34:16.319689  4446 net.cpp:139] Memory required for data: 200960
I0428 20:34:16.319695  4446 layer_factory.hpp:77] Creating layer conv0
I0428 20:34:16.319711  4446 net.cpp:86] Creating Layer conv0
I0428 20:34:16.319716  4446 net.cpp:408] conv0 <- data
I0428 20:34:16.319726  4446 net.cpp:382] conv0 -> conv0
I0428 20:34:16.587113  4446 net.cpp:124] Setting up conv0
I0428 20:34:16.587149  4446 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:34:16.587155  4446 net.cpp:139] Memory required for data: 14946560
I0428 20:34:16.587198  4446 layer_factory.hpp:77] Creating layer pool0
I0428 20:34:16.587214  4446 net.cpp:86] Creating Layer pool0
I0428 20:34:16.587219  4446 net.cpp:408] pool0 <- conv0
I0428 20:34:16.587227  4446 net.cpp:382] pool0 -> pool0
I0428 20:34:16.587297  4446 net.cpp:124] Setting up pool0
I0428 20:34:16.587306  4446 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:34:16.587311  4446 net.cpp:139] Memory required for data: 18632960
I0428 20:34:16.587316  4446 layer_factory.hpp:77] Creating layer conv1
I0428 20:34:16.587329  4446 net.cpp:86] Creating Layer conv1
I0428 20:34:16.587334  4446 net.cpp:408] conv1 <- pool0
I0428 20:34:16.587340  4446 net.cpp:382] conv1 -> conv1
I0428 20:34:16.591609  4446 net.cpp:124] Setting up conv1
I0428 20:34:16.591629  4446 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:34:16.591634  4446 net.cpp:139] Memory required for data: 19452160
I0428 20:34:16.591645  4446 layer_factory.hpp:77] Creating layer pool1
I0428 20:34:16.591655  4446 net.cpp:86] Creating Layer pool1
I0428 20:34:16.591660  4446 net.cpp:408] pool1 <- conv1
I0428 20:34:16.591666  4446 net.cpp:382] pool1 -> pool1
I0428 20:34:16.591717  4446 net.cpp:124] Setting up pool1
I0428 20:34:16.591723  4446 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:34:16.591728  4446 net.cpp:139] Memory required for data: 19656960
I0428 20:34:16.591732  4446 layer_factory.hpp:77] Creating layer ip1
I0428 20:34:16.591747  4446 net.cpp:86] Creating Layer ip1
I0428 20:34:16.591751  4446 net.cpp:408] ip1 <- pool1
I0428 20:34:16.591758  4446 net.cpp:382] ip1 -> ip1
I0428 20:34:16.592984  4446 net.cpp:124] Setting up ip1
I0428 20:34:16.593001  4446 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:16.593006  4446 net.cpp:139] Memory required for data: 19659520
I0428 20:34:16.593016  4446 layer_factory.hpp:77] Creating layer relu1
I0428 20:34:16.593026  4446 net.cpp:86] Creating Layer relu1
I0428 20:34:16.593034  4446 net.cpp:408] relu1 <- ip1
I0428 20:34:16.593039  4446 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:34:16.593268  4446 net.cpp:124] Setting up relu1
I0428 20:34:16.593281  4446 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:16.593284  4446 net.cpp:139] Memory required for data: 19662080
I0428 20:34:16.593288  4446 layer_factory.hpp:77] Creating layer ip2
I0428 20:34:16.593299  4446 net.cpp:86] Creating Layer ip2
I0428 20:34:16.593303  4446 net.cpp:408] ip2 <- ip1
I0428 20:34:16.593310  4446 net.cpp:382] ip2 -> ip2
I0428 20:34:16.593436  4446 net.cpp:124] Setting up ip2
I0428 20:34:16.593452  4446 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:16.593458  4446 net.cpp:139] Memory required for data: 19664640
I0428 20:34:16.593469  4446 layer_factory.hpp:77] Creating layer relu2
I0428 20:34:16.593478  4446 net.cpp:86] Creating Layer relu2
I0428 20:34:16.593482  4446 net.cpp:408] relu2 <- ip2
I0428 20:34:16.593487  4446 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:34:16.594390  4446 net.cpp:124] Setting up relu2
I0428 20:34:16.594406  4446 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:16.594411  4446 net.cpp:139] Memory required for data: 19667200
I0428 20:34:16.594415  4446 layer_factory.hpp:77] Creating layer loss
I0428 20:34:16.594424  4446 net.cpp:86] Creating Layer loss
I0428 20:34:16.594429  4446 net.cpp:408] loss <- ip2
I0428 20:34:16.594434  4446 net.cpp:408] loss <- label
I0428 20:34:16.594441  4446 net.cpp:382] loss -> loss
I0428 20:34:16.594471  4446 layer_factory.hpp:77] Creating layer loss
I0428 20:34:16.594785  4446 net.cpp:124] Setting up loss
I0428 20:34:16.594797  4446 net.cpp:131] Top shape: (1)
I0428 20:34:16.594801  4446 net.cpp:134]     with loss weight 1
I0428 20:34:16.594818  4446 net.cpp:139] Memory required for data: 19667204
I0428 20:34:16.594822  4446 net.cpp:200] loss needs backward computation.
I0428 20:34:16.594828  4446 net.cpp:200] relu2 needs backward computation.
I0428 20:34:16.594831  4446 net.cpp:200] ip2 needs backward computation.
I0428 20:34:16.594837  4446 net.cpp:200] relu1 needs backward computation.
I0428 20:34:16.594841  4446 net.cpp:200] ip1 needs backward computation.
I0428 20:34:16.594859  4446 net.cpp:200] pool1 needs backward computation.
I0428 20:34:16.594863  4446 net.cpp:200] conv1 needs backward computation.
I0428 20:34:16.594867  4446 net.cpp:200] pool0 needs backward computation.
I0428 20:34:16.594871  4446 net.cpp:200] conv0 needs backward computation.
I0428 20:34:16.594876  4446 net.cpp:202] mnist does not need backward computation.
I0428 20:34:16.594878  4446 net.cpp:244] This network produces output loss
I0428 20:34:16.594890  4446 net.cpp:257] Network initialization done.
I0428 20:34:16.595252  4446 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1602.prototxt
I0428 20:34:16.595284  4446 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:34:16.595402  4446 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:34:16.595490  4446 layer_factory.hpp:77] Creating layer mnist
I0428 20:34:16.595547  4446 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:34:16.595564  4446 net.cpp:86] Creating Layer mnist
I0428 20:34:16.595571  4446 net.cpp:382] mnist -> data
I0428 20:34:16.595579  4446 net.cpp:382] mnist -> label
I0428 20:34:16.595691  4446 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:34:16.597230  4446 net.cpp:124] Setting up mnist
I0428 20:34:16.597247  4446 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:34:16.597254  4446 net.cpp:131] Top shape: 100 (100)
I0428 20:34:16.597257  4446 net.cpp:139] Memory required for data: 314000
I0428 20:34:16.597262  4446 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:34:16.597309  4446 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:34:16.597316  4446 net.cpp:408] label_mnist_1_split <- label
I0428 20:34:16.597321  4446 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:34:16.597329  4446 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:34:16.597404  4446 net.cpp:124] Setting up label_mnist_1_split
I0428 20:34:16.597414  4446 net.cpp:131] Top shape: 100 (100)
I0428 20:34:16.597419  4446 net.cpp:131] Top shape: 100 (100)
I0428 20:34:16.597422  4446 net.cpp:139] Memory required for data: 314800
I0428 20:34:16.597426  4446 layer_factory.hpp:77] Creating layer conv0
I0428 20:34:16.597439  4446 net.cpp:86] Creating Layer conv0
I0428 20:34:16.597443  4446 net.cpp:408] conv0 <- data
I0428 20:34:16.597451  4446 net.cpp:382] conv0 -> conv0
I0428 20:34:16.599509  4446 net.cpp:124] Setting up conv0
I0428 20:34:16.599526  4446 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:34:16.599530  4446 net.cpp:139] Memory required for data: 23354800
I0428 20:34:16.599544  4446 layer_factory.hpp:77] Creating layer pool0
I0428 20:34:16.599552  4446 net.cpp:86] Creating Layer pool0
I0428 20:34:16.599556  4446 net.cpp:408] pool0 <- conv0
I0428 20:34:16.599562  4446 net.cpp:382] pool0 -> pool0
I0428 20:34:16.599611  4446 net.cpp:124] Setting up pool0
I0428 20:34:16.599617  4446 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:34:16.599622  4446 net.cpp:139] Memory required for data: 29114800
I0428 20:34:16.599625  4446 layer_factory.hpp:77] Creating layer conv1
I0428 20:34:16.599637  4446 net.cpp:86] Creating Layer conv1
I0428 20:34:16.599640  4446 net.cpp:408] conv1 <- pool0
I0428 20:34:16.599649  4446 net.cpp:382] conv1 -> conv1
I0428 20:34:16.603364  4446 net.cpp:124] Setting up conv1
I0428 20:34:16.603382  4446 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:34:16.603387  4446 net.cpp:139] Memory required for data: 30394800
I0428 20:34:16.603397  4446 layer_factory.hpp:77] Creating layer pool1
I0428 20:34:16.603407  4446 net.cpp:86] Creating Layer pool1
I0428 20:34:16.603412  4446 net.cpp:408] pool1 <- conv1
I0428 20:34:16.603420  4446 net.cpp:382] pool1 -> pool1
I0428 20:34:16.603466  4446 net.cpp:124] Setting up pool1
I0428 20:34:16.603473  4446 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:34:16.603477  4446 net.cpp:139] Memory required for data: 30714800
I0428 20:34:16.603480  4446 layer_factory.hpp:77] Creating layer ip1
I0428 20:34:16.603489  4446 net.cpp:86] Creating Layer ip1
I0428 20:34:16.603492  4446 net.cpp:408] ip1 <- pool1
I0428 20:34:16.603500  4446 net.cpp:382] ip1 -> ip1
I0428 20:34:16.603677  4446 net.cpp:124] Setting up ip1
I0428 20:34:16.603688  4446 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:16.603693  4446 net.cpp:139] Memory required for data: 30718800
I0428 20:34:16.603700  4446 layer_factory.hpp:77] Creating layer relu1
I0428 20:34:16.603706  4446 net.cpp:86] Creating Layer relu1
I0428 20:34:16.603710  4446 net.cpp:408] relu1 <- ip1
I0428 20:34:16.603715  4446 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:34:16.603919  4446 net.cpp:124] Setting up relu1
I0428 20:34:16.603929  4446 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:16.603934  4446 net.cpp:139] Memory required for data: 30722800
I0428 20:34:16.603936  4446 layer_factory.hpp:77] Creating layer ip2
I0428 20:34:16.603945  4446 net.cpp:86] Creating Layer ip2
I0428 20:34:16.603948  4446 net.cpp:408] ip2 <- ip1
I0428 20:34:16.603955  4446 net.cpp:382] ip2 -> ip2
I0428 20:34:16.604094  4446 net.cpp:124] Setting up ip2
I0428 20:34:16.604104  4446 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:16.604106  4446 net.cpp:139] Memory required for data: 30726800
I0428 20:34:16.604113  4446 layer_factory.hpp:77] Creating layer relu2
I0428 20:34:16.604118  4446 net.cpp:86] Creating Layer relu2
I0428 20:34:16.604122  4446 net.cpp:408] relu2 <- ip2
I0428 20:34:16.604128  4446 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:34:16.604414  4446 net.cpp:124] Setting up relu2
I0428 20:34:16.604426  4446 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:16.604430  4446 net.cpp:139] Memory required for data: 30730800
I0428 20:34:16.604434  4446 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:34:16.604440  4446 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:34:16.604445  4446 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:34:16.604450  4446 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:34:16.604471  4446 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:34:16.604517  4446 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:34:16.604524  4446 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:16.604529  4446 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:16.604533  4446 net.cpp:139] Memory required for data: 30738800
I0428 20:34:16.604537  4446 layer_factory.hpp:77] Creating layer accuracy
I0428 20:34:16.604543  4446 net.cpp:86] Creating Layer accuracy
I0428 20:34:16.604547  4446 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:34:16.604552  4446 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:34:16.604557  4446 net.cpp:382] accuracy -> accuracy
I0428 20:34:16.604565  4446 net.cpp:124] Setting up accuracy
I0428 20:34:16.604570  4446 net.cpp:131] Top shape: (1)
I0428 20:34:16.604573  4446 net.cpp:139] Memory required for data: 30738804
I0428 20:34:16.604578  4446 layer_factory.hpp:77] Creating layer loss
I0428 20:34:16.604584  4446 net.cpp:86] Creating Layer loss
I0428 20:34:16.604588  4446 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:34:16.604593  4446 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:34:16.604598  4446 net.cpp:382] loss -> loss
I0428 20:34:16.604605  4446 layer_factory.hpp:77] Creating layer loss
I0428 20:34:16.604907  4446 net.cpp:124] Setting up loss
I0428 20:34:16.604919  4446 net.cpp:131] Top shape: (1)
I0428 20:34:16.604923  4446 net.cpp:134]     with loss weight 1
I0428 20:34:16.604930  4446 net.cpp:139] Memory required for data: 30738808
I0428 20:34:16.604934  4446 net.cpp:200] loss needs backward computation.
I0428 20:34:16.604939  4446 net.cpp:202] accuracy does not need backward computation.
I0428 20:34:16.604943  4446 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:34:16.604948  4446 net.cpp:200] relu2 needs backward computation.
I0428 20:34:16.604951  4446 net.cpp:200] ip2 needs backward computation.
I0428 20:34:16.604955  4446 net.cpp:200] relu1 needs backward computation.
I0428 20:34:16.604974  4446 net.cpp:200] ip1 needs backward computation.
I0428 20:34:16.604980  4446 net.cpp:200] pool1 needs backward computation.
I0428 20:34:16.604984  4446 net.cpp:200] conv1 needs backward computation.
I0428 20:34:16.604988  4446 net.cpp:200] pool0 needs backward computation.
I0428 20:34:16.604992  4446 net.cpp:200] conv0 needs backward computation.
I0428 20:34:16.605000  4446 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:34:16.605005  4446 net.cpp:202] mnist does not need backward computation.
I0428 20:34:16.605008  4446 net.cpp:244] This network produces output accuracy
I0428 20:34:16.605016  4446 net.cpp:244] This network produces output loss
I0428 20:34:16.605031  4446 net.cpp:257] Network initialization done.
I0428 20:34:16.605075  4446 solver.cpp:56] Solver scaffolding done.
I0428 20:34:16.605435  4446 caffe.cpp:248] Starting Optimization
I0428 20:34:16.605443  4446 solver.cpp:273] Solving LeNet
I0428 20:34:16.605446  4446 solver.cpp:274] Learning Rate Policy: inv
I0428 20:34:16.605718  4446 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:34:16.652547  4446 blocking_queue.cpp:49] Waiting for data
I0428 20:34:16.717198  4453 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:16.718629  4446 solver.cpp:398]     Test net output #0: accuracy = 0.1319
I0428 20:34:16.718652  4446 solver.cpp:398]     Test net output #1: loss = 2.29918 (* 1 = 2.29918 loss)
I0428 20:34:16.723685  4446 solver.cpp:219] Iteration 0 (-7.90212e-31 iter/s, 0.118202s/100 iters), loss = 2.2853
I0428 20:34:16.723714  4446 solver.cpp:238]     Train net output #0: loss = 2.2853 (* 1 = 2.2853 loss)
I0428 20:34:16.723729  4446 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:34:16.962574  4446 solver.cpp:219] Iteration 100 (418.696 iter/s, 0.238837s/100 iters), loss = 0.277857
I0428 20:34:16.962606  4446 solver.cpp:238]     Train net output #0: loss = 0.277857 (* 1 = 0.277857 loss)
I0428 20:34:16.962615  4446 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:34:17.211371  4446 solver.cpp:219] Iteration 200 (402.017 iter/s, 0.248746s/100 iters), loss = 0.159659
I0428 20:34:17.211405  4446 solver.cpp:238]     Train net output #0: loss = 0.159659 (* 1 = 0.159659 loss)
I0428 20:34:17.211413  4446 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:34:17.457839  4446 solver.cpp:219] Iteration 300 (405.819 iter/s, 0.246415s/100 iters), loss = 0.287831
I0428 20:34:17.457868  4446 solver.cpp:238]     Train net output #0: loss = 0.287831 (* 1 = 0.287831 loss)
I0428 20:34:17.457876  4446 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:34:17.702739  4446 solver.cpp:219] Iteration 400 (408.412 iter/s, 0.244851s/100 iters), loss = 0.11889
I0428 20:34:17.702795  4446 solver.cpp:238]     Train net output #0: loss = 0.11889 (* 1 = 0.11889 loss)
I0428 20:34:17.702802  4446 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:34:17.942751  4446 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:34:18.052294  4453 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:18.054102  4446 solver.cpp:398]     Test net output #0: accuracy = 0.9575
I0428 20:34:18.054126  4446 solver.cpp:398]     Test net output #1: loss = 0.134913 (* 1 = 0.134913 loss)
I0428 20:34:18.056489  4446 solver.cpp:219] Iteration 500 (282.745 iter/s, 0.353675s/100 iters), loss = 0.0886955
I0428 20:34:18.056529  4446 solver.cpp:238]     Train net output #0: loss = 0.0886955 (* 1 = 0.0886955 loss)
I0428 20:34:18.056535  4446 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:34:18.289898  4446 solver.cpp:219] Iteration 600 (428.507 iter/s, 0.233369s/100 iters), loss = 0.0798593
I0428 20:34:18.289942  4446 solver.cpp:238]     Train net output #0: loss = 0.0798592 (* 1 = 0.0798592 loss)
I0428 20:34:18.289949  4446 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:34:18.521371  4446 solver.cpp:219] Iteration 700 (432.125 iter/s, 0.231415s/100 iters), loss = 0.188161
I0428 20:34:18.521412  4446 solver.cpp:238]     Train net output #0: loss = 0.188161 (* 1 = 0.188161 loss)
I0428 20:34:18.521420  4446 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:34:18.753870  4446 solver.cpp:219] Iteration 800 (430.192 iter/s, 0.232454s/100 iters), loss = 0.467669
I0428 20:34:18.753916  4446 solver.cpp:238]     Train net output #0: loss = 0.467669 (* 1 = 0.467669 loss)
I0428 20:34:18.753923  4446 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:34:18.982517  4446 solver.cpp:219] Iteration 900 (437.473 iter/s, 0.228585s/100 iters), loss = 0.175763
I0428 20:34:18.982558  4446 solver.cpp:238]     Train net output #0: loss = 0.175763 (* 1 = 0.175763 loss)
I0428 20:34:18.982565  4446 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:34:19.058063  4452 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:19.206735  4446 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:34:19.211083  4446 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:34:19.212975  4446 solver.cpp:311] Iteration 1000, loss = 0.0897707
I0428 20:34:19.212992  4446 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:34:19.320410  4453 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:19.322090  4446 solver.cpp:398]     Test net output #0: accuracy = 0.9714
I0428 20:34:19.322140  4446 solver.cpp:398]     Test net output #1: loss = 0.0900498 (* 1 = 0.0900498 loss)
I0428 20:34:19.322146  4446 solver.cpp:316] Optimization Done.
I0428 20:34:19.322149  4446 caffe.cpp:259] Optimization Done.
