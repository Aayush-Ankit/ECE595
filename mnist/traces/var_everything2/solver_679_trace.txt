I0428 19:53:06.870916 27697 caffe.cpp:218] Using GPUs 0
I0428 19:53:06.908145 27697 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:53:07.419440 27697 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test679.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:53:07.419579 27697 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test679.prototxt
I0428 19:53:07.420002 27697 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:53:07.420022 27697 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:53:07.420123 27697 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:07.420203 27697 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:07.420301 27697 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:53:07.420325 27697 net.cpp:86] Creating Layer mnist
I0428 19:53:07.420333 27697 net.cpp:382] mnist -> data
I0428 19:53:07.420356 27697 net.cpp:382] mnist -> label
I0428 19:53:07.421485 27697 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:53:07.424247 27697 net.cpp:124] Setting up mnist
I0428 19:53:07.424266 27697 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:53:07.424273 27697 net.cpp:131] Top shape: 64 (64)
I0428 19:53:07.424276 27697 net.cpp:139] Memory required for data: 200960
I0428 19:53:07.424283 27697 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:07.424309 27697 net.cpp:86] Creating Layer conv0
I0428 19:53:07.424332 27697 net.cpp:408] conv0 <- data
I0428 19:53:07.424345 27697 net.cpp:382] conv0 -> conv0
I0428 19:53:07.688123 27697 net.cpp:124] Setting up conv0
I0428 19:53:07.688149 27697 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:53:07.688153 27697 net.cpp:139] Memory required for data: 938240
I0428 19:53:07.688169 27697 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:07.688180 27697 net.cpp:86] Creating Layer pool0
I0428 19:53:07.688184 27697 net.cpp:408] pool0 <- conv0
I0428 19:53:07.688189 27697 net.cpp:382] pool0 -> pool0
I0428 19:53:07.688236 27697 net.cpp:124] Setting up pool0
I0428 19:53:07.688244 27697 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:53:07.688247 27697 net.cpp:139] Memory required for data: 1122560
I0428 19:53:07.688251 27697 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:07.688259 27697 net.cpp:86] Creating Layer conv1
I0428 19:53:07.688262 27697 net.cpp:408] conv1 <- pool0
I0428 19:53:07.688267 27697 net.cpp:382] conv1 -> conv1
I0428 19:53:07.691087 27697 net.cpp:124] Setting up conv1
I0428 19:53:07.691102 27697 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:53:07.691105 27697 net.cpp:139] Memory required for data: 1941760
I0428 19:53:07.691113 27697 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:07.691120 27697 net.cpp:86] Creating Layer pool1
I0428 19:53:07.691123 27697 net.cpp:408] pool1 <- conv1
I0428 19:53:07.691128 27697 net.cpp:382] pool1 -> pool1
I0428 19:53:07.691169 27697 net.cpp:124] Setting up pool1
I0428 19:53:07.691176 27697 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:53:07.691179 27697 net.cpp:139] Memory required for data: 2146560
I0428 19:53:07.691181 27697 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:07.691192 27697 net.cpp:86] Creating Layer ip1
I0428 19:53:07.691195 27697 net.cpp:408] ip1 <- pool1
I0428 19:53:07.691200 27697 net.cpp:382] ip1 -> ip1
I0428 19:53:07.691329 27697 net.cpp:124] Setting up ip1
I0428 19:53:07.691335 27697 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:07.691339 27697 net.cpp:139] Memory required for data: 2149120
I0428 19:53:07.691345 27697 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:07.691350 27697 net.cpp:86] Creating Layer relu1
I0428 19:53:07.691354 27697 net.cpp:408] relu1 <- ip1
I0428 19:53:07.691357 27697 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:07.691509 27697 net.cpp:124] Setting up relu1
I0428 19:53:07.691519 27697 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:07.691521 27697 net.cpp:139] Memory required for data: 2151680
I0428 19:53:07.691524 27697 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:07.691530 27697 net.cpp:86] Creating Layer ip2
I0428 19:53:07.691534 27697 net.cpp:408] ip2 <- ip1
I0428 19:53:07.691539 27697 net.cpp:382] ip2 -> ip2
I0428 19:53:07.691623 27697 net.cpp:124] Setting up ip2
I0428 19:53:07.691632 27697 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:07.691635 27697 net.cpp:139] Memory required for data: 2158080
I0428 19:53:07.691640 27697 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:07.691646 27697 net.cpp:86] Creating Layer relu2
I0428 19:53:07.691649 27697 net.cpp:408] relu2 <- ip2
I0428 19:53:07.691668 27697 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:07.692436 27697 net.cpp:124] Setting up relu2
I0428 19:53:07.692450 27697 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:07.692453 27697 net.cpp:139] Memory required for data: 2164480
I0428 19:53:07.692456 27697 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:07.692463 27697 net.cpp:86] Creating Layer ip3
I0428 19:53:07.692467 27697 net.cpp:408] ip3 <- ip2
I0428 19:53:07.692472 27697 net.cpp:382] ip3 -> ip3
I0428 19:53:07.692564 27697 net.cpp:124] Setting up ip3
I0428 19:53:07.692572 27697 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:07.692575 27697 net.cpp:139] Memory required for data: 2167040
I0428 19:53:07.692584 27697 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:07.692587 27697 net.cpp:86] Creating Layer relu3
I0428 19:53:07.692590 27697 net.cpp:408] relu3 <- ip3
I0428 19:53:07.692595 27697 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:07.692761 27697 net.cpp:124] Setting up relu3
I0428 19:53:07.692770 27697 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:07.692773 27697 net.cpp:139] Memory required for data: 2169600
I0428 19:53:07.692776 27697 layer_factory.hpp:77] Creating layer loss
I0428 19:53:07.692782 27697 net.cpp:86] Creating Layer loss
I0428 19:53:07.692785 27697 net.cpp:408] loss <- ip3
I0428 19:53:07.692788 27697 net.cpp:408] loss <- label
I0428 19:53:07.692793 27697 net.cpp:382] loss -> loss
I0428 19:53:07.692831 27697 layer_factory.hpp:77] Creating layer loss
I0428 19:53:07.693109 27697 net.cpp:124] Setting up loss
I0428 19:53:07.693120 27697 net.cpp:131] Top shape: (1)
I0428 19:53:07.693123 27697 net.cpp:134]     with loss weight 1
I0428 19:53:07.693138 27697 net.cpp:139] Memory required for data: 2169604
I0428 19:53:07.693142 27697 net.cpp:200] loss needs backward computation.
I0428 19:53:07.693157 27697 net.cpp:200] relu3 needs backward computation.
I0428 19:53:07.693161 27697 net.cpp:200] ip3 needs backward computation.
I0428 19:53:07.693164 27697 net.cpp:200] relu2 needs backward computation.
I0428 19:53:07.693167 27697 net.cpp:200] ip2 needs backward computation.
I0428 19:53:07.693171 27697 net.cpp:200] relu1 needs backward computation.
I0428 19:53:07.693173 27697 net.cpp:200] ip1 needs backward computation.
I0428 19:53:07.693177 27697 net.cpp:200] pool1 needs backward computation.
I0428 19:53:07.693195 27697 net.cpp:200] conv1 needs backward computation.
I0428 19:53:07.693199 27697 net.cpp:200] pool0 needs backward computation.
I0428 19:53:07.693217 27697 net.cpp:200] conv0 needs backward computation.
I0428 19:53:07.693222 27697 net.cpp:202] mnist does not need backward computation.
I0428 19:53:07.693243 27697 net.cpp:244] This network produces output loss
I0428 19:53:07.693253 27697 net.cpp:257] Network initialization done.
I0428 19:53:07.693617 27697 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test679.prototxt
I0428 19:53:07.693645 27697 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:53:07.693732 27697 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:07.693806 27697 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:07.693850 27697 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:53:07.693861 27697 net.cpp:86] Creating Layer mnist
I0428 19:53:07.693866 27697 net.cpp:382] mnist -> data
I0428 19:53:07.693872 27697 net.cpp:382] mnist -> label
I0428 19:53:07.693970 27697 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:53:07.696045 27697 net.cpp:124] Setting up mnist
I0428 19:53:07.696059 27697 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:53:07.696079 27697 net.cpp:131] Top shape: 100 (100)
I0428 19:53:07.696082 27697 net.cpp:139] Memory required for data: 314000
I0428 19:53:07.696086 27697 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:53:07.696106 27697 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:53:07.696111 27697 net.cpp:408] label_mnist_1_split <- label
I0428 19:53:07.696132 27697 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:53:07.696140 27697 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:53:07.696229 27697 net.cpp:124] Setting up label_mnist_1_split
I0428 19:53:07.696238 27697 net.cpp:131] Top shape: 100 (100)
I0428 19:53:07.696241 27697 net.cpp:131] Top shape: 100 (100)
I0428 19:53:07.696244 27697 net.cpp:139] Memory required for data: 314800
I0428 19:53:07.696247 27697 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:07.696255 27697 net.cpp:86] Creating Layer conv0
I0428 19:53:07.696260 27697 net.cpp:408] conv0 <- data
I0428 19:53:07.696265 27697 net.cpp:382] conv0 -> conv0
I0428 19:53:07.697916 27697 net.cpp:124] Setting up conv0
I0428 19:53:07.697928 27697 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:53:07.697932 27697 net.cpp:139] Memory required for data: 1466800
I0428 19:53:07.697940 27697 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:07.697947 27697 net.cpp:86] Creating Layer pool0
I0428 19:53:07.697949 27697 net.cpp:408] pool0 <- conv0
I0428 19:53:07.697954 27697 net.cpp:382] pool0 -> pool0
I0428 19:53:07.698004 27697 net.cpp:124] Setting up pool0
I0428 19:53:07.698011 27697 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:53:07.698014 27697 net.cpp:139] Memory required for data: 1754800
I0428 19:53:07.698017 27697 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:07.698025 27697 net.cpp:86] Creating Layer conv1
I0428 19:53:07.698029 27697 net.cpp:408] conv1 <- pool0
I0428 19:53:07.698035 27697 net.cpp:382] conv1 -> conv1
I0428 19:53:07.699467 27697 net.cpp:124] Setting up conv1
I0428 19:53:07.699481 27697 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:53:07.699483 27697 net.cpp:139] Memory required for data: 3034800
I0428 19:53:07.699492 27697 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:07.699498 27697 net.cpp:86] Creating Layer pool1
I0428 19:53:07.699502 27697 net.cpp:408] pool1 <- conv1
I0428 19:53:07.699507 27697 net.cpp:382] pool1 -> pool1
I0428 19:53:07.699544 27697 net.cpp:124] Setting up pool1
I0428 19:53:07.699551 27697 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:53:07.699555 27697 net.cpp:139] Memory required for data: 3354800
I0428 19:53:07.699560 27697 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:07.699569 27697 net.cpp:86] Creating Layer ip1
I0428 19:53:07.699574 27697 net.cpp:408] ip1 <- pool1
I0428 19:53:07.699582 27697 net.cpp:382] ip1 -> ip1
I0428 19:53:07.699733 27697 net.cpp:124] Setting up ip1
I0428 19:53:07.699743 27697 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:07.699759 27697 net.cpp:139] Memory required for data: 3358800
I0428 19:53:07.699767 27697 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:07.699772 27697 net.cpp:86] Creating Layer relu1
I0428 19:53:07.699776 27697 net.cpp:408] relu1 <- ip1
I0428 19:53:07.699780 27697 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:07.699965 27697 net.cpp:124] Setting up relu1
I0428 19:53:07.699977 27697 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:07.699980 27697 net.cpp:139] Memory required for data: 3362800
I0428 19:53:07.699985 27697 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:07.699991 27697 net.cpp:86] Creating Layer ip2
I0428 19:53:07.699995 27697 net.cpp:408] ip2 <- ip1
I0428 19:53:07.700000 27697 net.cpp:382] ip2 -> ip2
I0428 19:53:07.700098 27697 net.cpp:124] Setting up ip2
I0428 19:53:07.700106 27697 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:07.700117 27697 net.cpp:139] Memory required for data: 3372800
I0428 19:53:07.700122 27697 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:07.700127 27697 net.cpp:86] Creating Layer relu2
I0428 19:53:07.700130 27697 net.cpp:408] relu2 <- ip2
I0428 19:53:07.700134 27697 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:07.700290 27697 net.cpp:124] Setting up relu2
I0428 19:53:07.700299 27697 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:07.700302 27697 net.cpp:139] Memory required for data: 3382800
I0428 19:53:07.700305 27697 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:07.700310 27697 net.cpp:86] Creating Layer ip3
I0428 19:53:07.700314 27697 net.cpp:408] ip3 <- ip2
I0428 19:53:07.700317 27697 net.cpp:382] ip3 -> ip3
I0428 19:53:07.700431 27697 net.cpp:124] Setting up ip3
I0428 19:53:07.700439 27697 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:07.700443 27697 net.cpp:139] Memory required for data: 3386800
I0428 19:53:07.700450 27697 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:07.700458 27697 net.cpp:86] Creating Layer relu3
I0428 19:53:07.700464 27697 net.cpp:408] relu3 <- ip3
I0428 19:53:07.700469 27697 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:07.701349 27697 net.cpp:124] Setting up relu3
I0428 19:53:07.701382 27697 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:07.701386 27697 net.cpp:139] Memory required for data: 3390800
I0428 19:53:07.701390 27697 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:53:07.701395 27697 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:53:07.701398 27697 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:53:07.701403 27697 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:53:07.701409 27697 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:53:07.701454 27697 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:53:07.701462 27697 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:07.701465 27697 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:07.701467 27697 net.cpp:139] Memory required for data: 3398800
I0428 19:53:07.701470 27697 layer_factory.hpp:77] Creating layer accuracy
I0428 19:53:07.701477 27697 net.cpp:86] Creating Layer accuracy
I0428 19:53:07.701479 27697 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:53:07.701484 27697 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:53:07.701488 27697 net.cpp:382] accuracy -> accuracy
I0428 19:53:07.701499 27697 net.cpp:124] Setting up accuracy
I0428 19:53:07.701503 27697 net.cpp:131] Top shape: (1)
I0428 19:53:07.701506 27697 net.cpp:139] Memory required for data: 3398804
I0428 19:53:07.701509 27697 layer_factory.hpp:77] Creating layer loss
I0428 19:53:07.701516 27697 net.cpp:86] Creating Layer loss
I0428 19:53:07.701519 27697 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:53:07.701524 27697 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:53:07.701527 27697 net.cpp:382] loss -> loss
I0428 19:53:07.701534 27697 layer_factory.hpp:77] Creating layer loss
I0428 19:53:07.701768 27697 net.cpp:124] Setting up loss
I0428 19:53:07.701777 27697 net.cpp:131] Top shape: (1)
I0428 19:53:07.701781 27697 net.cpp:134]     with loss weight 1
I0428 19:53:07.701787 27697 net.cpp:139] Memory required for data: 3398808
I0428 19:53:07.701802 27697 net.cpp:200] loss needs backward computation.
I0428 19:53:07.701807 27697 net.cpp:202] accuracy does not need backward computation.
I0428 19:53:07.701809 27697 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:53:07.701812 27697 net.cpp:200] relu3 needs backward computation.
I0428 19:53:07.701817 27697 net.cpp:200] ip3 needs backward computation.
I0428 19:53:07.701819 27697 net.cpp:200] relu2 needs backward computation.
I0428 19:53:07.701822 27697 net.cpp:200] ip2 needs backward computation.
I0428 19:53:07.701824 27697 net.cpp:200] relu1 needs backward computation.
I0428 19:53:07.701828 27697 net.cpp:200] ip1 needs backward computation.
I0428 19:53:07.701830 27697 net.cpp:200] pool1 needs backward computation.
I0428 19:53:07.701838 27697 net.cpp:200] conv1 needs backward computation.
I0428 19:53:07.701843 27697 net.cpp:200] pool0 needs backward computation.
I0428 19:53:07.701845 27697 net.cpp:200] conv0 needs backward computation.
I0428 19:53:07.701849 27697 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:53:07.701854 27697 net.cpp:202] mnist does not need backward computation.
I0428 19:53:07.701858 27697 net.cpp:244] This network produces output accuracy
I0428 19:53:07.701864 27697 net.cpp:244] This network produces output loss
I0428 19:53:07.701877 27697 net.cpp:257] Network initialization done.
I0428 19:53:07.701920 27697 solver.cpp:56] Solver scaffolding done.
I0428 19:53:07.702343 27697 caffe.cpp:248] Starting Optimization
I0428 19:53:07.702355 27697 solver.cpp:273] Solving LeNet
I0428 19:53:07.702358 27697 solver.cpp:274] Learning Rate Policy: inv
I0428 19:53:07.702623 27697 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:53:07.707267 27697 blocking_queue.cpp:49] Waiting for data
I0428 19:53:07.777678 27704 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:07.778184 27697 solver.cpp:398]     Test net output #0: accuracy = 0.0844
I0428 19:53:07.778221 27697 solver.cpp:398]     Test net output #1: loss = 2.32995 (* 1 = 2.32995 loss)
I0428 19:53:07.780742 27697 solver.cpp:219] Iteration 0 (2.90602 iter/s, 0.0783369s/100 iters), loss = 2.33064
I0428 19:53:07.780764 27697 solver.cpp:238]     Train net output #0: loss = 2.33064 (* 1 = 2.33064 loss)
I0428 19:53:07.780791 27697 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:53:07.884784 27697 solver.cpp:219] Iteration 100 (961.486 iter/s, 0.104006s/100 iters), loss = 0.662567
I0428 19:53:07.884848 27697 solver.cpp:238]     Train net output #0: loss = 0.662567 (* 1 = 0.662567 loss)
I0428 19:53:07.884856 27697 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:53:07.994141 27697 solver.cpp:219] Iteration 200 (915.07 iter/s, 0.109281s/100 iters), loss = 0.407987
I0428 19:53:07.994182 27697 solver.cpp:238]     Train net output #0: loss = 0.407987 (* 1 = 0.407987 loss)
I0428 19:53:07.994189 27697 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:53:08.094224 27697 solver.cpp:219] Iteration 300 (999.521 iter/s, 0.100048s/100 iters), loss = 0.528867
I0428 19:53:08.094249 27697 solver.cpp:238]     Train net output #0: loss = 0.528867 (* 1 = 0.528867 loss)
I0428 19:53:08.094271 27697 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:53:08.199935 27697 solver.cpp:219] Iteration 400 (946.326 iter/s, 0.105672s/100 iters), loss = 0.45772
I0428 19:53:08.199980 27697 solver.cpp:238]     Train net output #0: loss = 0.45772 (* 1 = 0.45772 loss)
I0428 19:53:08.199990 27697 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:53:08.311763 27697 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:53:08.386662 27704 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:08.387207 27697 solver.cpp:398]     Test net output #0: accuracy = 0.8557
I0428 19:53:08.387244 27697 solver.cpp:398]     Test net output #1: loss = 0.413471 (* 1 = 0.413471 loss)
I0428 19:53:08.388353 27697 solver.cpp:219] Iteration 500 (530.891 iter/s, 0.188363s/100 iters), loss = 0.390771
I0428 19:53:08.388401 27697 solver.cpp:238]     Train net output #0: loss = 0.390771 (* 1 = 0.390771 loss)
I0428 19:53:08.388422 27697 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:53:08.496315 27697 solver.cpp:219] Iteration 600 (926.744 iter/s, 0.107905s/100 iters), loss = 0.356084
I0428 19:53:08.496373 27697 solver.cpp:238]     Train net output #0: loss = 0.356084 (* 1 = 0.356084 loss)
I0428 19:53:08.496381 27697 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:53:08.597779 27697 solver.cpp:219] Iteration 700 (986.237 iter/s, 0.101395s/100 iters), loss = 0.506663
I0428 19:53:08.597820 27697 solver.cpp:238]     Train net output #0: loss = 0.506663 (* 1 = 0.506663 loss)
I0428 19:53:08.597826 27697 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:53:08.708999 27697 solver.cpp:219] Iteration 800 (899.559 iter/s, 0.111166s/100 iters), loss = 0.599413
I0428 19:53:08.709040 27697 solver.cpp:238]     Train net output #0: loss = 0.599413 (* 1 = 0.599413 loss)
I0428 19:53:08.709050 27697 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:53:08.820983 27697 solver.cpp:219] Iteration 900 (893.38 iter/s, 0.111934s/100 iters), loss = 0.481889
I0428 19:53:08.821014 27697 solver.cpp:238]     Train net output #0: loss = 0.481889 (* 1 = 0.481889 loss)
I0428 19:53:08.821022 27697 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:53:08.857391 27703 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:08.925392 27697 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:53:08.926585 27697 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:53:08.927142 27697 solver.cpp:311] Iteration 1000, loss = 0.399921
I0428 19:53:08.927158 27697 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:53:09.001962 27704 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:09.002532 27697 solver.cpp:398]     Test net output #0: accuracy = 0.8695
I0428 19:53:09.002552 27697 solver.cpp:398]     Test net output #1: loss = 0.353022 (* 1 = 0.353022 loss)
I0428 19:53:09.002574 27697 solver.cpp:316] Optimization Done.
I0428 19:53:09.002578 27697 caffe.cpp:259] Optimization Done.
