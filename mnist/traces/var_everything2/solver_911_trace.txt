I0428 20:01:45.026142 29796 caffe.cpp:218] Using GPUs 0
I0428 20:01:45.068523 29796 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:45.670037 29796 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test911.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:45.670191 29796 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test911.prototxt
I0428 20:01:45.670738 29796 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:45.670761 29796 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:45.670893 29796 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:45.670987 29796 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:45.671102 29796 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:45.671128 29796 net.cpp:86] Creating Layer mnist
I0428 20:01:45.671139 29796 net.cpp:382] mnist -> data
I0428 20:01:45.671166 29796 net.cpp:382] mnist -> label
I0428 20:01:45.672508 29796 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:45.675576 29796 net.cpp:124] Setting up mnist
I0428 20:01:45.675596 29796 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:45.675604 29796 net.cpp:131] Top shape: 64 (64)
I0428 20:01:45.675611 29796 net.cpp:139] Memory required for data: 200960
I0428 20:01:45.675621 29796 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:45.675638 29796 net.cpp:86] Creating Layer conv0
I0428 20:01:45.675663 29796 net.cpp:408] conv0 <- data
I0428 20:01:45.675678 29796 net.cpp:382] conv0 -> conv0
I0428 20:01:45.970783 29796 net.cpp:124] Setting up conv0
I0428 20:01:45.970814 29796 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:45.970819 29796 net.cpp:139] Memory required for data: 1675520
I0428 20:01:45.970837 29796 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:45.970852 29796 net.cpp:86] Creating Layer pool0
I0428 20:01:45.970859 29796 net.cpp:408] pool0 <- conv0
I0428 20:01:45.970865 29796 net.cpp:382] pool0 -> pool0
I0428 20:01:45.970932 29796 net.cpp:124] Setting up pool0
I0428 20:01:45.970948 29796 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:45.970953 29796 net.cpp:139] Memory required for data: 2044160
I0428 20:01:45.970957 29796 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:45.970970 29796 net.cpp:86] Creating Layer conv1
I0428 20:01:45.970975 29796 net.cpp:408] conv1 <- pool0
I0428 20:01:45.970981 29796 net.cpp:382] conv1 -> conv1
I0428 20:01:45.974722 29796 net.cpp:124] Setting up conv1
I0428 20:01:45.974753 29796 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:45.974758 29796 net.cpp:139] Memory required for data: 2863360
I0428 20:01:45.974771 29796 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:45.974779 29796 net.cpp:86] Creating Layer pool1
I0428 20:01:45.974784 29796 net.cpp:408] pool1 <- conv1
I0428 20:01:45.974807 29796 net.cpp:382] pool1 -> pool1
I0428 20:01:45.974850 29796 net.cpp:124] Setting up pool1
I0428 20:01:45.974860 29796 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:45.974865 29796 net.cpp:139] Memory required for data: 3068160
I0428 20:01:45.974869 29796 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:45.974879 29796 net.cpp:86] Creating Layer ip1
I0428 20:01:45.974884 29796 net.cpp:408] ip1 <- pool1
I0428 20:01:45.974890 29796 net.cpp:382] ip1 -> ip1
I0428 20:01:45.975087 29796 net.cpp:124] Setting up ip1
I0428 20:01:45.975097 29796 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:45.975102 29796 net.cpp:139] Memory required for data: 3070720
I0428 20:01:45.975111 29796 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:45.975118 29796 net.cpp:86] Creating Layer relu1
I0428 20:01:45.975123 29796 net.cpp:408] relu1 <- ip1
I0428 20:01:45.975129 29796 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:45.975339 29796 net.cpp:124] Setting up relu1
I0428 20:01:45.975350 29796 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:45.975355 29796 net.cpp:139] Memory required for data: 3073280
I0428 20:01:45.975360 29796 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:45.975369 29796 net.cpp:86] Creating Layer ip2
I0428 20:01:45.975373 29796 net.cpp:408] ip2 <- ip1
I0428 20:01:45.975380 29796 net.cpp:382] ip2 -> ip2
I0428 20:01:45.975493 29796 net.cpp:124] Setting up ip2
I0428 20:01:45.975503 29796 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:45.975507 29796 net.cpp:139] Memory required for data: 3075840
I0428 20:01:45.975515 29796 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:45.975523 29796 net.cpp:86] Creating Layer relu2
I0428 20:01:45.975528 29796 net.cpp:408] relu2 <- ip2
I0428 20:01:45.975534 29796 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:45.976575 29796 net.cpp:124] Setting up relu2
I0428 20:01:45.976605 29796 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:45.976609 29796 net.cpp:139] Memory required for data: 3078400
I0428 20:01:45.976614 29796 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:45.976624 29796 net.cpp:86] Creating Layer ip3
I0428 20:01:45.976629 29796 net.cpp:408] ip3 <- ip2
I0428 20:01:45.976636 29796 net.cpp:382] ip3 -> ip3
I0428 20:01:45.976752 29796 net.cpp:124] Setting up ip3
I0428 20:01:45.976763 29796 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:45.976768 29796 net.cpp:139] Memory required for data: 3080960
I0428 20:01:45.976778 29796 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:45.976784 29796 net.cpp:86] Creating Layer relu3
I0428 20:01:45.976804 29796 net.cpp:408] relu3 <- ip3
I0428 20:01:45.976833 29796 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:45.977047 29796 net.cpp:124] Setting up relu3
I0428 20:01:45.977059 29796 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:45.977064 29796 net.cpp:139] Memory required for data: 3083520
I0428 20:01:45.977069 29796 layer_factory.hpp:77] Creating layer loss
I0428 20:01:45.977077 29796 net.cpp:86] Creating Layer loss
I0428 20:01:45.977082 29796 net.cpp:408] loss <- ip3
I0428 20:01:45.977088 29796 net.cpp:408] loss <- label
I0428 20:01:45.977097 29796 net.cpp:382] loss -> loss
I0428 20:01:45.977133 29796 layer_factory.hpp:77] Creating layer loss
I0428 20:01:45.977418 29796 net.cpp:124] Setting up loss
I0428 20:01:45.977440 29796 net.cpp:131] Top shape: (1)
I0428 20:01:45.977458 29796 net.cpp:134]     with loss weight 1
I0428 20:01:45.977489 29796 net.cpp:139] Memory required for data: 3083524
I0428 20:01:45.977494 29796 net.cpp:200] loss needs backward computation.
I0428 20:01:45.977499 29796 net.cpp:200] relu3 needs backward computation.
I0428 20:01:45.977514 29796 net.cpp:200] ip3 needs backward computation.
I0428 20:01:45.977519 29796 net.cpp:200] relu2 needs backward computation.
I0428 20:01:45.977524 29796 net.cpp:200] ip2 needs backward computation.
I0428 20:01:45.977527 29796 net.cpp:200] relu1 needs backward computation.
I0428 20:01:45.977531 29796 net.cpp:200] ip1 needs backward computation.
I0428 20:01:45.977551 29796 net.cpp:200] pool1 needs backward computation.
I0428 20:01:45.977556 29796 net.cpp:200] conv1 needs backward computation.
I0428 20:01:45.977561 29796 net.cpp:200] pool0 needs backward computation.
I0428 20:01:45.977566 29796 net.cpp:200] conv0 needs backward computation.
I0428 20:01:45.977571 29796 net.cpp:202] mnist does not need backward computation.
I0428 20:01:45.977576 29796 net.cpp:244] This network produces output loss
I0428 20:01:45.977588 29796 net.cpp:257] Network initialization done.
I0428 20:01:45.978103 29796 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test911.prototxt
I0428 20:01:45.978155 29796 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:45.978314 29796 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:45.978436 29796 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:45.978493 29796 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:45.978509 29796 net.cpp:86] Creating Layer mnist
I0428 20:01:45.978515 29796 net.cpp:382] mnist -> data
I0428 20:01:45.978526 29796 net.cpp:382] mnist -> label
I0428 20:01:45.978631 29796 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:45.981174 29796 net.cpp:124] Setting up mnist
I0428 20:01:45.981220 29796 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:45.981243 29796 net.cpp:131] Top shape: 100 (100)
I0428 20:01:45.981248 29796 net.cpp:139] Memory required for data: 314000
I0428 20:01:45.981253 29796 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:45.981262 29796 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:45.981267 29796 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:45.981274 29796 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:45.981284 29796 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:45.981444 29796 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:45.981456 29796 net.cpp:131] Top shape: 100 (100)
I0428 20:01:45.981462 29796 net.cpp:131] Top shape: 100 (100)
I0428 20:01:45.981468 29796 net.cpp:139] Memory required for data: 314800
I0428 20:01:45.981473 29796 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:45.981485 29796 net.cpp:86] Creating Layer conv0
I0428 20:01:45.981492 29796 net.cpp:408] conv0 <- data
I0428 20:01:45.981499 29796 net.cpp:382] conv0 -> conv0
I0428 20:01:45.983481 29796 net.cpp:124] Setting up conv0
I0428 20:01:45.983497 29796 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:45.983517 29796 net.cpp:139] Memory required for data: 2618800
I0428 20:01:45.983530 29796 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:45.983538 29796 net.cpp:86] Creating Layer pool0
I0428 20:01:45.983543 29796 net.cpp:408] pool0 <- conv0
I0428 20:01:45.983551 29796 net.cpp:382] pool0 -> pool0
I0428 20:01:45.983609 29796 net.cpp:124] Setting up pool0
I0428 20:01:45.983621 29796 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:45.983626 29796 net.cpp:139] Memory required for data: 3194800
I0428 20:01:45.983645 29796 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:45.983657 29796 net.cpp:86] Creating Layer conv1
I0428 20:01:45.983662 29796 net.cpp:408] conv1 <- pool0
I0428 20:01:45.983669 29796 net.cpp:382] conv1 -> conv1
I0428 20:01:45.986001 29796 net.cpp:124] Setting up conv1
I0428 20:01:45.986017 29796 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:45.986022 29796 net.cpp:139] Memory required for data: 4474800
I0428 20:01:45.986054 29796 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:45.986063 29796 net.cpp:86] Creating Layer pool1
I0428 20:01:45.986066 29796 net.cpp:408] pool1 <- conv1
I0428 20:01:45.986073 29796 net.cpp:382] pool1 -> pool1
I0428 20:01:45.986121 29796 net.cpp:124] Setting up pool1
I0428 20:01:45.986132 29796 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:45.986142 29796 net.cpp:139] Memory required for data: 4794800
I0428 20:01:45.986147 29796 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:45.986155 29796 net.cpp:86] Creating Layer ip1
I0428 20:01:45.986160 29796 net.cpp:408] ip1 <- pool1
I0428 20:01:45.986166 29796 net.cpp:382] ip1 -> ip1
I0428 20:01:45.986367 29796 net.cpp:124] Setting up ip1
I0428 20:01:45.986377 29796 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:45.986394 29796 net.cpp:139] Memory required for data: 4798800
I0428 20:01:45.986405 29796 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:45.986413 29796 net.cpp:86] Creating Layer relu1
I0428 20:01:45.986418 29796 net.cpp:408] relu1 <- ip1
I0428 20:01:45.986423 29796 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:45.986631 29796 net.cpp:124] Setting up relu1
I0428 20:01:45.986642 29796 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:45.986649 29796 net.cpp:139] Memory required for data: 4802800
I0428 20:01:45.986652 29796 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:45.986662 29796 net.cpp:86] Creating Layer ip2
I0428 20:01:45.986667 29796 net.cpp:408] ip2 <- ip1
I0428 20:01:45.986675 29796 net.cpp:382] ip2 -> ip2
I0428 20:01:45.986814 29796 net.cpp:124] Setting up ip2
I0428 20:01:45.986824 29796 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:45.986829 29796 net.cpp:139] Memory required for data: 4806800
I0428 20:01:45.986838 29796 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:45.986845 29796 net.cpp:86] Creating Layer relu2
I0428 20:01:45.986850 29796 net.cpp:408] relu2 <- ip2
I0428 20:01:45.986856 29796 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:45.987188 29796 net.cpp:124] Setting up relu2
I0428 20:01:45.987200 29796 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:45.987205 29796 net.cpp:139] Memory required for data: 4810800
I0428 20:01:45.987215 29796 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:45.987223 29796 net.cpp:86] Creating Layer ip3
I0428 20:01:45.987228 29796 net.cpp:408] ip3 <- ip2
I0428 20:01:45.987236 29796 net.cpp:382] ip3 -> ip3
I0428 20:01:45.987370 29796 net.cpp:124] Setting up ip3
I0428 20:01:45.987393 29796 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:45.987398 29796 net.cpp:139] Memory required for data: 4814800
I0428 20:01:45.987408 29796 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:45.987414 29796 net.cpp:86] Creating Layer relu3
I0428 20:01:45.987418 29796 net.cpp:408] relu3 <- ip3
I0428 20:01:45.987424 29796 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:45.988569 29796 net.cpp:124] Setting up relu3
I0428 20:01:45.988584 29796 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:45.988589 29796 net.cpp:139] Memory required for data: 4818800
I0428 20:01:45.988595 29796 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:01:45.988601 29796 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:01:45.988606 29796 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:01:45.988615 29796 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:01:45.988623 29796 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:01:45.988668 29796 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:01:45.988680 29796 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:45.988687 29796 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:45.988692 29796 net.cpp:139] Memory required for data: 4826800
I0428 20:01:45.988695 29796 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:45.988703 29796 net.cpp:86] Creating Layer accuracy
I0428 20:01:45.988708 29796 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:01:45.988720 29796 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:45.988728 29796 net.cpp:382] accuracy -> accuracy
I0428 20:01:45.988737 29796 net.cpp:124] Setting up accuracy
I0428 20:01:45.988744 29796 net.cpp:131] Top shape: (1)
I0428 20:01:45.988749 29796 net.cpp:139] Memory required for data: 4826804
I0428 20:01:45.988752 29796 layer_factory.hpp:77] Creating layer loss
I0428 20:01:45.988773 29796 net.cpp:86] Creating Layer loss
I0428 20:01:45.988777 29796 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:01:45.988795 29796 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:45.988801 29796 net.cpp:382] loss -> loss
I0428 20:01:45.988843 29796 layer_factory.hpp:77] Creating layer loss
I0428 20:01:45.989172 29796 net.cpp:124] Setting up loss
I0428 20:01:45.989200 29796 net.cpp:131] Top shape: (1)
I0428 20:01:45.989207 29796 net.cpp:134]     with loss weight 1
I0428 20:01:45.989243 29796 net.cpp:139] Memory required for data: 4826808
I0428 20:01:45.989254 29796 net.cpp:200] loss needs backward computation.
I0428 20:01:45.989260 29796 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:45.989266 29796 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:01:45.989287 29796 net.cpp:200] relu3 needs backward computation.
I0428 20:01:45.989291 29796 net.cpp:200] ip3 needs backward computation.
I0428 20:01:45.989296 29796 net.cpp:200] relu2 needs backward computation.
I0428 20:01:45.989300 29796 net.cpp:200] ip2 needs backward computation.
I0428 20:01:45.989310 29796 net.cpp:200] relu1 needs backward computation.
I0428 20:01:45.989315 29796 net.cpp:200] ip1 needs backward computation.
I0428 20:01:45.989326 29796 net.cpp:200] pool1 needs backward computation.
I0428 20:01:45.989329 29796 net.cpp:200] conv1 needs backward computation.
I0428 20:01:45.989334 29796 net.cpp:200] pool0 needs backward computation.
I0428 20:01:45.989339 29796 net.cpp:200] conv0 needs backward computation.
I0428 20:01:45.989351 29796 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:45.989356 29796 net.cpp:202] mnist does not need backward computation.
I0428 20:01:45.989367 29796 net.cpp:244] This network produces output accuracy
I0428 20:01:45.989372 29796 net.cpp:244] This network produces output loss
I0428 20:01:45.989385 29796 net.cpp:257] Network initialization done.
I0428 20:01:45.989439 29796 solver.cpp:56] Solver scaffolding done.
I0428 20:01:45.989941 29796 caffe.cpp:248] Starting Optimization
I0428 20:01:45.989949 29796 solver.cpp:273] Solving LeNet
I0428 20:01:45.989953 29796 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:45.990172 29796 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:45.996647 29796 blocking_queue.cpp:49] Waiting for data
I0428 20:01:46.067921 29805 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:46.068536 29796 solver.cpp:398]     Test net output #0: accuracy = 0.0938
I0428 20:01:46.068560 29796 solver.cpp:398]     Test net output #1: loss = 2.33541 (* 1 = 2.33541 loss)
I0428 20:01:46.072414 29796 solver.cpp:219] Iteration 0 (-3.99091e-31 iter/s, 0.0824085s/100 iters), loss = 2.33642
I0428 20:01:46.072441 29796 solver.cpp:238]     Train net output #0: loss = 2.33642 (* 1 = 2.33642 loss)
I0428 20:01:46.072474 29796 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:46.186560 29796 solver.cpp:219] Iteration 100 (876.374 iter/s, 0.114107s/100 iters), loss = 1.04575
I0428 20:01:46.186604 29796 solver.cpp:238]     Train net output #0: loss = 1.04575 (* 1 = 1.04575 loss)
I0428 20:01:46.186630 29796 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:46.299754 29796 solver.cpp:219] Iteration 200 (883.871 iter/s, 0.113139s/100 iters), loss = 0.365006
I0428 20:01:46.299783 29796 solver.cpp:238]     Train net output #0: loss = 0.365006 (* 1 = 0.365006 loss)
I0428 20:01:46.299808 29796 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:46.413904 29796 solver.cpp:219] Iteration 300 (876.344 iter/s, 0.11411s/100 iters), loss = 0.251277
I0428 20:01:46.413947 29796 solver.cpp:238]     Train net output #0: loss = 0.251277 (* 1 = 0.251277 loss)
I0428 20:01:46.413970 29796 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:46.527801 29796 solver.cpp:219] Iteration 400 (878.401 iter/s, 0.113843s/100 iters), loss = 0.12253
I0428 20:01:46.527832 29796 solver.cpp:238]     Train net output #0: loss = 0.12253 (* 1 = 0.12253 loss)
I0428 20:01:46.527854 29796 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:46.642271 29796 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:46.696964 29805 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:46.697597 29796 solver.cpp:398]     Test net output #0: accuracy = 0.9534
I0428 20:01:46.697620 29796 solver.cpp:398]     Test net output #1: loss = 0.160683 (* 1 = 0.160683 loss)
I0428 20:01:46.698832 29796 solver.cpp:219] Iteration 500 (584.838 iter/s, 0.170988s/100 iters), loss = 0.0787979
I0428 20:01:46.698879 29796 solver.cpp:238]     Train net output #0: loss = 0.0787978 (* 1 = 0.0787978 loss)
I0428 20:01:46.698889 29796 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:46.814657 29796 solver.cpp:219] Iteration 600 (863.794 iter/s, 0.115768s/100 iters), loss = 0.104279
I0428 20:01:46.814702 29796 solver.cpp:238]     Train net output #0: loss = 0.104279 (* 1 = 0.104279 loss)
I0428 20:01:46.814710 29796 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:46.920648 29796 solver.cpp:219] Iteration 700 (943.951 iter/s, 0.105938s/100 iters), loss = 0.152543
I0428 20:01:46.920689 29796 solver.cpp:238]     Train net output #0: loss = 0.152542 (* 1 = 0.152542 loss)
I0428 20:01:46.920696 29796 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:47.025027 29796 solver.cpp:219] Iteration 800 (958.363 iter/s, 0.104345s/100 iters), loss = 0.311608
I0428 20:01:47.025069 29796 solver.cpp:238]     Train net output #0: loss = 0.311608 (* 1 = 0.311608 loss)
I0428 20:01:47.025076 29796 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:47.136221 29796 solver.cpp:219] Iteration 900 (899.751 iter/s, 0.111142s/100 iters), loss = 0.155757
I0428 20:01:47.136262 29796 solver.cpp:238]     Train net output #0: loss = 0.155757 (* 1 = 0.155757 loss)
I0428 20:01:47.136268 29796 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:47.173724 29804 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:47.243513 29796 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:47.244696 29796 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:47.245363 29796 solver.cpp:311] Iteration 1000, loss = 0.120576
I0428 20:01:47.245379 29796 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:47.321204 29805 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:47.321738 29796 solver.cpp:398]     Test net output #0: accuracy = 0.9602
I0428 20:01:47.321756 29796 solver.cpp:398]     Test net output #1: loss = 0.123101 (* 1 = 0.123101 loss)
I0428 20:01:47.321761 29796 solver.cpp:316] Optimization Done.
I0428 20:01:47.321765 29796 caffe.cpp:259] Optimization Done.
