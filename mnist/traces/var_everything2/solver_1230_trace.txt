I0428 20:14:46.366996 32747 caffe.cpp:218] Using GPUs 0
I0428 20:14:46.403295 32747 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:46.911312 32747 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1230.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:46.911450 32747 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1230.prototxt
I0428 20:14:46.911854 32747 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:46.911872 32747 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:46.911969 32747 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:46.912044 32747 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:46.912143 32747 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:46.912166 32747 net.cpp:86] Creating Layer mnist
I0428 20:14:46.912174 32747 net.cpp:382] mnist -> data
I0428 20:14:46.912196 32747 net.cpp:382] mnist -> label
I0428 20:14:46.913298 32747 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:46.915771 32747 net.cpp:124] Setting up mnist
I0428 20:14:46.915787 32747 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:46.915793 32747 net.cpp:131] Top shape: 64 (64)
I0428 20:14:46.915797 32747 net.cpp:139] Memory required for data: 200960
I0428 20:14:46.915804 32747 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:46.915820 32747 net.cpp:86] Creating Layer conv0
I0428 20:14:46.915840 32747 net.cpp:408] conv0 <- data
I0428 20:14:46.915853 32747 net.cpp:382] conv0 -> conv0
I0428 20:14:47.193922 32747 net.cpp:124] Setting up conv0
I0428 20:14:47.193964 32747 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:47.193969 32747 net.cpp:139] Memory required for data: 7573760
I0428 20:14:47.193982 32747 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:47.193995 32747 net.cpp:86] Creating Layer pool0
I0428 20:14:47.194000 32747 net.cpp:408] pool0 <- conv0
I0428 20:14:47.194005 32747 net.cpp:382] pool0 -> pool0
I0428 20:14:47.194049 32747 net.cpp:124] Setting up pool0
I0428 20:14:47.194056 32747 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:47.194057 32747 net.cpp:139] Memory required for data: 9416960
I0428 20:14:47.194061 32747 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:47.194070 32747 net.cpp:86] Creating Layer conv1
I0428 20:14:47.194073 32747 net.cpp:408] conv1 <- pool0
I0428 20:14:47.194078 32747 net.cpp:382] conv1 -> conv1
I0428 20:14:47.195857 32747 net.cpp:124] Setting up conv1
I0428 20:14:47.195870 32747 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:47.195873 32747 net.cpp:139] Memory required for data: 9449728
I0428 20:14:47.195883 32747 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:47.195904 32747 net.cpp:86] Creating Layer pool1
I0428 20:14:47.195909 32747 net.cpp:408] pool1 <- conv1
I0428 20:14:47.195912 32747 net.cpp:382] pool1 -> pool1
I0428 20:14:47.195964 32747 net.cpp:124] Setting up pool1
I0428 20:14:47.195969 32747 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:47.195972 32747 net.cpp:139] Memory required for data: 9457920
I0428 20:14:47.195976 32747 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:47.195982 32747 net.cpp:86] Creating Layer ip1
I0428 20:14:47.195986 32747 net.cpp:408] ip1 <- pool1
I0428 20:14:47.195991 32747 net.cpp:382] ip1 -> ip1
I0428 20:14:47.196094 32747 net.cpp:124] Setting up ip1
I0428 20:14:47.196100 32747 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:47.196104 32747 net.cpp:139] Memory required for data: 9464320
I0428 20:14:47.196110 32747 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:47.196116 32747 net.cpp:86] Creating Layer relu1
I0428 20:14:47.196120 32747 net.cpp:408] relu1 <- ip1
I0428 20:14:47.196125 32747 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:47.196326 32747 net.cpp:124] Setting up relu1
I0428 20:14:47.196334 32747 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:47.196337 32747 net.cpp:139] Memory required for data: 9470720
I0428 20:14:47.196341 32747 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:47.196346 32747 net.cpp:86] Creating Layer ip2
I0428 20:14:47.196348 32747 net.cpp:408] ip2 <- ip1
I0428 20:14:47.196353 32747 net.cpp:382] ip2 -> ip2
I0428 20:14:47.196437 32747 net.cpp:124] Setting up ip2
I0428 20:14:47.196444 32747 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:47.196446 32747 net.cpp:139] Memory required for data: 9473280
I0428 20:14:47.196451 32747 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:47.196456 32747 net.cpp:86] Creating Layer relu2
I0428 20:14:47.196460 32747 net.cpp:408] relu2 <- ip2
I0428 20:14:47.196463 32747 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:47.197244 32747 net.cpp:124] Setting up relu2
I0428 20:14:47.197257 32747 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:47.197260 32747 net.cpp:139] Memory required for data: 9475840
I0428 20:14:47.197264 32747 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:47.197270 32747 net.cpp:86] Creating Layer ip3
I0428 20:14:47.197273 32747 net.cpp:408] ip3 <- ip2
I0428 20:14:47.197278 32747 net.cpp:382] ip3 -> ip3
I0428 20:14:47.197366 32747 net.cpp:124] Setting up ip3
I0428 20:14:47.197373 32747 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:47.197376 32747 net.cpp:139] Memory required for data: 9478400
I0428 20:14:47.197382 32747 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:47.197387 32747 net.cpp:86] Creating Layer relu3
I0428 20:14:47.197391 32747 net.cpp:408] relu3 <- ip3
I0428 20:14:47.197394 32747 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:47.197543 32747 net.cpp:124] Setting up relu3
I0428 20:14:47.197551 32747 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:47.197554 32747 net.cpp:139] Memory required for data: 9480960
I0428 20:14:47.197557 32747 layer_factory.hpp:77] Creating layer loss
I0428 20:14:47.197562 32747 net.cpp:86] Creating Layer loss
I0428 20:14:47.197566 32747 net.cpp:408] loss <- ip3
I0428 20:14:47.197569 32747 net.cpp:408] loss <- label
I0428 20:14:47.197574 32747 net.cpp:382] loss -> loss
I0428 20:14:47.197587 32747 layer_factory.hpp:77] Creating layer loss
I0428 20:14:47.197788 32747 net.cpp:124] Setting up loss
I0428 20:14:47.197796 32747 net.cpp:131] Top shape: (1)
I0428 20:14:47.197799 32747 net.cpp:134]     with loss weight 1
I0428 20:14:47.197813 32747 net.cpp:139] Memory required for data: 9480964
I0428 20:14:47.197816 32747 net.cpp:200] loss needs backward computation.
I0428 20:14:47.197819 32747 net.cpp:200] relu3 needs backward computation.
I0428 20:14:47.197823 32747 net.cpp:200] ip3 needs backward computation.
I0428 20:14:47.197825 32747 net.cpp:200] relu2 needs backward computation.
I0428 20:14:47.197827 32747 net.cpp:200] ip2 needs backward computation.
I0428 20:14:47.197830 32747 net.cpp:200] relu1 needs backward computation.
I0428 20:14:47.197832 32747 net.cpp:200] ip1 needs backward computation.
I0428 20:14:47.197835 32747 net.cpp:200] pool1 needs backward computation.
I0428 20:14:47.197839 32747 net.cpp:200] conv1 needs backward computation.
I0428 20:14:47.197840 32747 net.cpp:200] pool0 needs backward computation.
I0428 20:14:47.197844 32747 net.cpp:200] conv0 needs backward computation.
I0428 20:14:47.197846 32747 net.cpp:202] mnist does not need backward computation.
I0428 20:14:47.197849 32747 net.cpp:244] This network produces output loss
I0428 20:14:47.197857 32747 net.cpp:257] Network initialization done.
I0428 20:14:47.198156 32747 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1230.prototxt
I0428 20:14:47.198181 32747 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:47.198298 32747 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:47.198376 32747 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:47.198420 32747 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:47.198431 32747 net.cpp:86] Creating Layer mnist
I0428 20:14:47.198436 32747 net.cpp:382] mnist -> data
I0428 20:14:47.198444 32747 net.cpp:382] mnist -> label
I0428 20:14:47.198526 32747 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:47.200556 32747 net.cpp:124] Setting up mnist
I0428 20:14:47.200598 32747 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:47.200603 32747 net.cpp:131] Top shape: 100 (100)
I0428 20:14:47.200605 32747 net.cpp:139] Memory required for data: 314000
I0428 20:14:47.200609 32747 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:47.200615 32747 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:47.200619 32747 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:47.200623 32747 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:47.200629 32747 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:47.200681 32747 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:47.200686 32747 net.cpp:131] Top shape: 100 (100)
I0428 20:14:47.200690 32747 net.cpp:131] Top shape: 100 (100)
I0428 20:14:47.200692 32747 net.cpp:139] Memory required for data: 314800
I0428 20:14:47.200695 32747 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:47.200703 32747 net.cpp:86] Creating Layer conv0
I0428 20:14:47.200706 32747 net.cpp:408] conv0 <- data
I0428 20:14:47.200711 32747 net.cpp:382] conv0 -> conv0
I0428 20:14:47.202527 32747 net.cpp:124] Setting up conv0
I0428 20:14:47.202541 32747 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:47.202544 32747 net.cpp:139] Memory required for data: 11834800
I0428 20:14:47.202553 32747 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:47.202559 32747 net.cpp:86] Creating Layer pool0
I0428 20:14:47.202564 32747 net.cpp:408] pool0 <- conv0
I0428 20:14:47.202569 32747 net.cpp:382] pool0 -> pool0
I0428 20:14:47.202601 32747 net.cpp:124] Setting up pool0
I0428 20:14:47.202615 32747 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:47.202617 32747 net.cpp:139] Memory required for data: 14714800
I0428 20:14:47.202620 32747 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:47.202628 32747 net.cpp:86] Creating Layer conv1
I0428 20:14:47.202631 32747 net.cpp:408] conv1 <- pool0
I0428 20:14:47.202636 32747 net.cpp:382] conv1 -> conv1
I0428 20:14:47.204016 32747 net.cpp:124] Setting up conv1
I0428 20:14:47.204031 32747 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:47.204035 32747 net.cpp:139] Memory required for data: 14766000
I0428 20:14:47.204042 32747 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:47.204048 32747 net.cpp:86] Creating Layer pool1
I0428 20:14:47.204052 32747 net.cpp:408] pool1 <- conv1
I0428 20:14:47.204057 32747 net.cpp:382] pool1 -> pool1
I0428 20:14:47.204092 32747 net.cpp:124] Setting up pool1
I0428 20:14:47.204097 32747 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:47.204099 32747 net.cpp:139] Memory required for data: 14778800
I0428 20:14:47.204102 32747 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:47.204108 32747 net.cpp:86] Creating Layer ip1
I0428 20:14:47.204111 32747 net.cpp:408] ip1 <- pool1
I0428 20:14:47.204115 32747 net.cpp:382] ip1 -> ip1
I0428 20:14:47.204205 32747 net.cpp:124] Setting up ip1
I0428 20:14:47.204213 32747 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:47.204226 32747 net.cpp:139] Memory required for data: 14788800
I0428 20:14:47.204233 32747 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:47.204239 32747 net.cpp:86] Creating Layer relu1
I0428 20:14:47.204242 32747 net.cpp:408] relu1 <- ip1
I0428 20:14:47.204254 32747 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:47.204413 32747 net.cpp:124] Setting up relu1
I0428 20:14:47.204422 32747 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:47.204426 32747 net.cpp:139] Memory required for data: 14798800
I0428 20:14:47.204437 32747 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:47.204442 32747 net.cpp:86] Creating Layer ip2
I0428 20:14:47.204447 32747 net.cpp:408] ip2 <- ip1
I0428 20:14:47.204459 32747 net.cpp:382] ip2 -> ip2
I0428 20:14:47.204555 32747 net.cpp:124] Setting up ip2
I0428 20:14:47.204561 32747 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:47.204565 32747 net.cpp:139] Memory required for data: 14802800
I0428 20:14:47.204569 32747 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:47.204574 32747 net.cpp:86] Creating Layer relu2
I0428 20:14:47.204578 32747 net.cpp:408] relu2 <- ip2
I0428 20:14:47.204581 32747 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:47.204740 32747 net.cpp:124] Setting up relu2
I0428 20:14:47.204747 32747 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:47.204751 32747 net.cpp:139] Memory required for data: 14806800
I0428 20:14:47.204753 32747 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:47.204758 32747 net.cpp:86] Creating Layer ip3
I0428 20:14:47.204761 32747 net.cpp:408] ip3 <- ip2
I0428 20:14:47.204766 32747 net.cpp:382] ip3 -> ip3
I0428 20:14:47.204888 32747 net.cpp:124] Setting up ip3
I0428 20:14:47.204896 32747 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:47.204900 32747 net.cpp:139] Memory required for data: 14810800
I0428 20:14:47.204906 32747 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:47.204911 32747 net.cpp:86] Creating Layer relu3
I0428 20:14:47.204915 32747 net.cpp:408] relu3 <- ip3
I0428 20:14:47.204918 32747 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:47.205710 32747 net.cpp:124] Setting up relu3
I0428 20:14:47.205721 32747 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:47.205740 32747 net.cpp:139] Memory required for data: 14814800
I0428 20:14:47.205744 32747 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:14:47.205749 32747 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:14:47.205752 32747 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:14:47.205759 32747 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:14:47.205765 32747 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:14:47.205803 32747 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:14:47.205807 32747 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:47.205811 32747 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:47.205814 32747 net.cpp:139] Memory required for data: 14822800
I0428 20:14:47.205816 32747 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:47.205821 32747 net.cpp:86] Creating Layer accuracy
I0428 20:14:47.205826 32747 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:14:47.205829 32747 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:47.205833 32747 net.cpp:382] accuracy -> accuracy
I0428 20:14:47.205840 32747 net.cpp:124] Setting up accuracy
I0428 20:14:47.205844 32747 net.cpp:131] Top shape: (1)
I0428 20:14:47.205847 32747 net.cpp:139] Memory required for data: 14822804
I0428 20:14:47.205850 32747 layer_factory.hpp:77] Creating layer loss
I0428 20:14:47.205854 32747 net.cpp:86] Creating Layer loss
I0428 20:14:47.205857 32747 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:14:47.205860 32747 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:47.205865 32747 net.cpp:382] loss -> loss
I0428 20:14:47.205871 32747 layer_factory.hpp:77] Creating layer loss
I0428 20:14:47.206094 32747 net.cpp:124] Setting up loss
I0428 20:14:47.206101 32747 net.cpp:131] Top shape: (1)
I0428 20:14:47.206104 32747 net.cpp:134]     with loss weight 1
I0428 20:14:47.206121 32747 net.cpp:139] Memory required for data: 14822808
I0428 20:14:47.206125 32747 net.cpp:200] loss needs backward computation.
I0428 20:14:47.206128 32747 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:47.206132 32747 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:14:47.206135 32747 net.cpp:200] relu3 needs backward computation.
I0428 20:14:47.206138 32747 net.cpp:200] ip3 needs backward computation.
I0428 20:14:47.206141 32747 net.cpp:200] relu2 needs backward computation.
I0428 20:14:47.206145 32747 net.cpp:200] ip2 needs backward computation.
I0428 20:14:47.206147 32747 net.cpp:200] relu1 needs backward computation.
I0428 20:14:47.206151 32747 net.cpp:200] ip1 needs backward computation.
I0428 20:14:47.206153 32747 net.cpp:200] pool1 needs backward computation.
I0428 20:14:47.206156 32747 net.cpp:200] conv1 needs backward computation.
I0428 20:14:47.206159 32747 net.cpp:200] pool0 needs backward computation.
I0428 20:14:47.206162 32747 net.cpp:200] conv0 needs backward computation.
I0428 20:14:47.206166 32747 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:47.206169 32747 net.cpp:202] mnist does not need backward computation.
I0428 20:14:47.206172 32747 net.cpp:244] This network produces output accuracy
I0428 20:14:47.206183 32747 net.cpp:244] This network produces output loss
I0428 20:14:47.206197 32747 net.cpp:257] Network initialization done.
I0428 20:14:47.206238 32747 solver.cpp:56] Solver scaffolding done.
I0428 20:14:47.206549 32747 caffe.cpp:248] Starting Optimization
I0428 20:14:47.206554 32747 solver.cpp:273] Solving LeNet
I0428 20:14:47.206557 32747 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:47.207351 32747 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:47.213032 32747 blocking_queue.cpp:49] Waiting for data
I0428 20:14:47.283840 32754 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:47.284596 32747 solver.cpp:398]     Test net output #0: accuracy = 0.0386
I0428 20:14:47.284629 32747 solver.cpp:398]     Test net output #1: loss = 2.30332 (* 1 = 2.30332 loss)
I0428 20:14:47.288748 32747 solver.cpp:219] Iteration 0 (0 iter/s, 0.0821494s/100 iters), loss = 2.29446
I0428 20:14:47.288805 32747 solver.cpp:238]     Train net output #0: loss = 2.29446 (* 1 = 2.29446 loss)
I0428 20:14:47.288823 32747 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:47.421640 32747 solver.cpp:219] Iteration 100 (752.818 iter/s, 0.132834s/100 iters), loss = 0.93956
I0428 20:14:47.421694 32747 solver.cpp:238]     Train net output #0: loss = 0.93956 (* 1 = 0.93956 loss)
I0428 20:14:47.421701 32747 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:47.545684 32747 solver.cpp:219] Iteration 200 (806.583 iter/s, 0.12398s/100 iters), loss = 0.812414
I0428 20:14:47.545742 32747 solver.cpp:238]     Train net output #0: loss = 0.812414 (* 1 = 0.812414 loss)
I0428 20:14:47.545748 32747 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:47.659274 32747 solver.cpp:219] Iteration 300 (880.77 iter/s, 0.113537s/100 iters), loss = 0.327349
I0428 20:14:47.659315 32747 solver.cpp:238]     Train net output #0: loss = 0.327349 (* 1 = 0.327349 loss)
I0428 20:14:47.659322 32747 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:47.771801 32747 solver.cpp:219] Iteration 400 (889.078 iter/s, 0.112476s/100 iters), loss = 0.207647
I0428 20:14:47.771841 32747 solver.cpp:238]     Train net output #0: loss = 0.207647 (* 1 = 0.207647 loss)
I0428 20:14:47.771847 32747 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:47.883810 32747 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:47.947227 32754 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:47.948832 32747 solver.cpp:398]     Test net output #0: accuracy = 0.9173
I0428 20:14:47.948851 32747 solver.cpp:398]     Test net output #1: loss = 0.276316 (* 1 = 0.276316 loss)
I0428 20:14:47.949923 32747 solver.cpp:219] Iteration 500 (561.536 iter/s, 0.178083s/100 iters), loss = 0.253056
I0428 20:14:47.949973 32747 solver.cpp:238]     Train net output #0: loss = 0.253056 (* 1 = 0.253056 loss)
I0428 20:14:47.949980 32747 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:48.081962 32747 solver.cpp:219] Iteration 600 (757.618 iter/s, 0.131993s/100 iters), loss = 0.230445
I0428 20:14:48.082001 32747 solver.cpp:238]     Train net output #0: loss = 0.230445 (* 1 = 0.230445 loss)
I0428 20:14:48.082007 32747 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:48.206631 32747 solver.cpp:219] Iteration 700 (802.449 iter/s, 0.124619s/100 iters), loss = 0.341672
I0428 20:14:48.206671 32747 solver.cpp:238]     Train net output #0: loss = 0.341672 (* 1 = 0.341672 loss)
I0428 20:14:48.206677 32747 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:48.319954 32747 solver.cpp:219] Iteration 800 (882.712 iter/s, 0.113287s/100 iters), loss = 0.375832
I0428 20:14:48.319993 32747 solver.cpp:238]     Train net output #0: loss = 0.375832 (* 1 = 0.375832 loss)
I0428 20:14:48.320000 32747 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:48.432293 32747 solver.cpp:219] Iteration 900 (890.562 iter/s, 0.112289s/100 iters), loss = 0.441964
I0428 20:14:48.432334 32747 solver.cpp:238]     Train net output #0: loss = 0.441964 (* 1 = 0.441964 loss)
I0428 20:14:48.432340 32747 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:48.473709 32753 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:48.547446 32747 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:48.548415 32747 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:48.549129 32747 solver.cpp:311] Iteration 1000, loss = 0.0961264
I0428 20:14:48.549161 32747 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:48.626953 32754 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:48.627673 32747 solver.cpp:398]     Test net output #0: accuracy = 0.9427
I0428 20:14:48.627710 32747 solver.cpp:398]     Test net output #1: loss = 0.187277 (* 1 = 0.187277 loss)
I0428 20:14:48.627715 32747 solver.cpp:316] Optimization Done.
I0428 20:14:48.627717 32747 caffe.cpp:259] Optimization Done.
