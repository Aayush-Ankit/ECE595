I0428 19:28:55.731927 21869 caffe.cpp:218] Using GPUs 0
I0428 19:28:55.770679 21869 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:28:56.227464 21869 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test42.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:28:56.227599 21869 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test42.prototxt
I0428 19:28:56.227885 21869 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:28:56.227898 21869 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:28:56.227962 21869 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:28:56.228018 21869 layer_factory.hpp:77] Creating layer mnist
I0428 19:28:56.228102 21869 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:28:56.228122 21869 net.cpp:86] Creating Layer mnist
I0428 19:28:56.228128 21869 net.cpp:382] mnist -> data
I0428 19:28:56.228150 21869 net.cpp:382] mnist -> label
I0428 19:28:56.229192 21869 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:28:56.231369 21869 net.cpp:124] Setting up mnist
I0428 19:28:56.231400 21869 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:28:56.231405 21869 net.cpp:131] Top shape: 64 (64)
I0428 19:28:56.231408 21869 net.cpp:139] Memory required for data: 200960
I0428 19:28:56.231415 21869 layer_factory.hpp:77] Creating layer conv0
I0428 19:28:56.231472 21869 net.cpp:86] Creating Layer conv0
I0428 19:28:56.231494 21869 net.cpp:408] conv0 <- data
I0428 19:28:56.231505 21869 net.cpp:382] conv0 -> conv0
I0428 19:28:56.466859 21869 net.cpp:124] Setting up conv0
I0428 19:28:56.466902 21869 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:28:56.466907 21869 net.cpp:139] Memory required for data: 495872
I0428 19:28:56.466922 21869 layer_factory.hpp:77] Creating layer pool0
I0428 19:28:56.466934 21869 net.cpp:86] Creating Layer pool0
I0428 19:28:56.466939 21869 net.cpp:408] pool0 <- conv0
I0428 19:28:56.466960 21869 net.cpp:382] pool0 -> pool0
I0428 19:28:56.467006 21869 net.cpp:124] Setting up pool0
I0428 19:28:56.467012 21869 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:28:56.467015 21869 net.cpp:139] Memory required for data: 569600
I0428 19:28:56.467033 21869 layer_factory.hpp:77] Creating layer ip1
I0428 19:28:56.467042 21869 net.cpp:86] Creating Layer ip1
I0428 19:28:56.467046 21869 net.cpp:408] ip1 <- pool0
I0428 19:28:56.467051 21869 net.cpp:382] ip1 -> ip1
I0428 19:28:56.468050 21869 net.cpp:124] Setting up ip1
I0428 19:28:56.468063 21869 net.cpp:131] Top shape: 64 10 (640)
I0428 19:28:56.468085 21869 net.cpp:139] Memory required for data: 572160
I0428 19:28:56.468093 21869 layer_factory.hpp:77] Creating layer relu1
I0428 19:28:56.468102 21869 net.cpp:86] Creating Layer relu1
I0428 19:28:56.468106 21869 net.cpp:408] relu1 <- ip1
I0428 19:28:56.468111 21869 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:28:56.468302 21869 net.cpp:124] Setting up relu1
I0428 19:28:56.468310 21869 net.cpp:131] Top shape: 64 10 (640)
I0428 19:28:56.468313 21869 net.cpp:139] Memory required for data: 574720
I0428 19:28:56.468317 21869 layer_factory.hpp:77] Creating layer ip2
I0428 19:28:56.468339 21869 net.cpp:86] Creating Layer ip2
I0428 19:28:56.468343 21869 net.cpp:408] ip2 <- ip1
I0428 19:28:56.468348 21869 net.cpp:382] ip2 -> ip2
I0428 19:28:56.468456 21869 net.cpp:124] Setting up ip2
I0428 19:28:56.468462 21869 net.cpp:131] Top shape: 64 10 (640)
I0428 19:28:56.468466 21869 net.cpp:139] Memory required for data: 577280
I0428 19:28:56.468473 21869 layer_factory.hpp:77] Creating layer relu2
I0428 19:28:56.468479 21869 net.cpp:86] Creating Layer relu2
I0428 19:28:56.468482 21869 net.cpp:408] relu2 <- ip2
I0428 19:28:56.468487 21869 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:28:56.469341 21869 net.cpp:124] Setting up relu2
I0428 19:28:56.469353 21869 net.cpp:131] Top shape: 64 10 (640)
I0428 19:28:56.469373 21869 net.cpp:139] Memory required for data: 579840
I0428 19:28:56.469377 21869 layer_factory.hpp:77] Creating layer loss
I0428 19:28:56.469384 21869 net.cpp:86] Creating Layer loss
I0428 19:28:56.469388 21869 net.cpp:408] loss <- ip2
I0428 19:28:56.469393 21869 net.cpp:408] loss <- label
I0428 19:28:56.469398 21869 net.cpp:382] loss -> loss
I0428 19:28:56.469415 21869 layer_factory.hpp:77] Creating layer loss
I0428 19:28:56.469671 21869 net.cpp:124] Setting up loss
I0428 19:28:56.469681 21869 net.cpp:131] Top shape: (1)
I0428 19:28:56.469686 21869 net.cpp:134]     with loss weight 1
I0428 19:28:56.469699 21869 net.cpp:139] Memory required for data: 579844
I0428 19:28:56.469703 21869 net.cpp:200] loss needs backward computation.
I0428 19:28:56.469707 21869 net.cpp:200] relu2 needs backward computation.
I0428 19:28:56.469710 21869 net.cpp:200] ip2 needs backward computation.
I0428 19:28:56.469714 21869 net.cpp:200] relu1 needs backward computation.
I0428 19:28:56.469717 21869 net.cpp:200] ip1 needs backward computation.
I0428 19:28:56.469720 21869 net.cpp:200] pool0 needs backward computation.
I0428 19:28:56.469724 21869 net.cpp:200] conv0 needs backward computation.
I0428 19:28:56.469728 21869 net.cpp:202] mnist does not need backward computation.
I0428 19:28:56.469732 21869 net.cpp:244] This network produces output loss
I0428 19:28:56.469739 21869 net.cpp:257] Network initialization done.
I0428 19:28:56.470017 21869 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test42.prototxt
I0428 19:28:56.470042 21869 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:28:56.470114 21869 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:28:56.470183 21869 layer_factory.hpp:77] Creating layer mnist
I0428 19:28:56.470227 21869 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:28:56.470242 21869 net.cpp:86] Creating Layer mnist
I0428 19:28:56.470247 21869 net.cpp:382] mnist -> data
I0428 19:28:56.470255 21869 net.cpp:382] mnist -> label
I0428 19:28:56.470337 21869 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:28:56.472357 21869 net.cpp:124] Setting up mnist
I0428 19:28:56.472386 21869 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:28:56.472393 21869 net.cpp:131] Top shape: 100 (100)
I0428 19:28:56.472395 21869 net.cpp:139] Memory required for data: 314000
I0428 19:28:56.472399 21869 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:28:56.472406 21869 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:28:56.472410 21869 net.cpp:408] label_mnist_1_split <- label
I0428 19:28:56.472415 21869 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:28:56.472422 21869 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:28:56.472473 21869 net.cpp:124] Setting up label_mnist_1_split
I0428 19:28:56.472479 21869 net.cpp:131] Top shape: 100 (100)
I0428 19:28:56.472483 21869 net.cpp:131] Top shape: 100 (100)
I0428 19:28:56.472486 21869 net.cpp:139] Memory required for data: 314800
I0428 19:28:56.472489 21869 layer_factory.hpp:77] Creating layer conv0
I0428 19:28:56.472498 21869 net.cpp:86] Creating Layer conv0
I0428 19:28:56.472501 21869 net.cpp:408] conv0 <- data
I0428 19:28:56.472506 21869 net.cpp:382] conv0 -> conv0
I0428 19:28:56.474366 21869 net.cpp:124] Setting up conv0
I0428 19:28:56.474380 21869 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:28:56.474385 21869 net.cpp:139] Memory required for data: 775600
I0428 19:28:56.474393 21869 layer_factory.hpp:77] Creating layer pool0
I0428 19:28:56.474400 21869 net.cpp:86] Creating Layer pool0
I0428 19:28:56.474403 21869 net.cpp:408] pool0 <- conv0
I0428 19:28:56.474408 21869 net.cpp:382] pool0 -> pool0
I0428 19:28:56.474442 21869 net.cpp:124] Setting up pool0
I0428 19:28:56.474447 21869 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:28:56.474450 21869 net.cpp:139] Memory required for data: 890800
I0428 19:28:56.474453 21869 layer_factory.hpp:77] Creating layer ip1
I0428 19:28:56.474460 21869 net.cpp:86] Creating Layer ip1
I0428 19:28:56.474463 21869 net.cpp:408] ip1 <- pool0
I0428 19:28:56.474468 21869 net.cpp:382] ip1 -> ip1
I0428 19:28:56.474570 21869 net.cpp:124] Setting up ip1
I0428 19:28:56.474576 21869 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:56.474580 21869 net.cpp:139] Memory required for data: 894800
I0428 19:28:56.474586 21869 layer_factory.hpp:77] Creating layer relu1
I0428 19:28:56.474591 21869 net.cpp:86] Creating Layer relu1
I0428 19:28:56.474594 21869 net.cpp:408] relu1 <- ip1
I0428 19:28:56.474598 21869 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:28:56.474762 21869 net.cpp:124] Setting up relu1
I0428 19:28:56.474771 21869 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:56.474774 21869 net.cpp:139] Memory required for data: 898800
I0428 19:28:56.474803 21869 layer_factory.hpp:77] Creating layer ip2
I0428 19:28:56.474809 21869 net.cpp:86] Creating Layer ip2
I0428 19:28:56.474813 21869 net.cpp:408] ip2 <- ip1
I0428 19:28:56.474818 21869 net.cpp:382] ip2 -> ip2
I0428 19:28:56.474925 21869 net.cpp:124] Setting up ip2
I0428 19:28:56.474949 21869 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:56.474952 21869 net.cpp:139] Memory required for data: 902800
I0428 19:28:56.474961 21869 layer_factory.hpp:77] Creating layer relu2
I0428 19:28:56.474967 21869 net.cpp:86] Creating Layer relu2
I0428 19:28:56.474969 21869 net.cpp:408] relu2 <- ip2
I0428 19:28:56.474974 21869 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:28:56.475150 21869 net.cpp:124] Setting up relu2
I0428 19:28:56.475173 21869 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:56.475178 21869 net.cpp:139] Memory required for data: 906800
I0428 19:28:56.475198 21869 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:28:56.475204 21869 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:28:56.475208 21869 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:28:56.475213 21869 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:28:56.475219 21869 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:28:56.475319 21869 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:28:56.475327 21869 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:56.475338 21869 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:56.475342 21869 net.cpp:139] Memory required for data: 914800
I0428 19:28:56.475344 21869 layer_factory.hpp:77] Creating layer accuracy
I0428 19:28:56.475350 21869 net.cpp:86] Creating Layer accuracy
I0428 19:28:56.475353 21869 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:28:56.475358 21869 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:28:56.475363 21869 net.cpp:382] accuracy -> accuracy
I0428 19:28:56.475370 21869 net.cpp:124] Setting up accuracy
I0428 19:28:56.475374 21869 net.cpp:131] Top shape: (1)
I0428 19:28:56.475378 21869 net.cpp:139] Memory required for data: 914804
I0428 19:28:56.475381 21869 layer_factory.hpp:77] Creating layer loss
I0428 19:28:56.475385 21869 net.cpp:86] Creating Layer loss
I0428 19:28:56.475389 21869 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:28:56.475392 21869 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:28:56.475397 21869 net.cpp:382] loss -> loss
I0428 19:28:56.475404 21869 layer_factory.hpp:77] Creating layer loss
I0428 19:28:56.476387 21869 net.cpp:124] Setting up loss
I0428 19:28:56.476399 21869 net.cpp:131] Top shape: (1)
I0428 19:28:56.476402 21869 net.cpp:134]     with loss weight 1
I0428 19:28:56.476409 21869 net.cpp:139] Memory required for data: 914808
I0428 19:28:56.476413 21869 net.cpp:200] loss needs backward computation.
I0428 19:28:56.476424 21869 net.cpp:202] accuracy does not need backward computation.
I0428 19:28:56.476428 21869 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:28:56.476431 21869 net.cpp:200] relu2 needs backward computation.
I0428 19:28:56.476434 21869 net.cpp:200] ip2 needs backward computation.
I0428 19:28:56.476444 21869 net.cpp:200] relu1 needs backward computation.
I0428 19:28:56.476446 21869 net.cpp:200] ip1 needs backward computation.
I0428 19:28:56.476449 21869 net.cpp:200] pool0 needs backward computation.
I0428 19:28:56.476454 21869 net.cpp:200] conv0 needs backward computation.
I0428 19:28:56.476462 21869 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:28:56.476466 21869 net.cpp:202] mnist does not need backward computation.
I0428 19:28:56.476469 21869 net.cpp:244] This network produces output accuracy
I0428 19:28:56.476474 21869 net.cpp:244] This network produces output loss
I0428 19:28:56.476486 21869 net.cpp:257] Network initialization done.
I0428 19:28:56.476518 21869 solver.cpp:56] Solver scaffolding done.
I0428 19:28:56.476729 21869 caffe.cpp:248] Starting Optimization
I0428 19:28:56.476735 21869 solver.cpp:273] Solving LeNet
I0428 19:28:56.476738 21869 solver.cpp:274] Learning Rate Policy: inv
I0428 19:28:56.477602 21869 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:28:56.477738 21869 blocking_queue.cpp:49] Waiting for data
I0428 19:28:56.553452 21884 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:56.553838 21869 solver.cpp:398]     Test net output #0: accuracy = 0.1074
I0428 19:28:56.553856 21869 solver.cpp:398]     Test net output #1: loss = 2.29921 (* 1 = 2.29921 loss)
I0428 19:28:56.555387 21869 solver.cpp:219] Iteration 0 (-9.18432e-31 iter/s, 0.0786011s/100 iters), loss = 2.25422
I0428 19:28:56.555414 21869 solver.cpp:238]     Train net output #0: loss = 2.25422 (* 1 = 2.25422 loss)
I0428 19:28:56.555426 21869 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:28:56.611048 21869 solver.cpp:219] Iteration 100 (1797.69 iter/s, 0.0556268s/100 iters), loss = 0.825701
I0428 19:28:56.611074 21869 solver.cpp:238]     Train net output #0: loss = 0.825701 (* 1 = 0.825701 loss)
I0428 19:28:56.611096 21869 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:28:56.659813 21869 solver.cpp:219] Iteration 200 (2052.08 iter/s, 0.0487311s/100 iters), loss = 0.485437
I0428 19:28:56.659840 21869 solver.cpp:238]     Train net output #0: loss = 0.485437 (* 1 = 0.485437 loss)
I0428 19:28:56.659863 21869 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:28:56.708971 21869 solver.cpp:219] Iteration 300 (2035.61 iter/s, 0.0491253s/100 iters), loss = 0.583007
I0428 19:28:56.709023 21869 solver.cpp:238]     Train net output #0: loss = 0.583007 (* 1 = 0.583007 loss)
I0428 19:28:56.709031 21869 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:28:56.758361 21869 solver.cpp:219] Iteration 400 (2027.25 iter/s, 0.0493279s/100 iters), loss = 0.537879
I0428 19:28:56.758384 21869 solver.cpp:238]     Train net output #0: loss = 0.537879 (* 1 = 0.537879 loss)
I0428 19:28:56.758409 21869 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:28:56.806455 21869 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:28:56.881031 21884 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:56.881460 21869 solver.cpp:398]     Test net output #0: accuracy = 0.8309
I0428 19:28:56.881479 21869 solver.cpp:398]     Test net output #1: loss = 0.518848 (* 1 = 0.518848 loss)
I0428 19:28:56.882081 21869 solver.cpp:219] Iteration 500 (808.5 iter/s, 0.123686s/100 iters), loss = 0.59895
I0428 19:28:56.882119 21869 solver.cpp:238]     Train net output #0: loss = 0.59895 (* 1 = 0.59895 loss)
I0428 19:28:56.882127 21869 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:28:56.936745 21869 solver.cpp:219] Iteration 600 (1830.89 iter/s, 0.0546181s/100 iters), loss = 0.609909
I0428 19:28:56.936770 21869 solver.cpp:238]     Train net output #0: loss = 0.609909 (* 1 = 0.609909 loss)
I0428 19:28:56.936795 21869 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:28:56.983831 21869 solver.cpp:219] Iteration 700 (2125.27 iter/s, 0.0470529s/100 iters), loss = 0.671815
I0428 19:28:56.983883 21869 solver.cpp:238]     Train net output #0: loss = 0.671815 (* 1 = 0.671815 loss)
I0428 19:28:56.983891 21869 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:28:57.034044 21869 solver.cpp:219] Iteration 800 (1994 iter/s, 0.0501506s/100 iters), loss = 0.666679
I0428 19:28:57.034103 21869 solver.cpp:238]     Train net output #0: loss = 0.666679 (* 1 = 0.666679 loss)
I0428 19:28:57.034111 21869 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:28:57.083166 21869 solver.cpp:219] Iteration 900 (2038.39 iter/s, 0.0490584s/100 iters), loss = 0.736898
I0428 19:28:57.083189 21869 solver.cpp:238]     Train net output #0: loss = 0.736898 (* 1 = 0.736898 loss)
I0428 19:28:57.083194 21869 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:28:57.099841 21875 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:57.131806 21869 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:28:57.132351 21869 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:28:57.132704 21869 solver.cpp:311] Iteration 1000, loss = 0.568768
I0428 19:28:57.132720 21869 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:28:57.207404 21884 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:57.207815 21869 solver.cpp:398]     Test net output #0: accuracy = 0.8443
I0428 19:28:57.207839 21869 solver.cpp:398]     Test net output #1: loss = 0.458737 (* 1 = 0.458737 loss)
I0428 19:28:57.207844 21869 solver.cpp:316] Optimization Done.
I0428 19:28:57.207849 21869 caffe.cpp:259] Optimization Done.
