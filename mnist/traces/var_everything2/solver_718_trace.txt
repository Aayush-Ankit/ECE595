I0428 19:54:46.572080 28055 caffe.cpp:218] Using GPUs 0
I0428 19:54:46.601408 28055 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:54:47.055583 28055 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test718.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:54:47.055713 28055 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test718.prototxt
I0428 19:54:47.056035 28055 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:54:47.056051 28055 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:54:47.056130 28055 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:54:47.056195 28055 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:47.056273 28055 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:54:47.056293 28055 net.cpp:86] Creating Layer mnist
I0428 19:54:47.056300 28055 net.cpp:382] mnist -> data
I0428 19:54:47.056318 28055 net.cpp:382] mnist -> label
I0428 19:54:47.057360 28055 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:54:47.059541 28055 net.cpp:124] Setting up mnist
I0428 19:54:47.059571 28055 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:54:47.059577 28055 net.cpp:131] Top shape: 64 (64)
I0428 19:54:47.059579 28055 net.cpp:139] Memory required for data: 200960
I0428 19:54:47.059586 28055 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:47.059624 28055 net.cpp:86] Creating Layer conv0
I0428 19:54:47.059661 28055 net.cpp:408] conv0 <- data
I0428 19:54:47.059672 28055 net.cpp:382] conv0 -> conv0
I0428 19:54:47.286942 28055 net.cpp:124] Setting up conv0
I0428 19:54:47.286968 28055 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:54:47.286972 28055 net.cpp:139] Memory required for data: 938240
I0428 19:54:47.286986 28055 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:47.286998 28055 net.cpp:86] Creating Layer pool0
I0428 19:54:47.287003 28055 net.cpp:408] pool0 <- conv0
I0428 19:54:47.287008 28055 net.cpp:382] pool0 -> pool0
I0428 19:54:47.287065 28055 net.cpp:124] Setting up pool0
I0428 19:54:47.287071 28055 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:54:47.287075 28055 net.cpp:139] Memory required for data: 1122560
I0428 19:54:47.287076 28055 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:47.287086 28055 net.cpp:86] Creating Layer conv1
I0428 19:54:47.287089 28055 net.cpp:408] conv1 <- pool0
I0428 19:54:47.287093 28055 net.cpp:382] conv1 -> conv1
I0428 19:54:47.289867 28055 net.cpp:124] Setting up conv1
I0428 19:54:47.289896 28055 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:54:47.289901 28055 net.cpp:139] Memory required for data: 2760960
I0428 19:54:47.289908 28055 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:47.289916 28055 net.cpp:86] Creating Layer pool1
I0428 19:54:47.289919 28055 net.cpp:408] pool1 <- conv1
I0428 19:54:47.289924 28055 net.cpp:382] pool1 -> pool1
I0428 19:54:47.289976 28055 net.cpp:124] Setting up pool1
I0428 19:54:47.289996 28055 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:54:47.289999 28055 net.cpp:139] Memory required for data: 3170560
I0428 19:54:47.290002 28055 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:47.290009 28055 net.cpp:86] Creating Layer ip1
I0428 19:54:47.290011 28055 net.cpp:408] ip1 <- pool1
I0428 19:54:47.290015 28055 net.cpp:382] ip1 -> ip1
I0428 19:54:47.290194 28055 net.cpp:124] Setting up ip1
I0428 19:54:47.290201 28055 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:47.290205 28055 net.cpp:139] Memory required for data: 3173120
I0428 19:54:47.290211 28055 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:47.290216 28055 net.cpp:86] Creating Layer relu1
I0428 19:54:47.290220 28055 net.cpp:408] relu1 <- ip1
I0428 19:54:47.290225 28055 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:47.290377 28055 net.cpp:124] Setting up relu1
I0428 19:54:47.290386 28055 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:47.290390 28055 net.cpp:139] Memory required for data: 3175680
I0428 19:54:47.290392 28055 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:47.290397 28055 net.cpp:86] Creating Layer ip2
I0428 19:54:47.290400 28055 net.cpp:408] ip2 <- ip1
I0428 19:54:47.290405 28055 net.cpp:382] ip2 -> ip2
I0428 19:54:47.290496 28055 net.cpp:124] Setting up ip2
I0428 19:54:47.290503 28055 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:54:47.290506 28055 net.cpp:139] Memory required for data: 3182080
I0428 19:54:47.290511 28055 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:47.290516 28055 net.cpp:86] Creating Layer relu2
I0428 19:54:47.290519 28055 net.cpp:408] relu2 <- ip2
I0428 19:54:47.290524 28055 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:47.291270 28055 net.cpp:124] Setting up relu2
I0428 19:54:47.291282 28055 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:54:47.291301 28055 net.cpp:139] Memory required for data: 3188480
I0428 19:54:47.291304 28055 layer_factory.hpp:77] Creating layer ip3
I0428 19:54:47.291311 28055 net.cpp:86] Creating Layer ip3
I0428 19:54:47.291314 28055 net.cpp:408] ip3 <- ip2
I0428 19:54:47.291319 28055 net.cpp:382] ip3 -> ip3
I0428 19:54:47.291410 28055 net.cpp:124] Setting up ip3
I0428 19:54:47.291419 28055 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:47.291421 28055 net.cpp:139] Memory required for data: 3191040
I0428 19:54:47.291429 28055 layer_factory.hpp:77] Creating layer relu3
I0428 19:54:47.291434 28055 net.cpp:86] Creating Layer relu3
I0428 19:54:47.291436 28055 net.cpp:408] relu3 <- ip3
I0428 19:54:47.291440 28055 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:54:47.291596 28055 net.cpp:124] Setting up relu3
I0428 19:54:47.291604 28055 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:47.291607 28055 net.cpp:139] Memory required for data: 3193600
I0428 19:54:47.291610 28055 layer_factory.hpp:77] Creating layer loss
I0428 19:54:47.291632 28055 net.cpp:86] Creating Layer loss
I0428 19:54:47.291635 28055 net.cpp:408] loss <- ip3
I0428 19:54:47.291640 28055 net.cpp:408] loss <- label
I0428 19:54:47.291645 28055 net.cpp:382] loss -> loss
I0428 19:54:47.291662 28055 layer_factory.hpp:77] Creating layer loss
I0428 19:54:47.291887 28055 net.cpp:124] Setting up loss
I0428 19:54:47.291895 28055 net.cpp:131] Top shape: (1)
I0428 19:54:47.291898 28055 net.cpp:134]     with loss weight 1
I0428 19:54:47.291913 28055 net.cpp:139] Memory required for data: 3193604
I0428 19:54:47.291915 28055 net.cpp:200] loss needs backward computation.
I0428 19:54:47.291919 28055 net.cpp:200] relu3 needs backward computation.
I0428 19:54:47.291921 28055 net.cpp:200] ip3 needs backward computation.
I0428 19:54:47.291924 28055 net.cpp:200] relu2 needs backward computation.
I0428 19:54:47.291927 28055 net.cpp:200] ip2 needs backward computation.
I0428 19:54:47.291929 28055 net.cpp:200] relu1 needs backward computation.
I0428 19:54:47.291932 28055 net.cpp:200] ip1 needs backward computation.
I0428 19:54:47.291935 28055 net.cpp:200] pool1 needs backward computation.
I0428 19:54:47.291939 28055 net.cpp:200] conv1 needs backward computation.
I0428 19:54:47.291940 28055 net.cpp:200] pool0 needs backward computation.
I0428 19:54:47.291944 28055 net.cpp:200] conv0 needs backward computation.
I0428 19:54:47.291946 28055 net.cpp:202] mnist does not need backward computation.
I0428 19:54:47.291949 28055 net.cpp:244] This network produces output loss
I0428 19:54:47.291959 28055 net.cpp:257] Network initialization done.
I0428 19:54:47.292263 28055 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test718.prototxt
I0428 19:54:47.292295 28055 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:54:47.292398 28055 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:54:47.292477 28055 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:47.292522 28055 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:54:47.292534 28055 net.cpp:86] Creating Layer mnist
I0428 19:54:47.292539 28055 net.cpp:382] mnist -> data
I0428 19:54:47.292547 28055 net.cpp:382] mnist -> label
I0428 19:54:47.292629 28055 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:54:47.294826 28055 net.cpp:124] Setting up mnist
I0428 19:54:47.294854 28055 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:54:47.294860 28055 net.cpp:131] Top shape: 100 (100)
I0428 19:54:47.294863 28055 net.cpp:139] Memory required for data: 314000
I0428 19:54:47.294867 28055 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:54:47.294876 28055 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:54:47.294880 28055 net.cpp:408] label_mnist_1_split <- label
I0428 19:54:47.294885 28055 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:54:47.294891 28055 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:54:47.294981 28055 net.cpp:124] Setting up label_mnist_1_split
I0428 19:54:47.294988 28055 net.cpp:131] Top shape: 100 (100)
I0428 19:54:47.294992 28055 net.cpp:131] Top shape: 100 (100)
I0428 19:54:47.294996 28055 net.cpp:139] Memory required for data: 314800
I0428 19:54:47.294997 28055 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:47.295006 28055 net.cpp:86] Creating Layer conv0
I0428 19:54:47.295009 28055 net.cpp:408] conv0 <- data
I0428 19:54:47.295014 28055 net.cpp:382] conv0 -> conv0
I0428 19:54:47.296614 28055 net.cpp:124] Setting up conv0
I0428 19:54:47.296643 28055 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:54:47.296648 28055 net.cpp:139] Memory required for data: 1466800
I0428 19:54:47.296655 28055 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:47.296661 28055 net.cpp:86] Creating Layer pool0
I0428 19:54:47.296665 28055 net.cpp:408] pool0 <- conv0
I0428 19:54:47.296669 28055 net.cpp:382] pool0 -> pool0
I0428 19:54:47.296718 28055 net.cpp:124] Setting up pool0
I0428 19:54:47.296725 28055 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:54:47.296727 28055 net.cpp:139] Memory required for data: 1754800
I0428 19:54:47.296730 28055 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:47.296737 28055 net.cpp:86] Creating Layer conv1
I0428 19:54:47.296741 28055 net.cpp:408] conv1 <- pool0
I0428 19:54:47.296746 28055 net.cpp:382] conv1 -> conv1
I0428 19:54:47.298380 28055 net.cpp:124] Setting up conv1
I0428 19:54:47.298413 28055 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:54:47.298418 28055 net.cpp:139] Memory required for data: 4314800
I0428 19:54:47.298441 28055 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:47.298449 28055 net.cpp:86] Creating Layer pool1
I0428 19:54:47.298452 28055 net.cpp:408] pool1 <- conv1
I0428 19:54:47.298472 28055 net.cpp:382] pool1 -> pool1
I0428 19:54:47.298507 28055 net.cpp:124] Setting up pool1
I0428 19:54:47.298512 28055 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:54:47.298516 28055 net.cpp:139] Memory required for data: 4954800
I0428 19:54:47.298519 28055 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:47.298526 28055 net.cpp:86] Creating Layer ip1
I0428 19:54:47.298528 28055 net.cpp:408] ip1 <- pool1
I0428 19:54:47.298532 28055 net.cpp:382] ip1 -> ip1
I0428 19:54:47.298743 28055 net.cpp:124] Setting up ip1
I0428 19:54:47.298753 28055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:47.298766 28055 net.cpp:139] Memory required for data: 4958800
I0428 19:54:47.298774 28055 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:47.298779 28055 net.cpp:86] Creating Layer relu1
I0428 19:54:47.298782 28055 net.cpp:408] relu1 <- ip1
I0428 19:54:47.298787 28055 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:47.298943 28055 net.cpp:124] Setting up relu1
I0428 19:54:47.298951 28055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:47.298955 28055 net.cpp:139] Memory required for data: 4962800
I0428 19:54:47.298959 28055 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:47.298964 28055 net.cpp:86] Creating Layer ip2
I0428 19:54:47.298969 28055 net.cpp:408] ip2 <- ip1
I0428 19:54:47.298979 28055 net.cpp:382] ip2 -> ip2
I0428 19:54:47.299074 28055 net.cpp:124] Setting up ip2
I0428 19:54:47.299082 28055 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:54:47.299085 28055 net.cpp:139] Memory required for data: 4972800
I0428 19:54:47.299090 28055 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:47.299095 28055 net.cpp:86] Creating Layer relu2
I0428 19:54:47.299098 28055 net.cpp:408] relu2 <- ip2
I0428 19:54:47.299103 28055 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:47.299296 28055 net.cpp:124] Setting up relu2
I0428 19:54:47.299305 28055 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:54:47.299309 28055 net.cpp:139] Memory required for data: 4982800
I0428 19:54:47.299312 28055 layer_factory.hpp:77] Creating layer ip3
I0428 19:54:47.299317 28055 net.cpp:86] Creating Layer ip3
I0428 19:54:47.299320 28055 net.cpp:408] ip3 <- ip2
I0428 19:54:47.299326 28055 net.cpp:382] ip3 -> ip3
I0428 19:54:47.299501 28055 net.cpp:124] Setting up ip3
I0428 19:54:47.299510 28055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:47.299512 28055 net.cpp:139] Memory required for data: 4986800
I0428 19:54:47.299520 28055 layer_factory.hpp:77] Creating layer relu3
I0428 19:54:47.299525 28055 net.cpp:86] Creating Layer relu3
I0428 19:54:47.299528 28055 net.cpp:408] relu3 <- ip3
I0428 19:54:47.299532 28055 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:54:47.300313 28055 net.cpp:124] Setting up relu3
I0428 19:54:47.300325 28055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:47.300345 28055 net.cpp:139] Memory required for data: 4990800
I0428 19:54:47.300348 28055 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:54:47.300354 28055 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:54:47.300356 28055 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:54:47.300364 28055 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:54:47.300369 28055 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:54:47.300426 28055 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:54:47.300432 28055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:47.300436 28055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:47.300439 28055 net.cpp:139] Memory required for data: 4998800
I0428 19:54:47.300442 28055 layer_factory.hpp:77] Creating layer accuracy
I0428 19:54:47.300448 28055 net.cpp:86] Creating Layer accuracy
I0428 19:54:47.300451 28055 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:54:47.300456 28055 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:54:47.300460 28055 net.cpp:382] accuracy -> accuracy
I0428 19:54:47.300467 28055 net.cpp:124] Setting up accuracy
I0428 19:54:47.300470 28055 net.cpp:131] Top shape: (1)
I0428 19:54:47.300473 28055 net.cpp:139] Memory required for data: 4998804
I0428 19:54:47.300477 28055 layer_factory.hpp:77] Creating layer loss
I0428 19:54:47.300480 28055 net.cpp:86] Creating Layer loss
I0428 19:54:47.300483 28055 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:54:47.300487 28055 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:54:47.300492 28055 net.cpp:382] loss -> loss
I0428 19:54:47.300498 28055 layer_factory.hpp:77] Creating layer loss
I0428 19:54:47.300716 28055 net.cpp:124] Setting up loss
I0428 19:54:47.300734 28055 net.cpp:131] Top shape: (1)
I0428 19:54:47.300739 28055 net.cpp:134]     with loss weight 1
I0428 19:54:47.300755 28055 net.cpp:139] Memory required for data: 4998808
I0428 19:54:47.300760 28055 net.cpp:200] loss needs backward computation.
I0428 19:54:47.300763 28055 net.cpp:202] accuracy does not need backward computation.
I0428 19:54:47.300767 28055 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:54:47.300770 28055 net.cpp:200] relu3 needs backward computation.
I0428 19:54:47.300773 28055 net.cpp:200] ip3 needs backward computation.
I0428 19:54:47.300787 28055 net.cpp:200] relu2 needs backward computation.
I0428 19:54:47.300789 28055 net.cpp:200] ip2 needs backward computation.
I0428 19:54:47.300792 28055 net.cpp:200] relu1 needs backward computation.
I0428 19:54:47.300796 28055 net.cpp:200] ip1 needs backward computation.
I0428 19:54:47.300798 28055 net.cpp:200] pool1 needs backward computation.
I0428 19:54:47.300801 28055 net.cpp:200] conv1 needs backward computation.
I0428 19:54:47.300806 28055 net.cpp:200] pool0 needs backward computation.
I0428 19:54:47.300808 28055 net.cpp:200] conv0 needs backward computation.
I0428 19:54:47.300835 28055 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:54:47.300839 28055 net.cpp:202] mnist does not need backward computation.
I0428 19:54:47.300843 28055 net.cpp:244] This network produces output accuracy
I0428 19:54:47.300846 28055 net.cpp:244] This network produces output loss
I0428 19:54:47.300858 28055 net.cpp:257] Network initialization done.
I0428 19:54:47.300899 28055 solver.cpp:56] Solver scaffolding done.
I0428 19:54:47.301280 28055 caffe.cpp:248] Starting Optimization
I0428 19:54:47.301286 28055 solver.cpp:273] Solving LeNet
I0428 19:54:47.301290 28055 solver.cpp:274] Learning Rate Policy: inv
I0428 19:54:47.301504 28055 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:54:47.307457 28055 blocking_queue.cpp:49] Waiting for data
I0428 19:54:47.377048 28062 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:47.377651 28055 solver.cpp:398]     Test net output #0: accuracy = 0.1214
I0428 19:54:47.377687 28055 solver.cpp:398]     Test net output #1: loss = 2.30202 (* 1 = 2.30202 loss)
I0428 19:54:47.381264 28055 solver.cpp:219] Iteration 0 (0 iter/s, 0.0799355s/100 iters), loss = 2.31605
I0428 19:54:47.381304 28055 solver.cpp:238]     Train net output #0: loss = 2.31605 (* 1 = 2.31605 loss)
I0428 19:54:47.381314 28055 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:54:47.524019 28055 solver.cpp:219] Iteration 100 (700.763 iter/s, 0.142702s/100 iters), loss = 1.17413
I0428 19:54:47.524058 28055 solver.cpp:238]     Train net output #0: loss = 1.17413 (* 1 = 1.17413 loss)
I0428 19:54:47.524065 28055 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:54:47.677440 28055 solver.cpp:219] Iteration 200 (651.977 iter/s, 0.15338s/100 iters), loss = 1.1838
I0428 19:54:47.677479 28055 solver.cpp:238]     Train net output #0: loss = 1.1838 (* 1 = 1.1838 loss)
I0428 19:54:47.677489 28055 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:54:47.840327 28055 solver.cpp:219] Iteration 300 (614.121 iter/s, 0.162834s/100 iters), loss = 0.850657
I0428 19:54:47.840363 28055 solver.cpp:238]     Train net output #0: loss = 0.850657 (* 1 = 0.850657 loss)
I0428 19:54:47.840371 28055 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:54:47.995882 28055 solver.cpp:219] Iteration 400 (643.055 iter/s, 0.155508s/100 iters), loss = 1.02772
I0428 19:54:47.995924 28055 solver.cpp:238]     Train net output #0: loss = 1.02772 (* 1 = 1.02772 loss)
I0428 19:54:47.995936 28055 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:54:48.148329 28055 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:54:48.204280 28062 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:48.206218 28055 solver.cpp:398]     Test net output #0: accuracy = 0.6876
I0428 19:54:48.206255 28055 solver.cpp:398]     Test net output #1: loss = 0.82209 (* 1 = 0.82209 loss)
I0428 19:54:48.207731 28055 solver.cpp:219] Iteration 500 (472.137 iter/s, 0.211803s/100 iters), loss = 0.951078
I0428 19:54:48.207777 28055 solver.cpp:238]     Train net output #0: loss = 0.951078 (* 1 = 0.951078 loss)
I0428 19:54:48.207811 28055 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:54:48.361454 28055 solver.cpp:219] Iteration 600 (650.734 iter/s, 0.153673s/100 iters), loss = 0.50502
I0428 19:54:48.361485 28055 solver.cpp:238]     Train net output #0: loss = 0.50502 (* 1 = 0.50502 loss)
I0428 19:54:48.361492 28055 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:54:48.514044 28055 solver.cpp:219] Iteration 700 (655.551 iter/s, 0.152543s/100 iters), loss = 1.09757
I0428 19:54:48.514080 28055 solver.cpp:238]     Train net output #0: loss = 1.09757 (* 1 = 1.09757 loss)
I0428 19:54:48.514086 28055 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:54:48.667846 28055 solver.cpp:219] Iteration 800 (650.391 iter/s, 0.153754s/100 iters), loss = 0.760433
I0428 19:54:48.667881 28055 solver.cpp:238]     Train net output #0: loss = 0.760433 (* 1 = 0.760433 loss)
I0428 19:54:48.667889 28055 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:54:48.827530 28055 solver.cpp:219] Iteration 900 (626.431 iter/s, 0.159634s/100 iters), loss = 0.631044
I0428 19:54:48.827570 28055 solver.cpp:238]     Train net output #0: loss = 0.631044 (* 1 = 0.631044 loss)
I0428 19:54:48.827580 28055 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:54:48.881111 28061 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:48.983392 28055 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:54:48.985141 28055 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:54:48.985929 28055 solver.cpp:311] Iteration 1000, loss = 0.854823
I0428 19:54:48.985949 28055 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:54:49.058063 28062 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:49.058689 28055 solver.cpp:398]     Test net output #0: accuracy = 0.6919
I0428 19:54:49.058712 28055 solver.cpp:398]     Test net output #1: loss = 0.770449 (* 1 = 0.770449 loss)
I0428 19:54:49.058720 28055 solver.cpp:316] Optimization Done.
I0428 19:54:49.058724 28055 caffe.cpp:259] Optimization Done.
