I0428 20:10:27.295156 31842 caffe.cpp:218] Using GPUs 0
I0428 20:10:27.323814 31842 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:10:27.769198 31842 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1135.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:10:27.769315 31842 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1135.prototxt
I0428 20:10:27.769641 31842 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:10:27.769670 31842 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:10:27.769740 31842 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:10:27.769803 31842 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:27.769881 31842 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:10:27.769901 31842 net.cpp:86] Creating Layer mnist
I0428 20:10:27.769909 31842 net.cpp:382] mnist -> data
I0428 20:10:27.769927 31842 net.cpp:382] mnist -> label
I0428 20:10:27.770884 31842 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:10:27.773120 31842 net.cpp:124] Setting up mnist
I0428 20:10:27.773157 31842 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:10:27.773161 31842 net.cpp:131] Top shape: 64 (64)
I0428 20:10:27.773164 31842 net.cpp:139] Memory required for data: 200960
I0428 20:10:27.773170 31842 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:27.773193 31842 net.cpp:86] Creating Layer conv0
I0428 20:10:27.773198 31842 net.cpp:408] conv0 <- data
I0428 20:10:27.773210 31842 net.cpp:382] conv0 -> conv0
I0428 20:10:28.000833 31842 net.cpp:124] Setting up conv0
I0428 20:10:28.000874 31842 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:10:28.000879 31842 net.cpp:139] Memory required for data: 3887360
I0428 20:10:28.000911 31842 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:28.000923 31842 net.cpp:86] Creating Layer pool0
I0428 20:10:28.000927 31842 net.cpp:408] pool0 <- conv0
I0428 20:10:28.000932 31842 net.cpp:382] pool0 -> pool0
I0428 20:10:28.000995 31842 net.cpp:124] Setting up pool0
I0428 20:10:28.001003 31842 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:10:28.001006 31842 net.cpp:139] Memory required for data: 4808960
I0428 20:10:28.001009 31842 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:28.001021 31842 net.cpp:86] Creating Layer conv1
I0428 20:10:28.001026 31842 net.cpp:408] conv1 <- pool0
I0428 20:10:28.001049 31842 net.cpp:382] conv1 -> conv1
I0428 20:10:28.003165 31842 net.cpp:124] Setting up conv1
I0428 20:10:28.003178 31842 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:10:28.003198 31842 net.cpp:139] Memory required for data: 5628160
I0428 20:10:28.003221 31842 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:28.003227 31842 net.cpp:86] Creating Layer pool1
I0428 20:10:28.003247 31842 net.cpp:408] pool1 <- conv1
I0428 20:10:28.003252 31842 net.cpp:382] pool1 -> pool1
I0428 20:10:28.003304 31842 net.cpp:124] Setting up pool1
I0428 20:10:28.003310 31842 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:10:28.003314 31842 net.cpp:139] Memory required for data: 5832960
I0428 20:10:28.003317 31842 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:28.003324 31842 net.cpp:86] Creating Layer ip1
I0428 20:10:28.003327 31842 net.cpp:408] ip1 <- pool1
I0428 20:10:28.003331 31842 net.cpp:382] ip1 -> ip1
I0428 20:10:28.004356 31842 net.cpp:124] Setting up ip1
I0428 20:10:28.004384 31842 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:28.004405 31842 net.cpp:139] Memory required for data: 5835520
I0428 20:10:28.004412 31842 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:28.004420 31842 net.cpp:86] Creating Layer relu1
I0428 20:10:28.004422 31842 net.cpp:408] relu1 <- ip1
I0428 20:10:28.004427 31842 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:28.004598 31842 net.cpp:124] Setting up relu1
I0428 20:10:28.004607 31842 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:28.004611 31842 net.cpp:139] Memory required for data: 5838080
I0428 20:10:28.004613 31842 layer_factory.hpp:77] Creating layer ip2
I0428 20:10:28.004621 31842 net.cpp:86] Creating Layer ip2
I0428 20:10:28.004623 31842 net.cpp:408] ip2 <- ip1
I0428 20:10:28.004628 31842 net.cpp:382] ip2 -> ip2
I0428 20:10:28.004747 31842 net.cpp:124] Setting up ip2
I0428 20:10:28.004755 31842 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:28.004756 31842 net.cpp:139] Memory required for data: 5840640
I0428 20:10:28.004761 31842 layer_factory.hpp:77] Creating layer relu2
I0428 20:10:28.004767 31842 net.cpp:86] Creating Layer relu2
I0428 20:10:28.004770 31842 net.cpp:408] relu2 <- ip2
I0428 20:10:28.004775 31842 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:10:28.005597 31842 net.cpp:124] Setting up relu2
I0428 20:10:28.005623 31842 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:28.005627 31842 net.cpp:139] Memory required for data: 5843200
I0428 20:10:28.005631 31842 layer_factory.hpp:77] Creating layer loss
I0428 20:10:28.005655 31842 net.cpp:86] Creating Layer loss
I0428 20:10:28.005657 31842 net.cpp:408] loss <- ip2
I0428 20:10:28.005662 31842 net.cpp:408] loss <- label
I0428 20:10:28.005668 31842 net.cpp:382] loss -> loss
I0428 20:10:28.005688 31842 layer_factory.hpp:77] Creating layer loss
I0428 20:10:28.005960 31842 net.cpp:124] Setting up loss
I0428 20:10:28.005985 31842 net.cpp:131] Top shape: (1)
I0428 20:10:28.006002 31842 net.cpp:134]     with loss weight 1
I0428 20:10:28.006017 31842 net.cpp:139] Memory required for data: 5843204
I0428 20:10:28.006021 31842 net.cpp:200] loss needs backward computation.
I0428 20:10:28.006023 31842 net.cpp:200] relu2 needs backward computation.
I0428 20:10:28.006026 31842 net.cpp:200] ip2 needs backward computation.
I0428 20:10:28.006029 31842 net.cpp:200] relu1 needs backward computation.
I0428 20:10:28.006032 31842 net.cpp:200] ip1 needs backward computation.
I0428 20:10:28.006045 31842 net.cpp:200] pool1 needs backward computation.
I0428 20:10:28.006048 31842 net.cpp:200] conv1 needs backward computation.
I0428 20:10:28.006052 31842 net.cpp:200] pool0 needs backward computation.
I0428 20:10:28.006054 31842 net.cpp:200] conv0 needs backward computation.
I0428 20:10:28.006057 31842 net.cpp:202] mnist does not need backward computation.
I0428 20:10:28.006060 31842 net.cpp:244] This network produces output loss
I0428 20:10:28.006069 31842 net.cpp:257] Network initialization done.
I0428 20:10:28.006393 31842 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1135.prototxt
I0428 20:10:28.006434 31842 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:10:28.006518 31842 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:10:28.006598 31842 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:28.006644 31842 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:10:28.006656 31842 net.cpp:86] Creating Layer mnist
I0428 20:10:28.006675 31842 net.cpp:382] mnist -> data
I0428 20:10:28.006682 31842 net.cpp:382] mnist -> label
I0428 20:10:28.006768 31842 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:10:28.009099 31842 net.cpp:124] Setting up mnist
I0428 20:10:28.009129 31842 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:10:28.009133 31842 net.cpp:131] Top shape: 100 (100)
I0428 20:10:28.009136 31842 net.cpp:139] Memory required for data: 314000
I0428 20:10:28.009140 31842 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:10:28.009160 31842 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:10:28.009165 31842 net.cpp:408] label_mnist_1_split <- label
I0428 20:10:28.009169 31842 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:10:28.009176 31842 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:10:28.009238 31842 net.cpp:124] Setting up label_mnist_1_split
I0428 20:10:28.009244 31842 net.cpp:131] Top shape: 100 (100)
I0428 20:10:28.009248 31842 net.cpp:131] Top shape: 100 (100)
I0428 20:10:28.009251 31842 net.cpp:139] Memory required for data: 314800
I0428 20:10:28.009253 31842 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:28.009263 31842 net.cpp:86] Creating Layer conv0
I0428 20:10:28.009265 31842 net.cpp:408] conv0 <- data
I0428 20:10:28.009270 31842 net.cpp:382] conv0 -> conv0
I0428 20:10:28.011005 31842 net.cpp:124] Setting up conv0
I0428 20:10:28.011018 31842 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:10:28.011039 31842 net.cpp:139] Memory required for data: 6074800
I0428 20:10:28.011047 31842 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:28.011054 31842 net.cpp:86] Creating Layer pool0
I0428 20:10:28.011057 31842 net.cpp:408] pool0 <- conv0
I0428 20:10:28.011061 31842 net.cpp:382] pool0 -> pool0
I0428 20:10:28.011097 31842 net.cpp:124] Setting up pool0
I0428 20:10:28.011104 31842 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:10:28.011106 31842 net.cpp:139] Memory required for data: 7514800
I0428 20:10:28.011109 31842 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:28.011117 31842 net.cpp:86] Creating Layer conv1
I0428 20:10:28.011121 31842 net.cpp:408] conv1 <- pool0
I0428 20:10:28.011126 31842 net.cpp:382] conv1 -> conv1
I0428 20:10:28.012941 31842 net.cpp:124] Setting up conv1
I0428 20:10:28.012970 31842 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:10:28.012974 31842 net.cpp:139] Memory required for data: 8794800
I0428 20:10:28.012984 31842 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:28.012989 31842 net.cpp:86] Creating Layer pool1
I0428 20:10:28.012992 31842 net.cpp:408] pool1 <- conv1
I0428 20:10:28.013015 31842 net.cpp:382] pool1 -> pool1
I0428 20:10:28.013053 31842 net.cpp:124] Setting up pool1
I0428 20:10:28.013061 31842 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:10:28.013064 31842 net.cpp:139] Memory required for data: 9114800
I0428 20:10:28.013067 31842 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:28.013073 31842 net.cpp:86] Creating Layer ip1
I0428 20:10:28.013077 31842 net.cpp:408] ip1 <- pool1
I0428 20:10:28.013082 31842 net.cpp:382] ip1 -> ip1
I0428 20:10:28.013268 31842 net.cpp:124] Setting up ip1
I0428 20:10:28.013276 31842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:28.013279 31842 net.cpp:139] Memory required for data: 9118800
I0428 20:10:28.013294 31842 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:28.013301 31842 net.cpp:86] Creating Layer relu1
I0428 20:10:28.013305 31842 net.cpp:408] relu1 <- ip1
I0428 20:10:28.013309 31842 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:28.013520 31842 net.cpp:124] Setting up relu1
I0428 20:10:28.013527 31842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:28.013530 31842 net.cpp:139] Memory required for data: 9122800
I0428 20:10:28.013535 31842 layer_factory.hpp:77] Creating layer ip2
I0428 20:10:28.013541 31842 net.cpp:86] Creating Layer ip2
I0428 20:10:28.013545 31842 net.cpp:408] ip2 <- ip1
I0428 20:10:28.013557 31842 net.cpp:382] ip2 -> ip2
I0428 20:10:28.013679 31842 net.cpp:124] Setting up ip2
I0428 20:10:28.013687 31842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:28.013691 31842 net.cpp:139] Memory required for data: 9126800
I0428 20:10:28.013697 31842 layer_factory.hpp:77] Creating layer relu2
I0428 20:10:28.013702 31842 net.cpp:86] Creating Layer relu2
I0428 20:10:28.013705 31842 net.cpp:408] relu2 <- ip2
I0428 20:10:28.013710 31842 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:10:28.013943 31842 net.cpp:124] Setting up relu2
I0428 20:10:28.013952 31842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:28.013955 31842 net.cpp:139] Memory required for data: 9130800
I0428 20:10:28.013958 31842 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:10:28.013963 31842 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:10:28.013967 31842 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:10:28.013983 31842 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:10:28.014024 31842 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:10:28.014058 31842 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:10:28.014065 31842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:28.014068 31842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:28.014086 31842 net.cpp:139] Memory required for data: 9138800
I0428 20:10:28.014091 31842 layer_factory.hpp:77] Creating layer accuracy
I0428 20:10:28.014094 31842 net.cpp:86] Creating Layer accuracy
I0428 20:10:28.014098 31842 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:10:28.014102 31842 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:10:28.014106 31842 net.cpp:382] accuracy -> accuracy
I0428 20:10:28.014113 31842 net.cpp:124] Setting up accuracy
I0428 20:10:28.014117 31842 net.cpp:131] Top shape: (1)
I0428 20:10:28.014137 31842 net.cpp:139] Memory required for data: 9138804
I0428 20:10:28.014139 31842 layer_factory.hpp:77] Creating layer loss
I0428 20:10:28.014144 31842 net.cpp:86] Creating Layer loss
I0428 20:10:28.014147 31842 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:10:28.014150 31842 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:10:28.014155 31842 net.cpp:382] loss -> loss
I0428 20:10:28.014161 31842 layer_factory.hpp:77] Creating layer loss
I0428 20:10:28.014422 31842 net.cpp:124] Setting up loss
I0428 20:10:28.014431 31842 net.cpp:131] Top shape: (1)
I0428 20:10:28.014436 31842 net.cpp:134]     with loss weight 1
I0428 20:10:28.014458 31842 net.cpp:139] Memory required for data: 9138808
I0428 20:10:28.014462 31842 net.cpp:200] loss needs backward computation.
I0428 20:10:28.014482 31842 net.cpp:202] accuracy does not need backward computation.
I0428 20:10:28.014487 31842 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:10:28.014492 31842 net.cpp:200] relu2 needs backward computation.
I0428 20:10:28.014509 31842 net.cpp:200] ip2 needs backward computation.
I0428 20:10:28.014513 31842 net.cpp:200] relu1 needs backward computation.
I0428 20:10:28.014518 31842 net.cpp:200] ip1 needs backward computation.
I0428 20:10:28.014521 31842 net.cpp:200] pool1 needs backward computation.
I0428 20:10:28.014540 31842 net.cpp:200] conv1 needs backward computation.
I0428 20:10:28.014544 31842 net.cpp:200] pool0 needs backward computation.
I0428 20:10:28.014547 31842 net.cpp:200] conv0 needs backward computation.
I0428 20:10:28.014551 31842 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:10:28.014555 31842 net.cpp:202] mnist does not need backward computation.
I0428 20:10:28.014559 31842 net.cpp:244] This network produces output accuracy
I0428 20:10:28.014562 31842 net.cpp:244] This network produces output loss
I0428 20:10:28.014571 31842 net.cpp:257] Network initialization done.
I0428 20:10:28.014609 31842 solver.cpp:56] Solver scaffolding done.
I0428 20:10:28.014909 31842 caffe.cpp:248] Starting Optimization
I0428 20:10:28.014915 31842 solver.cpp:273] Solving LeNet
I0428 20:10:28.014919 31842 solver.cpp:274] Learning Rate Policy: inv
I0428 20:10:28.015779 31842 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:10:28.021581 31842 blocking_queue.cpp:49] Waiting for data
I0428 20:10:28.092438 31849 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:28.093071 31842 solver.cpp:398]     Test net output #0: accuracy = 0.0958
I0428 20:10:28.093106 31842 solver.cpp:398]     Test net output #1: loss = 2.34783 (* 1 = 2.34783 loss)
I0428 20:10:28.096737 31842 solver.cpp:219] Iteration 0 (0 iter/s, 0.08179s/100 iters), loss = 2.37544
I0428 20:10:28.096776 31842 solver.cpp:238]     Train net output #0: loss = 2.37544 (* 1 = 2.37544 loss)
I0428 20:10:28.096787 31842 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:10:28.211648 31842 solver.cpp:219] Iteration 100 (870.493 iter/s, 0.114877s/100 iters), loss = 0.533586
I0428 20:10:28.211688 31842 solver.cpp:238]     Train net output #0: loss = 0.533586 (* 1 = 0.533586 loss)
I0428 20:10:28.211694 31842 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:10:28.326912 31842 solver.cpp:219] Iteration 200 (867.832 iter/s, 0.11523s/100 iters), loss = 0.464002
I0428 20:10:28.326962 31842 solver.cpp:238]     Train net output #0: loss = 0.464002 (* 1 = 0.464002 loss)
I0428 20:10:28.326969 31842 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:10:28.442139 31842 solver.cpp:219] Iteration 300 (868.187 iter/s, 0.115183s/100 iters), loss = 0.404837
I0428 20:10:28.442165 31842 solver.cpp:238]     Train net output #0: loss = 0.404837 (* 1 = 0.404837 loss)
I0428 20:10:28.442172 31842 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:10:28.555953 31842 solver.cpp:219] Iteration 400 (878.915 iter/s, 0.113777s/100 iters), loss = 0.282162
I0428 20:10:28.555994 31842 solver.cpp:238]     Train net output #0: loss = 0.282162 (* 1 = 0.282162 loss)
I0428 20:10:28.556001 31842 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:10:28.668721 31842 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:10:28.725132 31849 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:28.725734 31842 solver.cpp:398]     Test net output #0: accuracy = 0.8504
I0428 20:10:28.725769 31842 solver.cpp:398]     Test net output #1: loss = 0.387143 (* 1 = 0.387143 loss)
I0428 20:10:28.727042 31842 solver.cpp:219] Iteration 500 (584.628 iter/s, 0.171049s/100 iters), loss = 0.406355
I0428 20:10:28.727067 31842 solver.cpp:238]     Train net output #0: loss = 0.406355 (* 1 = 0.406355 loss)
I0428 20:10:28.727074 31842 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:10:28.858012 31842 solver.cpp:219] Iteration 600 (763.751 iter/s, 0.130933s/100 iters), loss = 0.477902
I0428 20:10:28.858053 31842 solver.cpp:238]     Train net output #0: loss = 0.477902 (* 1 = 0.477902 loss)
I0428 20:10:28.858060 31842 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:10:28.975493 31842 solver.cpp:219] Iteration 700 (851.57 iter/s, 0.11743s/100 iters), loss = 0.315985
I0428 20:10:28.975535 31842 solver.cpp:238]     Train net output #0: loss = 0.315985 (* 1 = 0.315985 loss)
I0428 20:10:28.975543 31842 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:10:29.089109 31842 solver.cpp:219] Iteration 800 (880.579 iter/s, 0.113562s/100 iters), loss = 0.526509
I0428 20:10:29.089153 31842 solver.cpp:238]     Train net output #0: loss = 0.526509 (* 1 = 0.526509 loss)
I0428 20:10:29.089159 31842 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:10:29.201426 31842 solver.cpp:219] Iteration 900 (890.764 iter/s, 0.112263s/100 iters), loss = 0.418337
I0428 20:10:29.201467 31842 solver.cpp:238]     Train net output #0: loss = 0.418337 (* 1 = 0.418337 loss)
I0428 20:10:29.201474 31842 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:10:29.239655 31848 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:29.317358 31842 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:10:29.318730 31842 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:10:29.319586 31842 solver.cpp:311] Iteration 1000, loss = 0.349562
I0428 20:10:29.319602 31842 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:10:29.394641 31849 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:29.395265 31842 solver.cpp:398]     Test net output #0: accuracy = 0.8641
I0428 20:10:29.395300 31842 solver.cpp:398]     Test net output #1: loss = 0.341708 (* 1 = 0.341708 loss)
I0428 20:10:29.395305 31842 solver.cpp:316] Optimization Done.
I0428 20:10:29.395308 31842 caffe.cpp:259] Optimization Done.
