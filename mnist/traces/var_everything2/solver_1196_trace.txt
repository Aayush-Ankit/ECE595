I0428 20:13:16.542850 32433 caffe.cpp:218] Using GPUs 0
I0428 20:13:16.589622 32433 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:13:17.101402 32433 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1196.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:13:17.101543 32433 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1196.prototxt
I0428 20:13:17.101964 32433 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:13:17.101984 32433 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:13:17.102085 32433 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:13:17.102166 32433 layer_factory.hpp:77] Creating layer mnist
I0428 20:13:17.102267 32433 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:13:17.102291 32433 net.cpp:86] Creating Layer mnist
I0428 20:13:17.102300 32433 net.cpp:382] mnist -> data
I0428 20:13:17.102324 32433 net.cpp:382] mnist -> label
I0428 20:13:17.103435 32433 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:13:17.105921 32433 net.cpp:124] Setting up mnist
I0428 20:13:17.105939 32433 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:13:17.105945 32433 net.cpp:131] Top shape: 64 (64)
I0428 20:13:17.105948 32433 net.cpp:139] Memory required for data: 200960
I0428 20:13:17.105955 32433 layer_factory.hpp:77] Creating layer conv0
I0428 20:13:17.105973 32433 net.cpp:86] Creating Layer conv0
I0428 20:13:17.105993 32433 net.cpp:408] conv0 <- data
I0428 20:13:17.106007 32433 net.cpp:382] conv0 -> conv0
I0428 20:13:17.350958 32433 net.cpp:124] Setting up conv0
I0428 20:13:17.350985 32433 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:13:17.350988 32433 net.cpp:139] Memory required for data: 3887360
I0428 20:13:17.351002 32433 layer_factory.hpp:77] Creating layer pool0
I0428 20:13:17.351014 32433 net.cpp:86] Creating Layer pool0
I0428 20:13:17.351018 32433 net.cpp:408] pool0 <- conv0
I0428 20:13:17.351023 32433 net.cpp:382] pool0 -> pool0
I0428 20:13:17.351081 32433 net.cpp:124] Setting up pool0
I0428 20:13:17.351086 32433 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:13:17.351089 32433 net.cpp:139] Memory required for data: 4808960
I0428 20:13:17.351092 32433 layer_factory.hpp:77] Creating layer conv1
I0428 20:13:17.351102 32433 net.cpp:86] Creating Layer conv1
I0428 20:13:17.351105 32433 net.cpp:408] conv1 <- pool0
I0428 20:13:17.351110 32433 net.cpp:382] conv1 -> conv1
I0428 20:13:17.353440 32433 net.cpp:124] Setting up conv1
I0428 20:13:17.353453 32433 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:13:17.353457 32433 net.cpp:139] Memory required for data: 6447360
I0428 20:13:17.353466 32433 layer_factory.hpp:77] Creating layer pool1
I0428 20:13:17.353471 32433 net.cpp:86] Creating Layer pool1
I0428 20:13:17.353474 32433 net.cpp:408] pool1 <- conv1
I0428 20:13:17.353480 32433 net.cpp:382] pool1 -> pool1
I0428 20:13:17.353529 32433 net.cpp:124] Setting up pool1
I0428 20:13:17.353534 32433 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:13:17.353538 32433 net.cpp:139] Memory required for data: 6856960
I0428 20:13:17.353539 32433 layer_factory.hpp:77] Creating layer ip1
I0428 20:13:17.353546 32433 net.cpp:86] Creating Layer ip1
I0428 20:13:17.353550 32433 net.cpp:408] ip1 <- pool1
I0428 20:13:17.353559 32433 net.cpp:382] ip1 -> ip1
I0428 20:13:17.353920 32433 net.cpp:124] Setting up ip1
I0428 20:13:17.353929 32433 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:13:17.353947 32433 net.cpp:139] Memory required for data: 6863360
I0428 20:13:17.353955 32433 layer_factory.hpp:77] Creating layer relu1
I0428 20:13:17.353960 32433 net.cpp:86] Creating Layer relu1
I0428 20:13:17.353965 32433 net.cpp:408] relu1 <- ip1
I0428 20:13:17.353968 32433 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:13:17.354156 32433 net.cpp:124] Setting up relu1
I0428 20:13:17.354166 32433 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:13:17.354168 32433 net.cpp:139] Memory required for data: 6869760
I0428 20:13:17.354171 32433 layer_factory.hpp:77] Creating layer ip2
I0428 20:13:17.354176 32433 net.cpp:86] Creating Layer ip2
I0428 20:13:17.354179 32433 net.cpp:408] ip2 <- ip1
I0428 20:13:17.354185 32433 net.cpp:382] ip2 -> ip2
I0428 20:13:17.354281 32433 net.cpp:124] Setting up ip2
I0428 20:13:17.354288 32433 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:13:17.354291 32433 net.cpp:139] Memory required for data: 6876160
I0428 20:13:17.354296 32433 layer_factory.hpp:77] Creating layer relu2
I0428 20:13:17.354302 32433 net.cpp:86] Creating Layer relu2
I0428 20:13:17.354305 32433 net.cpp:408] relu2 <- ip2
I0428 20:13:17.354310 32433 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:13:17.355062 32433 net.cpp:124] Setting up relu2
I0428 20:13:17.355073 32433 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:13:17.355093 32433 net.cpp:139] Memory required for data: 6882560
I0428 20:13:17.355095 32433 layer_factory.hpp:77] Creating layer ip3
I0428 20:13:17.355103 32433 net.cpp:86] Creating Layer ip3
I0428 20:13:17.355108 32433 net.cpp:408] ip3 <- ip2
I0428 20:13:17.355113 32433 net.cpp:382] ip3 -> ip3
I0428 20:13:17.355228 32433 net.cpp:124] Setting up ip3
I0428 20:13:17.355235 32433 net.cpp:131] Top shape: 64 10 (640)
I0428 20:13:17.355238 32433 net.cpp:139] Memory required for data: 6885120
I0428 20:13:17.355245 32433 layer_factory.hpp:77] Creating layer relu3
I0428 20:13:17.355252 32433 net.cpp:86] Creating Layer relu3
I0428 20:13:17.355255 32433 net.cpp:408] relu3 <- ip3
I0428 20:13:17.355258 32433 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:13:17.355438 32433 net.cpp:124] Setting up relu3
I0428 20:13:17.355446 32433 net.cpp:131] Top shape: 64 10 (640)
I0428 20:13:17.355449 32433 net.cpp:139] Memory required for data: 6887680
I0428 20:13:17.355453 32433 layer_factory.hpp:77] Creating layer loss
I0428 20:13:17.355459 32433 net.cpp:86] Creating Layer loss
I0428 20:13:17.355463 32433 net.cpp:408] loss <- ip3
I0428 20:13:17.355465 32433 net.cpp:408] loss <- label
I0428 20:13:17.355470 32433 net.cpp:382] loss -> loss
I0428 20:13:17.355482 32433 layer_factory.hpp:77] Creating layer loss
I0428 20:13:17.355705 32433 net.cpp:124] Setting up loss
I0428 20:13:17.355713 32433 net.cpp:131] Top shape: (1)
I0428 20:13:17.355716 32433 net.cpp:134]     with loss weight 1
I0428 20:13:17.355729 32433 net.cpp:139] Memory required for data: 6887684
I0428 20:13:17.355733 32433 net.cpp:200] loss needs backward computation.
I0428 20:13:17.355736 32433 net.cpp:200] relu3 needs backward computation.
I0428 20:13:17.355739 32433 net.cpp:200] ip3 needs backward computation.
I0428 20:13:17.355742 32433 net.cpp:200] relu2 needs backward computation.
I0428 20:13:17.355744 32433 net.cpp:200] ip2 needs backward computation.
I0428 20:13:17.355747 32433 net.cpp:200] relu1 needs backward computation.
I0428 20:13:17.355749 32433 net.cpp:200] ip1 needs backward computation.
I0428 20:13:17.355752 32433 net.cpp:200] pool1 needs backward computation.
I0428 20:13:17.355754 32433 net.cpp:200] conv1 needs backward computation.
I0428 20:13:17.355757 32433 net.cpp:200] pool0 needs backward computation.
I0428 20:13:17.355761 32433 net.cpp:200] conv0 needs backward computation.
I0428 20:13:17.355763 32433 net.cpp:202] mnist does not need backward computation.
I0428 20:13:17.355765 32433 net.cpp:244] This network produces output loss
I0428 20:13:17.355774 32433 net.cpp:257] Network initialization done.
I0428 20:13:17.356096 32433 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1196.prototxt
I0428 20:13:17.356149 32433 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:13:17.356236 32433 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:13:17.356329 32433 layer_factory.hpp:77] Creating layer mnist
I0428 20:13:17.356370 32433 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:13:17.356381 32433 net.cpp:86] Creating Layer mnist
I0428 20:13:17.356385 32433 net.cpp:382] mnist -> data
I0428 20:13:17.356393 32433 net.cpp:382] mnist -> label
I0428 20:13:17.356472 32433 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:13:17.358489 32433 net.cpp:124] Setting up mnist
I0428 20:13:17.358515 32433 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:13:17.358520 32433 net.cpp:131] Top shape: 100 (100)
I0428 20:13:17.358522 32433 net.cpp:139] Memory required for data: 314000
I0428 20:13:17.358525 32433 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:13:17.358531 32433 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:13:17.358535 32433 net.cpp:408] label_mnist_1_split <- label
I0428 20:13:17.358539 32433 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:13:17.358546 32433 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:13:17.358600 32433 net.cpp:124] Setting up label_mnist_1_split
I0428 20:13:17.358605 32433 net.cpp:131] Top shape: 100 (100)
I0428 20:13:17.358609 32433 net.cpp:131] Top shape: 100 (100)
I0428 20:13:17.358611 32433 net.cpp:139] Memory required for data: 314800
I0428 20:13:17.358614 32433 layer_factory.hpp:77] Creating layer conv0
I0428 20:13:17.358623 32433 net.cpp:86] Creating Layer conv0
I0428 20:13:17.358626 32433 net.cpp:408] conv0 <- data
I0428 20:13:17.358631 32433 net.cpp:382] conv0 -> conv0
I0428 20:13:17.360412 32433 net.cpp:124] Setting up conv0
I0428 20:13:17.360427 32433 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:13:17.360430 32433 net.cpp:139] Memory required for data: 6074800
I0428 20:13:17.360443 32433 layer_factory.hpp:77] Creating layer pool0
I0428 20:13:17.360465 32433 net.cpp:86] Creating Layer pool0
I0428 20:13:17.360467 32433 net.cpp:408] pool0 <- conv0
I0428 20:13:17.360473 32433 net.cpp:382] pool0 -> pool0
I0428 20:13:17.360510 32433 net.cpp:124] Setting up pool0
I0428 20:13:17.360517 32433 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:13:17.360519 32433 net.cpp:139] Memory required for data: 7514800
I0428 20:13:17.360522 32433 layer_factory.hpp:77] Creating layer conv1
I0428 20:13:17.360532 32433 net.cpp:86] Creating Layer conv1
I0428 20:13:17.360535 32433 net.cpp:408] conv1 <- pool0
I0428 20:13:17.360540 32433 net.cpp:382] conv1 -> conv1
I0428 20:13:17.362541 32433 net.cpp:124] Setting up conv1
I0428 20:13:17.362555 32433 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:13:17.362572 32433 net.cpp:139] Memory required for data: 10074800
I0428 20:13:17.362582 32433 layer_factory.hpp:77] Creating layer pool1
I0428 20:13:17.362591 32433 net.cpp:86] Creating Layer pool1
I0428 20:13:17.362593 32433 net.cpp:408] pool1 <- conv1
I0428 20:13:17.362598 32433 net.cpp:382] pool1 -> pool1
I0428 20:13:17.362646 32433 net.cpp:124] Setting up pool1
I0428 20:13:17.362653 32433 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:13:17.362655 32433 net.cpp:139] Memory required for data: 10714800
I0428 20:13:17.362658 32433 layer_factory.hpp:77] Creating layer ip1
I0428 20:13:17.362664 32433 net.cpp:86] Creating Layer ip1
I0428 20:13:17.362673 32433 net.cpp:408] ip1 <- pool1
I0428 20:13:17.362679 32433 net.cpp:382] ip1 -> ip1
I0428 20:13:17.363015 32433 net.cpp:124] Setting up ip1
I0428 20:13:17.363024 32433 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:13:17.363037 32433 net.cpp:139] Memory required for data: 10724800
I0428 20:13:17.363051 32433 layer_factory.hpp:77] Creating layer relu1
I0428 20:13:17.363056 32433 net.cpp:86] Creating Layer relu1
I0428 20:13:17.363059 32433 net.cpp:408] relu1 <- ip1
I0428 20:13:17.363066 32433 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:13:17.363230 32433 net.cpp:124] Setting up relu1
I0428 20:13:17.363239 32433 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:13:17.363242 32433 net.cpp:139] Memory required for data: 10734800
I0428 20:13:17.363245 32433 layer_factory.hpp:77] Creating layer ip2
I0428 20:13:17.363253 32433 net.cpp:86] Creating Layer ip2
I0428 20:13:17.363256 32433 net.cpp:408] ip2 <- ip1
I0428 20:13:17.363260 32433 net.cpp:382] ip2 -> ip2
I0428 20:13:17.363385 32433 net.cpp:124] Setting up ip2
I0428 20:13:17.363392 32433 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:13:17.363395 32433 net.cpp:139] Memory required for data: 10744800
I0428 20:13:17.363400 32433 layer_factory.hpp:77] Creating layer relu2
I0428 20:13:17.363406 32433 net.cpp:86] Creating Layer relu2
I0428 20:13:17.363409 32433 net.cpp:408] relu2 <- ip2
I0428 20:13:17.363412 32433 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:13:17.363631 32433 net.cpp:124] Setting up relu2
I0428 20:13:17.363639 32433 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:13:17.363642 32433 net.cpp:139] Memory required for data: 10754800
I0428 20:13:17.363646 32433 layer_factory.hpp:77] Creating layer ip3
I0428 20:13:17.363652 32433 net.cpp:86] Creating Layer ip3
I0428 20:13:17.363670 32433 net.cpp:408] ip3 <- ip2
I0428 20:13:17.363675 32433 net.cpp:382] ip3 -> ip3
I0428 20:13:17.363777 32433 net.cpp:124] Setting up ip3
I0428 20:13:17.363785 32433 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:17.363795 32433 net.cpp:139] Memory required for data: 10758800
I0428 20:13:17.363802 32433 layer_factory.hpp:77] Creating layer relu3
I0428 20:13:17.363808 32433 net.cpp:86] Creating Layer relu3
I0428 20:13:17.363811 32433 net.cpp:408] relu3 <- ip3
I0428 20:13:17.363814 32433 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:13:17.364578 32433 net.cpp:124] Setting up relu3
I0428 20:13:17.364591 32433 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:17.364594 32433 net.cpp:139] Memory required for data: 10762800
I0428 20:13:17.364598 32433 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:13:17.364603 32433 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:13:17.364605 32433 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:13:17.364610 32433 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:13:17.364624 32433 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:13:17.364714 32433 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:13:17.364722 32433 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:17.364725 32433 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:17.364728 32433 net.cpp:139] Memory required for data: 10770800
I0428 20:13:17.364732 32433 layer_factory.hpp:77] Creating layer accuracy
I0428 20:13:17.364753 32433 net.cpp:86] Creating Layer accuracy
I0428 20:13:17.364755 32433 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:13:17.364774 32433 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:13:17.364784 32433 net.cpp:382] accuracy -> accuracy
I0428 20:13:17.364791 32433 net.cpp:124] Setting up accuracy
I0428 20:13:17.364795 32433 net.cpp:131] Top shape: (1)
I0428 20:13:17.364822 32433 net.cpp:139] Memory required for data: 10770804
I0428 20:13:17.364825 32433 layer_factory.hpp:77] Creating layer loss
I0428 20:13:17.364831 32433 net.cpp:86] Creating Layer loss
I0428 20:13:17.364835 32433 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:13:17.364855 32433 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:13:17.364864 32433 net.cpp:382] loss -> loss
I0428 20:13:17.364871 32433 layer_factory.hpp:77] Creating layer loss
I0428 20:13:17.365140 32433 net.cpp:124] Setting up loss
I0428 20:13:17.365182 32433 net.cpp:131] Top shape: (1)
I0428 20:13:17.365187 32433 net.cpp:134]     with loss weight 1
I0428 20:13:17.365216 32433 net.cpp:139] Memory required for data: 10770808
I0428 20:13:17.365226 32433 net.cpp:200] loss needs backward computation.
I0428 20:13:17.365228 32433 net.cpp:202] accuracy does not need backward computation.
I0428 20:13:17.365232 32433 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:13:17.365236 32433 net.cpp:200] relu3 needs backward computation.
I0428 20:13:17.365237 32433 net.cpp:200] ip3 needs backward computation.
I0428 20:13:17.365241 32433 net.cpp:200] relu2 needs backward computation.
I0428 20:13:17.365242 32433 net.cpp:200] ip2 needs backward computation.
I0428 20:13:17.365245 32433 net.cpp:200] relu1 needs backward computation.
I0428 20:13:17.365253 32433 net.cpp:200] ip1 needs backward computation.
I0428 20:13:17.365257 32433 net.cpp:200] pool1 needs backward computation.
I0428 20:13:17.365258 32433 net.cpp:200] conv1 needs backward computation.
I0428 20:13:17.365262 32433 net.cpp:200] pool0 needs backward computation.
I0428 20:13:17.365264 32433 net.cpp:200] conv0 needs backward computation.
I0428 20:13:17.365273 32433 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:13:17.365276 32433 net.cpp:202] mnist does not need backward computation.
I0428 20:13:17.365279 32433 net.cpp:244] This network produces output accuracy
I0428 20:13:17.365283 32433 net.cpp:244] This network produces output loss
I0428 20:13:17.365293 32433 net.cpp:257] Network initialization done.
I0428 20:13:17.365331 32433 solver.cpp:56] Solver scaffolding done.
I0428 20:13:17.365658 32433 caffe.cpp:248] Starting Optimization
I0428 20:13:17.365664 32433 solver.cpp:273] Solving LeNet
I0428 20:13:17.365667 32433 solver.cpp:274] Learning Rate Policy: inv
I0428 20:13:17.366544 32433 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:13:17.373710 32433 blocking_queue.cpp:49] Waiting for data
I0428 20:13:17.444543 32442 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:17.445377 32433 solver.cpp:398]     Test net output #0: accuracy = 0.1328
I0428 20:13:17.445397 32433 solver.cpp:398]     Test net output #1: loss = 2.3031 (* 1 = 2.3031 loss)
I0428 20:13:17.450615 32433 solver.cpp:219] Iteration 0 (-1.08736e-30 iter/s, 0.0849213s/100 iters), loss = 2.30205
I0428 20:13:17.450641 32433 solver.cpp:238]     Train net output #0: loss = 2.30205 (* 1 = 2.30205 loss)
I0428 20:13:17.450652 32433 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:13:17.610870 32433 solver.cpp:219] Iteration 100 (624.161 iter/s, 0.160215s/100 iters), loss = 0.755316
I0428 20:13:17.610895 32433 solver.cpp:238]     Train net output #0: loss = 0.755316 (* 1 = 0.755316 loss)
I0428 20:13:17.610918 32433 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:13:17.770098 32433 solver.cpp:219] Iteration 200 (628.18 iter/s, 0.15919s/100 iters), loss = 1.07901
I0428 20:13:17.770123 32433 solver.cpp:238]     Train net output #0: loss = 1.07901 (* 1 = 1.07901 loss)
I0428 20:13:17.770129 32433 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:13:17.932070 32433 solver.cpp:219] Iteration 300 (617.538 iter/s, 0.161933s/100 iters), loss = 0.428854
I0428 20:13:17.932096 32433 solver.cpp:238]     Train net output #0: loss = 0.428854 (* 1 = 0.428854 loss)
I0428 20:13:17.932117 32433 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:13:18.095088 32433 solver.cpp:219] Iteration 400 (613.577 iter/s, 0.162979s/100 iters), loss = 0.575833
I0428 20:13:18.095114 32433 solver.cpp:238]     Train net output #0: loss = 0.575833 (* 1 = 0.575833 loss)
I0428 20:13:18.095120 32433 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:13:18.252100 32433 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:13:18.319941 32442 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:18.322315 32433 solver.cpp:398]     Test net output #0: accuracy = 0.7827
I0428 20:13:18.322335 32433 solver.cpp:398]     Test net output #1: loss = 0.566483 (* 1 = 0.566483 loss)
I0428 20:13:18.323835 32433 solver.cpp:219] Iteration 500 (437.246 iter/s, 0.228704s/100 iters), loss = 0.666333
I0428 20:13:18.323873 32433 solver.cpp:238]     Train net output #0: loss = 0.666333 (* 1 = 0.666333 loss)
I0428 20:13:18.323896 32433 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:13:18.511801 32433 solver.cpp:219] Iteration 600 (532.186 iter/s, 0.187904s/100 iters), loss = 0.638057
I0428 20:13:18.511853 32433 solver.cpp:238]     Train net output #0: loss = 0.638057 (* 1 = 0.638057 loss)
I0428 20:13:18.511865 32433 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:13:18.727814 32433 solver.cpp:219] Iteration 700 (463.074 iter/s, 0.215948s/100 iters), loss = 0.687951
I0428 20:13:18.727850 32433 solver.cpp:238]     Train net output #0: loss = 0.687951 (* 1 = 0.687951 loss)
I0428 20:13:18.727870 32433 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:13:18.943778 32433 solver.cpp:219] Iteration 800 (463.151 iter/s, 0.215912s/100 iters), loss = 0.769717
I0428 20:13:18.943814 32433 solver.cpp:238]     Train net output #0: loss = 0.769717 (* 1 = 0.769717 loss)
I0428 20:13:18.943822 32433 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:13:19.156393 32433 solver.cpp:219] Iteration 900 (470.447 iter/s, 0.212564s/100 iters), loss = 0.774391
I0428 20:13:19.156425 32433 solver.cpp:238]     Train net output #0: loss = 0.774391 (* 1 = 0.774391 loss)
I0428 20:13:19.156433 32433 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:13:19.227156 32441 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:19.369127 32433 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:13:19.372406 32433 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:13:19.374022 32433 solver.cpp:311] Iteration 1000, loss = 0.623746
I0428 20:13:19.374042 32433 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:13:19.443172 32442 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:19.445657 32433 solver.cpp:398]     Test net output #0: accuracy = 0.7891
I0428 20:13:19.445686 32433 solver.cpp:398]     Test net output #1: loss = 0.524329 (* 1 = 0.524329 loss)
I0428 20:13:19.445705 32433 solver.cpp:316] Optimization Done.
I0428 20:13:19.445709 32433 caffe.cpp:259] Optimization Done.
