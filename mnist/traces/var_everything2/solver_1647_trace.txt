I0428 20:37:09.773850  4896 caffe.cpp:218] Using GPUs 0
I0428 20:37:09.809528  4896 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:37:10.332698  4896 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1647.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:37:10.332885  4896 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1647.prototxt
I0428 20:37:10.333269  4896 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:37:10.333287  4896 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:37:10.333377  4896 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:37:10.333453  4896 layer_factory.hpp:77] Creating layer mnist
I0428 20:37:10.333552  4896 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:37:10.333575  4896 net.cpp:86] Creating Layer mnist
I0428 20:37:10.333585  4896 net.cpp:382] mnist -> data
I0428 20:37:10.333611  4896 net.cpp:382] mnist -> label
I0428 20:37:10.334693  4896 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:37:10.337146  4896 net.cpp:124] Setting up mnist
I0428 20:37:10.337162  4896 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:37:10.337169  4896 net.cpp:131] Top shape: 64 (64)
I0428 20:37:10.337172  4896 net.cpp:139] Memory required for data: 200960
I0428 20:37:10.337179  4896 layer_factory.hpp:77] Creating layer conv0
I0428 20:37:10.337198  4896 net.cpp:86] Creating Layer conv0
I0428 20:37:10.337203  4896 net.cpp:408] conv0 <- data
I0428 20:37:10.337216  4896 net.cpp:382] conv0 -> conv0
I0428 20:37:10.630530  4896 net.cpp:124] Setting up conv0
I0428 20:37:10.630563  4896 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:37:10.630568  4896 net.cpp:139] Memory required for data: 14946560
I0428 20:37:10.630610  4896 layer_factory.hpp:77] Creating layer pool0
I0428 20:37:10.630625  4896 net.cpp:86] Creating Layer pool0
I0428 20:37:10.630630  4896 net.cpp:408] pool0 <- conv0
I0428 20:37:10.630636  4896 net.cpp:382] pool0 -> pool0
I0428 20:37:10.630693  4896 net.cpp:124] Setting up pool0
I0428 20:37:10.630702  4896 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:37:10.630707  4896 net.cpp:139] Memory required for data: 18632960
I0428 20:37:10.630710  4896 layer_factory.hpp:77] Creating layer conv1
I0428 20:37:10.630723  4896 net.cpp:86] Creating Layer conv1
I0428 20:37:10.630728  4896 net.cpp:408] conv1 <- pool0
I0428 20:37:10.630733  4896 net.cpp:382] conv1 -> conv1
I0428 20:37:10.635498  4896 net.cpp:124] Setting up conv1
I0428 20:37:10.635515  4896 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:37:10.635519  4896 net.cpp:139] Memory required for data: 20271360
I0428 20:37:10.635530  4896 layer_factory.hpp:77] Creating layer pool1
I0428 20:37:10.635538  4896 net.cpp:86] Creating Layer pool1
I0428 20:37:10.635543  4896 net.cpp:408] pool1 <- conv1
I0428 20:37:10.635550  4896 net.cpp:382] pool1 -> pool1
I0428 20:37:10.635591  4896 net.cpp:124] Setting up pool1
I0428 20:37:10.635598  4896 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:37:10.635601  4896 net.cpp:139] Memory required for data: 20680960
I0428 20:37:10.635606  4896 layer_factory.hpp:77] Creating layer ip1
I0428 20:37:10.635613  4896 net.cpp:86] Creating Layer ip1
I0428 20:37:10.635617  4896 net.cpp:408] ip1 <- pool1
I0428 20:37:10.635622  4896 net.cpp:382] ip1 -> ip1
I0428 20:37:10.636266  4896 net.cpp:124] Setting up ip1
I0428 20:37:10.636276  4896 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:37:10.636279  4896 net.cpp:139] Memory required for data: 20693760
I0428 20:37:10.636287  4896 layer_factory.hpp:77] Creating layer relu1
I0428 20:37:10.636294  4896 net.cpp:86] Creating Layer relu1
I0428 20:37:10.636298  4896 net.cpp:408] relu1 <- ip1
I0428 20:37:10.636303  4896 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:37:10.636490  4896 net.cpp:124] Setting up relu1
I0428 20:37:10.636502  4896 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:37:10.636505  4896 net.cpp:139] Memory required for data: 20706560
I0428 20:37:10.636509  4896 layer_factory.hpp:77] Creating layer ip2
I0428 20:37:10.636517  4896 net.cpp:86] Creating Layer ip2
I0428 20:37:10.636520  4896 net.cpp:408] ip2 <- ip1
I0428 20:37:10.636526  4896 net.cpp:382] ip2 -> ip2
I0428 20:37:10.636638  4896 net.cpp:124] Setting up ip2
I0428 20:37:10.636646  4896 net.cpp:131] Top shape: 64 10 (640)
I0428 20:37:10.636649  4896 net.cpp:139] Memory required for data: 20709120
I0428 20:37:10.636656  4896 layer_factory.hpp:77] Creating layer relu2
I0428 20:37:10.636663  4896 net.cpp:86] Creating Layer relu2
I0428 20:37:10.636667  4896 net.cpp:408] relu2 <- ip2
I0428 20:37:10.636672  4896 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:37:10.637513  4896 net.cpp:124] Setting up relu2
I0428 20:37:10.637528  4896 net.cpp:131] Top shape: 64 10 (640)
I0428 20:37:10.637532  4896 net.cpp:139] Memory required for data: 20711680
I0428 20:37:10.637537  4896 layer_factory.hpp:77] Creating layer loss
I0428 20:37:10.637544  4896 net.cpp:86] Creating Layer loss
I0428 20:37:10.637548  4896 net.cpp:408] loss <- ip2
I0428 20:37:10.637554  4896 net.cpp:408] loss <- label
I0428 20:37:10.637560  4896 net.cpp:382] loss -> loss
I0428 20:37:10.637583  4896 layer_factory.hpp:77] Creating layer loss
I0428 20:37:10.637846  4896 net.cpp:124] Setting up loss
I0428 20:37:10.637866  4896 net.cpp:131] Top shape: (1)
I0428 20:37:10.637871  4896 net.cpp:134]     with loss weight 1
I0428 20:37:10.637887  4896 net.cpp:139] Memory required for data: 20711684
I0428 20:37:10.637890  4896 net.cpp:200] loss needs backward computation.
I0428 20:37:10.637894  4896 net.cpp:200] relu2 needs backward computation.
I0428 20:37:10.637898  4896 net.cpp:200] ip2 needs backward computation.
I0428 20:37:10.637902  4896 net.cpp:200] relu1 needs backward computation.
I0428 20:37:10.637905  4896 net.cpp:200] ip1 needs backward computation.
I0428 20:37:10.637920  4896 net.cpp:200] pool1 needs backward computation.
I0428 20:37:10.637924  4896 net.cpp:200] conv1 needs backward computation.
I0428 20:37:10.637928  4896 net.cpp:200] pool0 needs backward computation.
I0428 20:37:10.637933  4896 net.cpp:200] conv0 needs backward computation.
I0428 20:37:10.637936  4896 net.cpp:202] mnist does not need backward computation.
I0428 20:37:10.637940  4896 net.cpp:244] This network produces output loss
I0428 20:37:10.637950  4896 net.cpp:257] Network initialization done.
I0428 20:37:10.638290  4896 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1647.prototxt
I0428 20:37:10.638319  4896 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:37:10.638417  4896 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:37:10.638490  4896 layer_factory.hpp:77] Creating layer mnist
I0428 20:37:10.638542  4896 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:37:10.638556  4896 net.cpp:86] Creating Layer mnist
I0428 20:37:10.638562  4896 net.cpp:382] mnist -> data
I0428 20:37:10.638571  4896 net.cpp:382] mnist -> label
I0428 20:37:10.638669  4896 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:37:10.640861  4896 net.cpp:124] Setting up mnist
I0428 20:37:10.640877  4896 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:37:10.640883  4896 net.cpp:131] Top shape: 100 (100)
I0428 20:37:10.640889  4896 net.cpp:139] Memory required for data: 314000
I0428 20:37:10.640897  4896 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:37:10.640909  4896 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:37:10.640913  4896 net.cpp:408] label_mnist_1_split <- label
I0428 20:37:10.640919  4896 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:37:10.640928  4896 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:37:10.641000  4896 net.cpp:124] Setting up label_mnist_1_split
I0428 20:37:10.641008  4896 net.cpp:131] Top shape: 100 (100)
I0428 20:37:10.641012  4896 net.cpp:131] Top shape: 100 (100)
I0428 20:37:10.641016  4896 net.cpp:139] Memory required for data: 314800
I0428 20:37:10.641019  4896 layer_factory.hpp:77] Creating layer conv0
I0428 20:37:10.641029  4896 net.cpp:86] Creating Layer conv0
I0428 20:37:10.641033  4896 net.cpp:408] conv0 <- data
I0428 20:37:10.641039  4896 net.cpp:382] conv0 -> conv0
I0428 20:37:10.642930  4896 net.cpp:124] Setting up conv0
I0428 20:37:10.642946  4896 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:37:10.642951  4896 net.cpp:139] Memory required for data: 23354800
I0428 20:37:10.642961  4896 layer_factory.hpp:77] Creating layer pool0
I0428 20:37:10.642968  4896 net.cpp:86] Creating Layer pool0
I0428 20:37:10.642972  4896 net.cpp:408] pool0 <- conv0
I0428 20:37:10.642978  4896 net.cpp:382] pool0 -> pool0
I0428 20:37:10.643020  4896 net.cpp:124] Setting up pool0
I0428 20:37:10.643026  4896 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:37:10.643030  4896 net.cpp:139] Memory required for data: 29114800
I0428 20:37:10.643034  4896 layer_factory.hpp:77] Creating layer conv1
I0428 20:37:10.643043  4896 net.cpp:86] Creating Layer conv1
I0428 20:37:10.643048  4896 net.cpp:408] conv1 <- pool0
I0428 20:37:10.643054  4896 net.cpp:382] conv1 -> conv1
I0428 20:37:10.646316  4896 net.cpp:124] Setting up conv1
I0428 20:37:10.646330  4896 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:37:10.646335  4896 net.cpp:139] Memory required for data: 31674800
I0428 20:37:10.646345  4896 layer_factory.hpp:77] Creating layer pool1
I0428 20:37:10.646353  4896 net.cpp:86] Creating Layer pool1
I0428 20:37:10.646358  4896 net.cpp:408] pool1 <- conv1
I0428 20:37:10.646364  4896 net.cpp:382] pool1 -> pool1
I0428 20:37:10.646405  4896 net.cpp:124] Setting up pool1
I0428 20:37:10.646411  4896 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:37:10.646415  4896 net.cpp:139] Memory required for data: 32314800
I0428 20:37:10.646419  4896 layer_factory.hpp:77] Creating layer ip1
I0428 20:37:10.646425  4896 net.cpp:86] Creating Layer ip1
I0428 20:37:10.646430  4896 net.cpp:408] ip1 <- pool1
I0428 20:37:10.646436  4896 net.cpp:382] ip1 -> ip1
I0428 20:37:10.647079  4896 net.cpp:124] Setting up ip1
I0428 20:37:10.647089  4896 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:37:10.647092  4896 net.cpp:139] Memory required for data: 32334800
I0428 20:37:10.647100  4896 layer_factory.hpp:77] Creating layer relu1
I0428 20:37:10.647106  4896 net.cpp:86] Creating Layer relu1
I0428 20:37:10.647110  4896 net.cpp:408] relu1 <- ip1
I0428 20:37:10.647115  4896 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:37:10.647343  4896 net.cpp:124] Setting up relu1
I0428 20:37:10.647353  4896 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:37:10.647357  4896 net.cpp:139] Memory required for data: 32354800
I0428 20:37:10.647361  4896 layer_factory.hpp:77] Creating layer ip2
I0428 20:37:10.647369  4896 net.cpp:86] Creating Layer ip2
I0428 20:37:10.647372  4896 net.cpp:408] ip2 <- ip1
I0428 20:37:10.647378  4896 net.cpp:382] ip2 -> ip2
I0428 20:37:10.647502  4896 net.cpp:124] Setting up ip2
I0428 20:37:10.647511  4896 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:37:10.647514  4896 net.cpp:139] Memory required for data: 32358800
I0428 20:37:10.647521  4896 layer_factory.hpp:77] Creating layer relu2
I0428 20:37:10.647527  4896 net.cpp:86] Creating Layer relu2
I0428 20:37:10.647531  4896 net.cpp:408] relu2 <- ip2
I0428 20:37:10.647536  4896 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:37:10.647707  4896 net.cpp:124] Setting up relu2
I0428 20:37:10.647716  4896 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:37:10.647722  4896 net.cpp:139] Memory required for data: 32362800
I0428 20:37:10.647725  4896 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:37:10.647730  4896 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:37:10.647734  4896 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:37:10.647740  4896 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:37:10.647758  4896 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:37:10.647799  4896 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:37:10.647807  4896 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:37:10.647812  4896 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:37:10.647815  4896 net.cpp:139] Memory required for data: 32370800
I0428 20:37:10.647819  4896 layer_factory.hpp:77] Creating layer accuracy
I0428 20:37:10.647825  4896 net.cpp:86] Creating Layer accuracy
I0428 20:37:10.647830  4896 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:37:10.647835  4896 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:37:10.647840  4896 net.cpp:382] accuracy -> accuracy
I0428 20:37:10.647847  4896 net.cpp:124] Setting up accuracy
I0428 20:37:10.647852  4896 net.cpp:131] Top shape: (1)
I0428 20:37:10.647855  4896 net.cpp:139] Memory required for data: 32370804
I0428 20:37:10.647866  4896 layer_factory.hpp:77] Creating layer loss
I0428 20:37:10.647871  4896 net.cpp:86] Creating Layer loss
I0428 20:37:10.647876  4896 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:37:10.647881  4896 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:37:10.647886  4896 net.cpp:382] loss -> loss
I0428 20:37:10.647892  4896 layer_factory.hpp:77] Creating layer loss
I0428 20:37:10.648147  4896 net.cpp:124] Setting up loss
I0428 20:37:10.648157  4896 net.cpp:131] Top shape: (1)
I0428 20:37:10.648161  4896 net.cpp:134]     with loss weight 1
I0428 20:37:10.648169  4896 net.cpp:139] Memory required for data: 32370808
I0428 20:37:10.648174  4896 net.cpp:200] loss needs backward computation.
I0428 20:37:10.648178  4896 net.cpp:202] accuracy does not need backward computation.
I0428 20:37:10.648182  4896 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:37:10.648186  4896 net.cpp:200] relu2 needs backward computation.
I0428 20:37:10.648190  4896 net.cpp:200] ip2 needs backward computation.
I0428 20:37:10.648193  4896 net.cpp:200] relu1 needs backward computation.
I0428 20:37:10.648197  4896 net.cpp:200] ip1 needs backward computation.
I0428 20:37:10.648201  4896 net.cpp:200] pool1 needs backward computation.
I0428 20:37:10.648205  4896 net.cpp:200] conv1 needs backward computation.
I0428 20:37:10.648208  4896 net.cpp:200] pool0 needs backward computation.
I0428 20:37:10.648212  4896 net.cpp:200] conv0 needs backward computation.
I0428 20:37:10.648216  4896 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:37:10.648221  4896 net.cpp:202] mnist does not need backward computation.
I0428 20:37:10.648224  4896 net.cpp:244] This network produces output accuracy
I0428 20:37:10.648228  4896 net.cpp:244] This network produces output loss
I0428 20:37:10.648239  4896 net.cpp:257] Network initialization done.
I0428 20:37:10.648283  4896 solver.cpp:56] Solver scaffolding done.
I0428 20:37:10.648584  4896 caffe.cpp:248] Starting Optimization
I0428 20:37:10.648591  4896 solver.cpp:273] Solving LeNet
I0428 20:37:10.648594  4896 solver.cpp:274] Learning Rate Policy: inv
I0428 20:37:10.650108  4896 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:37:10.781455  4910 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:37:10.785686  4896 solver.cpp:398]     Test net output #0: accuracy = 0.0712
I0428 20:37:10.785729  4896 solver.cpp:398]     Test net output #1: loss = 2.32642 (* 1 = 2.32642 loss)
I0428 20:37:10.791527  4896 solver.cpp:219] Iteration 0 (-4.01884e-31 iter/s, 0.142903s/100 iters), loss = 2.32793
I0428 20:37:10.791553  4896 solver.cpp:238]     Train net output #0: loss = 2.32793 (* 1 = 2.32793 loss)
I0428 20:37:10.791566  4896 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:37:11.054519  4896 solver.cpp:219] Iteration 100 (380.301 iter/s, 0.26295s/100 iters), loss = 0.219938
I0428 20:37:11.054561  4896 solver.cpp:238]     Train net output #0: loss = 0.219938 (* 1 = 0.219938 loss)
I0428 20:37:11.054567  4896 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:37:11.312904  4896 solver.cpp:219] Iteration 200 (387.086 iter/s, 0.258341s/100 iters), loss = 0.129079
I0428 20:37:11.312960  4896 solver.cpp:238]     Train net output #0: loss = 0.129079 (* 1 = 0.129079 loss)
I0428 20:37:11.312968  4896 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:37:11.571913  4896 solver.cpp:219] Iteration 300 (386.196 iter/s, 0.258936s/100 iters), loss = 0.166989
I0428 20:37:11.571954  4896 solver.cpp:238]     Train net output #0: loss = 0.166989 (* 1 = 0.166989 loss)
I0428 20:37:11.571960  4896 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:37:11.834511  4896 solver.cpp:219] Iteration 400 (380.894 iter/s, 0.26254s/100 iters), loss = 0.0635515
I0428 20:37:11.834553  4896 solver.cpp:238]     Train net output #0: loss = 0.0635515 (* 1 = 0.0635515 loss)
I0428 20:37:11.834559  4896 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:37:12.090062  4896 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:37:12.209398  4910 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:37:12.213757  4896 solver.cpp:398]     Test net output #0: accuracy = 0.9738
I0428 20:37:12.213794  4896 solver.cpp:398]     Test net output #1: loss = 0.0819278 (* 1 = 0.0819278 loss)
I0428 20:37:12.216284  4896 solver.cpp:219] Iteration 500 (261.98 iter/s, 0.381708s/100 iters), loss = 0.10018
I0428 20:37:12.216320  4896 solver.cpp:238]     Train net output #0: loss = 0.10018 (* 1 = 0.10018 loss)
I0428 20:37:12.216327  4896 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:37:12.481328  4896 solver.cpp:219] Iteration 600 (377.351 iter/s, 0.265005s/100 iters), loss = 0.0705834
I0428 20:37:12.481369  4896 solver.cpp:238]     Train net output #0: loss = 0.0705833 (* 1 = 0.0705833 loss)
I0428 20:37:12.481376  4896 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:37:12.748765  4896 solver.cpp:219] Iteration 700 (373.983 iter/s, 0.267392s/100 iters), loss = 0.114887
I0428 20:37:12.748817  4896 solver.cpp:238]     Train net output #0: loss = 0.114887 (* 1 = 0.114887 loss)
I0428 20:37:12.748826  4896 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:37:13.019214  4896 solver.cpp:219] Iteration 800 (369.822 iter/s, 0.270401s/100 iters), loss = 0.162759
I0428 20:37:13.019242  4896 solver.cpp:238]     Train net output #0: loss = 0.162759 (* 1 = 0.162759 loss)
I0428 20:37:13.019248  4896 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:37:13.291869  4896 solver.cpp:219] Iteration 900 (366.825 iter/s, 0.272609s/100 iters), loss = 0.158896
I0428 20:37:13.291914  4896 solver.cpp:238]     Train net output #0: loss = 0.158896 (* 1 = 0.158896 loss)
I0428 20:37:13.291921  4896 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:37:13.380949  4909 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:37:13.561081  4896 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:37:13.566826  4896 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:37:13.570358  4896 solver.cpp:311] Iteration 1000, loss = 0.0804344
I0428 20:37:13.570374  4896 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:37:13.692952  4910 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:37:13.697580  4896 solver.cpp:398]     Test net output #0: accuracy = 0.98
I0428 20:37:13.697616  4896 solver.cpp:398]     Test net output #1: loss = 0.0588008 (* 1 = 0.0588008 loss)
I0428 20:37:13.697623  4896 solver.cpp:316] Optimization Done.
I0428 20:37:13.697625  4896 caffe.cpp:259] Optimization Done.
