I0428 20:07:05.905943 31025 caffe.cpp:218] Using GPUs 0
I0428 20:07:05.943575 31025 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:07:06.396926 31025 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1046.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:07:06.397073 31025 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1046.prototxt
I0428 20:07:06.397431 31025 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:07:06.397445 31025 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:07:06.397536 31025 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:07:06.397593 31025 layer_factory.hpp:77] Creating layer mnist
I0428 20:07:06.397676 31025 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:07:06.397696 31025 net.cpp:86] Creating Layer mnist
I0428 20:07:06.397701 31025 net.cpp:382] mnist -> data
I0428 20:07:06.397719 31025 net.cpp:382] mnist -> label
I0428 20:07:06.398633 31025 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:07:06.400800 31025 net.cpp:124] Setting up mnist
I0428 20:07:06.400835 31025 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:07:06.400856 31025 net.cpp:131] Top shape: 64 (64)
I0428 20:07:06.400861 31025 net.cpp:139] Memory required for data: 200960
I0428 20:07:06.400866 31025 layer_factory.hpp:77] Creating layer conv0
I0428 20:07:06.400879 31025 net.cpp:86] Creating Layer conv0
I0428 20:07:06.400897 31025 net.cpp:408] conv0 <- data
I0428 20:07:06.400907 31025 net.cpp:382] conv0 -> conv0
I0428 20:07:06.631592 31025 net.cpp:124] Setting up conv0
I0428 20:07:06.631634 31025 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:07:06.631639 31025 net.cpp:139] Memory required for data: 3887360
I0428 20:07:06.631651 31025 layer_factory.hpp:77] Creating layer pool0
I0428 20:07:06.631665 31025 net.cpp:86] Creating Layer pool0
I0428 20:07:06.631669 31025 net.cpp:408] pool0 <- conv0
I0428 20:07:06.631675 31025 net.cpp:382] pool0 -> pool0
I0428 20:07:06.631733 31025 net.cpp:124] Setting up pool0
I0428 20:07:06.631738 31025 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:07:06.631742 31025 net.cpp:139] Memory required for data: 4808960
I0428 20:07:06.631744 31025 layer_factory.hpp:77] Creating layer conv1
I0428 20:07:06.631755 31025 net.cpp:86] Creating Layer conv1
I0428 20:07:06.631758 31025 net.cpp:408] conv1 <- pool0
I0428 20:07:06.631763 31025 net.cpp:382] conv1 -> conv1
I0428 20:07:06.634529 31025 net.cpp:124] Setting up conv1
I0428 20:07:06.634558 31025 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:07:06.634562 31025 net.cpp:139] Memory required for data: 4890880
I0428 20:07:06.634570 31025 layer_factory.hpp:77] Creating layer pool1
I0428 20:07:06.634578 31025 net.cpp:86] Creating Layer pool1
I0428 20:07:06.634582 31025 net.cpp:408] pool1 <- conv1
I0428 20:07:06.634587 31025 net.cpp:382] pool1 -> pool1
I0428 20:07:06.634637 31025 net.cpp:124] Setting up pool1
I0428 20:07:06.634644 31025 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:07:06.634645 31025 net.cpp:139] Memory required for data: 4911360
I0428 20:07:06.634649 31025 layer_factory.hpp:77] Creating layer ip1
I0428 20:07:06.634655 31025 net.cpp:86] Creating Layer ip1
I0428 20:07:06.634658 31025 net.cpp:408] ip1 <- pool1
I0428 20:07:06.634662 31025 net.cpp:382] ip1 -> ip1
I0428 20:07:06.634778 31025 net.cpp:124] Setting up ip1
I0428 20:07:06.634786 31025 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:07:06.634789 31025 net.cpp:139] Memory required for data: 4924160
I0428 20:07:06.634795 31025 layer_factory.hpp:77] Creating layer relu1
I0428 20:07:06.634801 31025 net.cpp:86] Creating Layer relu1
I0428 20:07:06.634804 31025 net.cpp:408] relu1 <- ip1
I0428 20:07:06.634809 31025 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:07:06.634965 31025 net.cpp:124] Setting up relu1
I0428 20:07:06.634974 31025 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:07:06.634977 31025 net.cpp:139] Memory required for data: 4936960
I0428 20:07:06.634980 31025 layer_factory.hpp:77] Creating layer ip2
I0428 20:07:06.634985 31025 net.cpp:86] Creating Layer ip2
I0428 20:07:06.634989 31025 net.cpp:408] ip2 <- ip1
I0428 20:07:06.634994 31025 net.cpp:382] ip2 -> ip2
I0428 20:07:06.635102 31025 net.cpp:124] Setting up ip2
I0428 20:07:06.635109 31025 net.cpp:131] Top shape: 64 10 (640)
I0428 20:07:06.635113 31025 net.cpp:139] Memory required for data: 4939520
I0428 20:07:06.635118 31025 layer_factory.hpp:77] Creating layer relu2
I0428 20:07:06.635123 31025 net.cpp:86] Creating Layer relu2
I0428 20:07:06.635125 31025 net.cpp:408] relu2 <- ip2
I0428 20:07:06.635129 31025 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:07:06.635859 31025 net.cpp:124] Setting up relu2
I0428 20:07:06.635871 31025 net.cpp:131] Top shape: 64 10 (640)
I0428 20:07:06.635890 31025 net.cpp:139] Memory required for data: 4942080
I0428 20:07:06.635893 31025 layer_factory.hpp:77] Creating layer ip3
I0428 20:07:06.635900 31025 net.cpp:86] Creating Layer ip3
I0428 20:07:06.635905 31025 net.cpp:408] ip3 <- ip2
I0428 20:07:06.635910 31025 net.cpp:382] ip3 -> ip3
I0428 20:07:06.636004 31025 net.cpp:124] Setting up ip3
I0428 20:07:06.636011 31025 net.cpp:131] Top shape: 64 10 (640)
I0428 20:07:06.636014 31025 net.cpp:139] Memory required for data: 4944640
I0428 20:07:06.636021 31025 layer_factory.hpp:77] Creating layer relu3
I0428 20:07:06.636026 31025 net.cpp:86] Creating Layer relu3
I0428 20:07:06.636029 31025 net.cpp:408] relu3 <- ip3
I0428 20:07:06.636034 31025 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:07:06.636209 31025 net.cpp:124] Setting up relu3
I0428 20:07:06.636217 31025 net.cpp:131] Top shape: 64 10 (640)
I0428 20:07:06.636220 31025 net.cpp:139] Memory required for data: 4947200
I0428 20:07:06.636224 31025 layer_factory.hpp:77] Creating layer loss
I0428 20:07:06.636229 31025 net.cpp:86] Creating Layer loss
I0428 20:07:06.636232 31025 net.cpp:408] loss <- ip3
I0428 20:07:06.636236 31025 net.cpp:408] loss <- label
I0428 20:07:06.636241 31025 net.cpp:382] loss -> loss
I0428 20:07:06.636255 31025 layer_factory.hpp:77] Creating layer loss
I0428 20:07:06.636490 31025 net.cpp:124] Setting up loss
I0428 20:07:06.636498 31025 net.cpp:131] Top shape: (1)
I0428 20:07:06.636502 31025 net.cpp:134]     with loss weight 1
I0428 20:07:06.636514 31025 net.cpp:139] Memory required for data: 4947204
I0428 20:07:06.636518 31025 net.cpp:200] loss needs backward computation.
I0428 20:07:06.636521 31025 net.cpp:200] relu3 needs backward computation.
I0428 20:07:06.636524 31025 net.cpp:200] ip3 needs backward computation.
I0428 20:07:06.636528 31025 net.cpp:200] relu2 needs backward computation.
I0428 20:07:06.636529 31025 net.cpp:200] ip2 needs backward computation.
I0428 20:07:06.636533 31025 net.cpp:200] relu1 needs backward computation.
I0428 20:07:06.636535 31025 net.cpp:200] ip1 needs backward computation.
I0428 20:07:06.636538 31025 net.cpp:200] pool1 needs backward computation.
I0428 20:07:06.636540 31025 net.cpp:200] conv1 needs backward computation.
I0428 20:07:06.636543 31025 net.cpp:200] pool0 needs backward computation.
I0428 20:07:06.636546 31025 net.cpp:200] conv0 needs backward computation.
I0428 20:07:06.636550 31025 net.cpp:202] mnist does not need backward computation.
I0428 20:07:06.636553 31025 net.cpp:244] This network produces output loss
I0428 20:07:06.636561 31025 net.cpp:257] Network initialization done.
I0428 20:07:06.636958 31025 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1046.prototxt
I0428 20:07:06.637020 31025 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:07:06.637123 31025 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:07:06.637210 31025 layer_factory.hpp:77] Creating layer mnist
I0428 20:07:06.637300 31025 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:07:06.637311 31025 net.cpp:86] Creating Layer mnist
I0428 20:07:06.637316 31025 net.cpp:382] mnist -> data
I0428 20:07:06.637323 31025 net.cpp:382] mnist -> label
I0428 20:07:06.637408 31025 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:07:06.639499 31025 net.cpp:124] Setting up mnist
I0428 20:07:06.639528 31025 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:07:06.639549 31025 net.cpp:131] Top shape: 100 (100)
I0428 20:07:06.639552 31025 net.cpp:139] Memory required for data: 314000
I0428 20:07:06.639555 31025 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:07:06.639562 31025 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:07:06.639566 31025 net.cpp:408] label_mnist_1_split <- label
I0428 20:07:06.639570 31025 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:07:06.639577 31025 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:07:06.639633 31025 net.cpp:124] Setting up label_mnist_1_split
I0428 20:07:06.639643 31025 net.cpp:131] Top shape: 100 (100)
I0428 20:07:06.639650 31025 net.cpp:131] Top shape: 100 (100)
I0428 20:07:06.639655 31025 net.cpp:139] Memory required for data: 314800
I0428 20:07:06.639662 31025 layer_factory.hpp:77] Creating layer conv0
I0428 20:07:06.639674 31025 net.cpp:86] Creating Layer conv0
I0428 20:07:06.639685 31025 net.cpp:408] conv0 <- data
I0428 20:07:06.639694 31025 net.cpp:382] conv0 -> conv0
I0428 20:07:06.641281 31025 net.cpp:124] Setting up conv0
I0428 20:07:06.641294 31025 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:07:06.641314 31025 net.cpp:139] Memory required for data: 6074800
I0428 20:07:06.641337 31025 layer_factory.hpp:77] Creating layer pool0
I0428 20:07:06.641345 31025 net.cpp:86] Creating Layer pool0
I0428 20:07:06.641348 31025 net.cpp:408] pool0 <- conv0
I0428 20:07:06.641352 31025 net.cpp:382] pool0 -> pool0
I0428 20:07:06.641412 31025 net.cpp:124] Setting up pool0
I0428 20:07:06.641417 31025 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:07:06.641420 31025 net.cpp:139] Memory required for data: 7514800
I0428 20:07:06.641423 31025 layer_factory.hpp:77] Creating layer conv1
I0428 20:07:06.641432 31025 net.cpp:86] Creating Layer conv1
I0428 20:07:06.641434 31025 net.cpp:408] conv1 <- pool0
I0428 20:07:06.641439 31025 net.cpp:382] conv1 -> conv1
I0428 20:07:06.643504 31025 net.cpp:124] Setting up conv1
I0428 20:07:06.643518 31025 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:07:06.643540 31025 net.cpp:139] Memory required for data: 7642800
I0428 20:07:06.643548 31025 layer_factory.hpp:77] Creating layer pool1
I0428 20:07:06.643570 31025 net.cpp:86] Creating Layer pool1
I0428 20:07:06.643573 31025 net.cpp:408] pool1 <- conv1
I0428 20:07:06.643579 31025 net.cpp:382] pool1 -> pool1
I0428 20:07:06.643632 31025 net.cpp:124] Setting up pool1
I0428 20:07:06.643661 31025 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:07:06.643669 31025 net.cpp:139] Memory required for data: 7674800
I0428 20:07:06.643672 31025 layer_factory.hpp:77] Creating layer ip1
I0428 20:07:06.643679 31025 net.cpp:86] Creating Layer ip1
I0428 20:07:06.643682 31025 net.cpp:408] ip1 <- pool1
I0428 20:07:06.643687 31025 net.cpp:382] ip1 -> ip1
I0428 20:07:06.643826 31025 net.cpp:124] Setting up ip1
I0428 20:07:06.643832 31025 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:07:06.643847 31025 net.cpp:139] Memory required for data: 7694800
I0428 20:07:06.643854 31025 layer_factory.hpp:77] Creating layer relu1
I0428 20:07:06.643859 31025 net.cpp:86] Creating Layer relu1
I0428 20:07:06.643863 31025 net.cpp:408] relu1 <- ip1
I0428 20:07:06.643867 31025 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:07:06.644095 31025 net.cpp:124] Setting up relu1
I0428 20:07:06.644107 31025 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:07:06.644110 31025 net.cpp:139] Memory required for data: 7714800
I0428 20:07:06.644114 31025 layer_factory.hpp:77] Creating layer ip2
I0428 20:07:06.644120 31025 net.cpp:86] Creating Layer ip2
I0428 20:07:06.644124 31025 net.cpp:408] ip2 <- ip1
I0428 20:07:06.644129 31025 net.cpp:382] ip2 -> ip2
I0428 20:07:06.644227 31025 net.cpp:124] Setting up ip2
I0428 20:07:06.644235 31025 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:06.644240 31025 net.cpp:139] Memory required for data: 7718800
I0428 20:07:06.644249 31025 layer_factory.hpp:77] Creating layer relu2
I0428 20:07:06.644255 31025 net.cpp:86] Creating Layer relu2
I0428 20:07:06.644258 31025 net.cpp:408] relu2 <- ip2
I0428 20:07:06.644263 31025 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:07:06.644428 31025 net.cpp:124] Setting up relu2
I0428 20:07:06.644438 31025 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:06.644448 31025 net.cpp:139] Memory required for data: 7722800
I0428 20:07:06.644450 31025 layer_factory.hpp:77] Creating layer ip3
I0428 20:07:06.644456 31025 net.cpp:86] Creating Layer ip3
I0428 20:07:06.644460 31025 net.cpp:408] ip3 <- ip2
I0428 20:07:06.644465 31025 net.cpp:382] ip3 -> ip3
I0428 20:07:06.644564 31025 net.cpp:124] Setting up ip3
I0428 20:07:06.644572 31025 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:06.644575 31025 net.cpp:139] Memory required for data: 7726800
I0428 20:07:06.644583 31025 layer_factory.hpp:77] Creating layer relu3
I0428 20:07:06.644587 31025 net.cpp:86] Creating Layer relu3
I0428 20:07:06.644590 31025 net.cpp:408] relu3 <- ip3
I0428 20:07:06.644595 31025 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:07:06.645433 31025 net.cpp:124] Setting up relu3
I0428 20:07:06.645460 31025 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:06.645464 31025 net.cpp:139] Memory required for data: 7730800
I0428 20:07:06.645467 31025 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:07:06.645473 31025 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:07:06.645476 31025 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:07:06.645481 31025 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:07:06.645494 31025 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:07:06.645565 31025 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:07:06.645572 31025 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:06.645576 31025 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:06.645578 31025 net.cpp:139] Memory required for data: 7738800
I0428 20:07:06.645581 31025 layer_factory.hpp:77] Creating layer accuracy
I0428 20:07:06.645586 31025 net.cpp:86] Creating Layer accuracy
I0428 20:07:06.645589 31025 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:07:06.645594 31025 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:07:06.645598 31025 net.cpp:382] accuracy -> accuracy
I0428 20:07:06.645606 31025 net.cpp:124] Setting up accuracy
I0428 20:07:06.645609 31025 net.cpp:131] Top shape: (1)
I0428 20:07:06.645612 31025 net.cpp:139] Memory required for data: 7738804
I0428 20:07:06.645614 31025 layer_factory.hpp:77] Creating layer loss
I0428 20:07:06.645618 31025 net.cpp:86] Creating Layer loss
I0428 20:07:06.645622 31025 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:07:06.645625 31025 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:07:06.645629 31025 net.cpp:382] loss -> loss
I0428 20:07:06.645635 31025 layer_factory.hpp:77] Creating layer loss
I0428 20:07:06.645890 31025 net.cpp:124] Setting up loss
I0428 20:07:06.645900 31025 net.cpp:131] Top shape: (1)
I0428 20:07:06.645905 31025 net.cpp:134]     with loss weight 1
I0428 20:07:06.645911 31025 net.cpp:139] Memory required for data: 7738808
I0428 20:07:06.645926 31025 net.cpp:200] loss needs backward computation.
I0428 20:07:06.645931 31025 net.cpp:202] accuracy does not need backward computation.
I0428 20:07:06.645934 31025 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:07:06.645938 31025 net.cpp:200] relu3 needs backward computation.
I0428 20:07:06.645941 31025 net.cpp:200] ip3 needs backward computation.
I0428 20:07:06.645944 31025 net.cpp:200] relu2 needs backward computation.
I0428 20:07:06.645947 31025 net.cpp:200] ip2 needs backward computation.
I0428 20:07:06.645951 31025 net.cpp:200] relu1 needs backward computation.
I0428 20:07:06.645953 31025 net.cpp:200] ip1 needs backward computation.
I0428 20:07:06.645957 31025 net.cpp:200] pool1 needs backward computation.
I0428 20:07:06.645961 31025 net.cpp:200] conv1 needs backward computation.
I0428 20:07:06.645964 31025 net.cpp:200] pool0 needs backward computation.
I0428 20:07:06.645967 31025 net.cpp:200] conv0 needs backward computation.
I0428 20:07:06.645972 31025 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:07:06.645975 31025 net.cpp:202] mnist does not need backward computation.
I0428 20:07:06.645978 31025 net.cpp:244] This network produces output accuracy
I0428 20:07:06.645982 31025 net.cpp:244] This network produces output loss
I0428 20:07:06.645993 31025 net.cpp:257] Network initialization done.
I0428 20:07:06.646037 31025 solver.cpp:56] Solver scaffolding done.
I0428 20:07:06.646392 31025 caffe.cpp:248] Starting Optimization
I0428 20:07:06.646399 31025 solver.cpp:273] Solving LeNet
I0428 20:07:06.646401 31025 solver.cpp:274] Learning Rate Policy: inv
I0428 20:07:06.647224 31025 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:07:06.652369 31025 blocking_queue.cpp:49] Waiting for data
I0428 20:07:06.725410 31032 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:06.726008 31025 solver.cpp:398]     Test net output #0: accuracy = 0.091
I0428 20:07:06.726043 31025 solver.cpp:398]     Test net output #1: loss = 2.3132 (* 1 = 2.3132 loss)
I0428 20:07:06.729841 31025 solver.cpp:219] Iteration 0 (-1.63779e-31 iter/s, 0.0833885s/100 iters), loss = 2.28577
I0428 20:07:06.729866 31025 solver.cpp:238]     Train net output #0: loss = 2.28577 (* 1 = 2.28577 loss)
I0428 20:07:06.729877 31025 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:07:06.818495 31025 solver.cpp:219] Iteration 100 (1128.41 iter/s, 0.08862s/100 iters), loss = 1.1629
I0428 20:07:06.818521 31025 solver.cpp:238]     Train net output #0: loss = 1.1629 (* 1 = 1.1629 loss)
I0428 20:07:06.818526 31025 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:07:06.907881 31025 solver.cpp:219] Iteration 200 (1119.19 iter/s, 0.0893501s/100 iters), loss = 0.952398
I0428 20:07:06.907919 31025 solver.cpp:238]     Train net output #0: loss = 0.952398 (* 1 = 0.952398 loss)
I0428 20:07:06.907925 31025 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:07:06.996217 31025 solver.cpp:219] Iteration 300 (1132.44 iter/s, 0.0883046s/100 iters), loss = 0.812087
I0428 20:07:06.996256 31025 solver.cpp:238]     Train net output #0: loss = 0.812087 (* 1 = 0.812087 loss)
I0428 20:07:06.996263 31025 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:07:07.085955 31025 solver.cpp:219] Iteration 400 (1114.77 iter/s, 0.0897044s/100 iters), loss = 0.508188
I0428 20:07:07.085994 31025 solver.cpp:238]     Train net output #0: loss = 0.508188 (* 1 = 0.508188 loss)
I0428 20:07:07.086001 31025 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:07:07.173483 31025 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:07:07.227660 31032 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:07.228271 31025 solver.cpp:398]     Test net output #0: accuracy = 0.735
I0428 20:07:07.228304 31025 solver.cpp:398]     Test net output #1: loss = 0.690633 (* 1 = 0.690633 loss)
I0428 20:07:07.229284 31025 solver.cpp:219] Iteration 500 (697.888 iter/s, 0.143289s/100 iters), loss = 0.625044
I0428 20:07:07.229356 31025 solver.cpp:238]     Train net output #0: loss = 0.625044 (* 1 = 0.625044 loss)
I0428 20:07:07.229378 31025 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:07:07.326406 31025 solver.cpp:219] Iteration 600 (1030.41 iter/s, 0.097049s/100 iters), loss = 0.7046
I0428 20:07:07.326462 31025 solver.cpp:238]     Train net output #0: loss = 0.7046 (* 1 = 0.7046 loss)
I0428 20:07:07.326468 31025 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:07:07.416671 31025 solver.cpp:219] Iteration 700 (1108.46 iter/s, 0.0902154s/100 iters), loss = 0.689278
I0428 20:07:07.416710 31025 solver.cpp:238]     Train net output #0: loss = 0.689278 (* 1 = 0.689278 loss)
I0428 20:07:07.416716 31025 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:07:07.504108 31025 solver.cpp:219] Iteration 800 (1144.12 iter/s, 0.0874035s/100 iters), loss = 0.603558
I0428 20:07:07.504164 31025 solver.cpp:238]     Train net output #0: loss = 0.603558 (* 1 = 0.603558 loss)
I0428 20:07:07.504171 31025 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:07:07.592171 31025 solver.cpp:219] Iteration 900 (1136.21 iter/s, 0.0880119s/100 iters), loss = 0.735662
I0428 20:07:07.592213 31025 solver.cpp:238]     Train net output #0: loss = 0.735662 (* 1 = 0.735662 loss)
I0428 20:07:07.592221 31025 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:07:07.621033 31031 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:07.678536 31025 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:07:07.679352 31025 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:07:07.680011 31025 solver.cpp:311] Iteration 1000, loss = 0.733226
I0428 20:07:07.680027 31025 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:07:07.733834 31032 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:07.734483 31025 solver.cpp:398]     Test net output #0: accuracy = 0.7623
I0428 20:07:07.734518 31025 solver.cpp:398]     Test net output #1: loss = 0.597443 (* 1 = 0.597443 loss)
I0428 20:07:07.734524 31025 solver.cpp:316] Optimization Done.
I0428 20:07:07.734526 31025 caffe.cpp:259] Optimization Done.
