I0428 20:02:43.978601 30005 caffe.cpp:218] Using GPUs 0
I0428 20:02:44.015672 30005 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:44.474180 30005 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test936.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:44.474328 30005 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test936.prototxt
I0428 20:02:44.474604 30005 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:44.474618 30005 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:44.474684 30005 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:02:44.474738 30005 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:44.474819 30005 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:44.474838 30005 net.cpp:86] Creating Layer mnist
I0428 20:02:44.474846 30005 net.cpp:382] mnist -> data
I0428 20:02:44.474865 30005 net.cpp:382] mnist -> label
I0428 20:02:44.475757 30005 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:44.478016 30005 net.cpp:124] Setting up mnist
I0428 20:02:44.478067 30005 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:44.478073 30005 net.cpp:131] Top shape: 64 (64)
I0428 20:02:44.478076 30005 net.cpp:139] Memory required for data: 200960
I0428 20:02:44.478083 30005 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:44.478098 30005 net.cpp:86] Creating Layer conv0
I0428 20:02:44.478104 30005 net.cpp:408] conv0 <- data
I0428 20:02:44.478114 30005 net.cpp:382] conv0 -> conv0
I0428 20:02:44.735870 30005 net.cpp:124] Setting up conv0
I0428 20:02:44.735895 30005 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:44.735900 30005 net.cpp:139] Memory required for data: 1675520
I0428 20:02:44.735918 30005 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:44.735941 30005 net.cpp:86] Creating Layer pool0
I0428 20:02:44.735946 30005 net.cpp:408] pool0 <- conv0
I0428 20:02:44.735951 30005 net.cpp:382] pool0 -> pool0
I0428 20:02:44.736013 30005 net.cpp:124] Setting up pool0
I0428 20:02:44.736021 30005 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:44.736052 30005 net.cpp:139] Memory required for data: 2044160
I0428 20:02:44.736055 30005 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:44.736069 30005 net.cpp:86] Creating Layer conv1
I0428 20:02:44.736073 30005 net.cpp:408] conv1 <- pool0
I0428 20:02:44.736079 30005 net.cpp:382] conv1 -> conv1
I0428 20:02:44.738258 30005 net.cpp:124] Setting up conv1
I0428 20:02:44.738275 30005 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:02:44.738278 30005 net.cpp:139] Memory required for data: 3682560
I0428 20:02:44.738286 30005 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:44.738294 30005 net.cpp:86] Creating Layer pool1
I0428 20:02:44.738298 30005 net.cpp:408] pool1 <- conv1
I0428 20:02:44.738304 30005 net.cpp:382] pool1 -> pool1
I0428 20:02:44.738343 30005 net.cpp:124] Setting up pool1
I0428 20:02:44.738350 30005 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:02:44.738369 30005 net.cpp:139] Memory required for data: 4092160
I0428 20:02:44.738373 30005 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:44.738382 30005 net.cpp:86] Creating Layer ip1
I0428 20:02:44.738385 30005 net.cpp:408] ip1 <- pool1
I0428 20:02:44.738391 30005 net.cpp:382] ip1 -> ip1
I0428 20:02:44.739464 30005 net.cpp:124] Setting up ip1
I0428 20:02:44.739478 30005 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:44.739481 30005 net.cpp:139] Memory required for data: 4094720
I0428 20:02:44.739490 30005 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:44.739502 30005 net.cpp:86] Creating Layer relu1
I0428 20:02:44.739516 30005 net.cpp:408] relu1 <- ip1
I0428 20:02:44.739522 30005 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:44.739703 30005 net.cpp:124] Setting up relu1
I0428 20:02:44.739714 30005 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:44.739719 30005 net.cpp:139] Memory required for data: 4097280
I0428 20:02:44.739722 30005 layer_factory.hpp:77] Creating layer loss
I0428 20:02:44.739745 30005 net.cpp:86] Creating Layer loss
I0428 20:02:44.739748 30005 net.cpp:408] loss <- ip1
I0428 20:02:44.739753 30005 net.cpp:408] loss <- label
I0428 20:02:44.739758 30005 net.cpp:382] loss -> loss
I0428 20:02:44.739776 30005 layer_factory.hpp:77] Creating layer loss
I0428 20:02:44.740634 30005 net.cpp:124] Setting up loss
I0428 20:02:44.740648 30005 net.cpp:131] Top shape: (1)
I0428 20:02:44.740650 30005 net.cpp:134]     with loss weight 1
I0428 20:02:44.740670 30005 net.cpp:139] Memory required for data: 4097284
I0428 20:02:44.740674 30005 net.cpp:200] loss needs backward computation.
I0428 20:02:44.740679 30005 net.cpp:200] relu1 needs backward computation.
I0428 20:02:44.740681 30005 net.cpp:200] ip1 needs backward computation.
I0428 20:02:44.740684 30005 net.cpp:200] pool1 needs backward computation.
I0428 20:02:44.740687 30005 net.cpp:200] conv1 needs backward computation.
I0428 20:02:44.740690 30005 net.cpp:200] pool0 needs backward computation.
I0428 20:02:44.740694 30005 net.cpp:200] conv0 needs backward computation.
I0428 20:02:44.740698 30005 net.cpp:202] mnist does not need backward computation.
I0428 20:02:44.740701 30005 net.cpp:244] This network produces output loss
I0428 20:02:44.740710 30005 net.cpp:257] Network initialization done.
I0428 20:02:44.741034 30005 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test936.prototxt
I0428 20:02:44.741061 30005 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:44.741168 30005 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:02:44.741271 30005 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:44.741317 30005 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:44.741336 30005 net.cpp:86] Creating Layer mnist
I0428 20:02:44.741343 30005 net.cpp:382] mnist -> data
I0428 20:02:44.741353 30005 net.cpp:382] mnist -> label
I0428 20:02:44.741453 30005 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:44.743436 30005 net.cpp:124] Setting up mnist
I0428 20:02:44.743459 30005 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:44.743464 30005 net.cpp:131] Top shape: 100 (100)
I0428 20:02:44.743468 30005 net.cpp:139] Memory required for data: 314000
I0428 20:02:44.743472 30005 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:44.743522 30005 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:44.743528 30005 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:44.743535 30005 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:44.743542 30005 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:44.743656 30005 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:44.743664 30005 net.cpp:131] Top shape: 100 (100)
I0428 20:02:44.743670 30005 net.cpp:131] Top shape: 100 (100)
I0428 20:02:44.743674 30005 net.cpp:139] Memory required for data: 314800
I0428 20:02:44.743693 30005 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:44.743703 30005 net.cpp:86] Creating Layer conv0
I0428 20:02:44.743710 30005 net.cpp:408] conv0 <- data
I0428 20:02:44.743716 30005 net.cpp:382] conv0 -> conv0
I0428 20:02:44.744573 30005 net.cpp:124] Setting up conv0
I0428 20:02:44.744586 30005 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:44.744606 30005 net.cpp:139] Memory required for data: 2618800
I0428 20:02:44.744616 30005 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:44.744623 30005 net.cpp:86] Creating Layer pool0
I0428 20:02:44.744627 30005 net.cpp:408] pool0 <- conv0
I0428 20:02:44.744634 30005 net.cpp:382] pool0 -> pool0
I0428 20:02:44.744673 30005 net.cpp:124] Setting up pool0
I0428 20:02:44.744680 30005 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:44.744683 30005 net.cpp:139] Memory required for data: 3194800
I0428 20:02:44.744686 30005 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:44.744696 30005 net.cpp:86] Creating Layer conv1
I0428 20:02:44.744702 30005 net.cpp:408] conv1 <- pool0
I0428 20:02:44.744710 30005 net.cpp:382] conv1 -> conv1
I0428 20:02:44.746438 30005 net.cpp:124] Setting up conv1
I0428 20:02:44.746470 30005 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:02:44.746475 30005 net.cpp:139] Memory required for data: 5754800
I0428 20:02:44.746484 30005 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:44.746493 30005 net.cpp:86] Creating Layer pool1
I0428 20:02:44.746508 30005 net.cpp:408] pool1 <- conv1
I0428 20:02:44.746520 30005 net.cpp:382] pool1 -> pool1
I0428 20:02:44.746577 30005 net.cpp:124] Setting up pool1
I0428 20:02:44.746584 30005 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:02:44.746587 30005 net.cpp:139] Memory required for data: 6394800
I0428 20:02:44.746590 30005 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:44.746598 30005 net.cpp:86] Creating Layer ip1
I0428 20:02:44.746601 30005 net.cpp:408] ip1 <- pool1
I0428 20:02:44.746608 30005 net.cpp:382] ip1 -> ip1
I0428 20:02:44.746810 30005 net.cpp:124] Setting up ip1
I0428 20:02:44.746819 30005 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:44.746822 30005 net.cpp:139] Memory required for data: 6398800
I0428 20:02:44.746831 30005 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:44.746836 30005 net.cpp:86] Creating Layer relu1
I0428 20:02:44.746840 30005 net.cpp:408] relu1 <- ip1
I0428 20:02:44.746845 30005 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:44.747692 30005 net.cpp:124] Setting up relu1
I0428 20:02:44.747705 30005 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:44.747725 30005 net.cpp:139] Memory required for data: 6402800
I0428 20:02:44.747728 30005 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:02:44.747736 30005 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:02:44.747740 30005 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:02:44.747747 30005 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:02:44.747755 30005 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:02:44.747793 30005 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:02:44.747803 30005 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:44.747807 30005 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:44.747810 30005 net.cpp:139] Memory required for data: 6410800
I0428 20:02:44.747814 30005 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:44.747819 30005 net.cpp:86] Creating Layer accuracy
I0428 20:02:44.747823 30005 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:02:44.747828 30005 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:44.747833 30005 net.cpp:382] accuracy -> accuracy
I0428 20:02:44.747840 30005 net.cpp:124] Setting up accuracy
I0428 20:02:44.747844 30005 net.cpp:131] Top shape: (1)
I0428 20:02:44.747848 30005 net.cpp:139] Memory required for data: 6410804
I0428 20:02:44.747851 30005 layer_factory.hpp:77] Creating layer loss
I0428 20:02:44.747858 30005 net.cpp:86] Creating Layer loss
I0428 20:02:44.747861 30005 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:02:44.747865 30005 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:44.747869 30005 net.cpp:382] loss -> loss
I0428 20:02:44.747876 30005 layer_factory.hpp:77] Creating layer loss
I0428 20:02:44.748129 30005 net.cpp:124] Setting up loss
I0428 20:02:44.748142 30005 net.cpp:131] Top shape: (1)
I0428 20:02:44.748145 30005 net.cpp:134]     with loss weight 1
I0428 20:02:44.748153 30005 net.cpp:139] Memory required for data: 6410808
I0428 20:02:44.748157 30005 net.cpp:200] loss needs backward computation.
I0428 20:02:44.748162 30005 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:44.748167 30005 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:02:44.748169 30005 net.cpp:200] relu1 needs backward computation.
I0428 20:02:44.748172 30005 net.cpp:200] ip1 needs backward computation.
I0428 20:02:44.748177 30005 net.cpp:200] pool1 needs backward computation.
I0428 20:02:44.748179 30005 net.cpp:200] conv1 needs backward computation.
I0428 20:02:44.748183 30005 net.cpp:200] pool0 needs backward computation.
I0428 20:02:44.748186 30005 net.cpp:200] conv0 needs backward computation.
I0428 20:02:44.748191 30005 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:44.748195 30005 net.cpp:202] mnist does not need backward computation.
I0428 20:02:44.748198 30005 net.cpp:244] This network produces output accuracy
I0428 20:02:44.748201 30005 net.cpp:244] This network produces output loss
I0428 20:02:44.748222 30005 net.cpp:257] Network initialization done.
I0428 20:02:44.748261 30005 solver.cpp:56] Solver scaffolding done.
I0428 20:02:44.748538 30005 caffe.cpp:248] Starting Optimization
I0428 20:02:44.748543 30005 solver.cpp:273] Solving LeNet
I0428 20:02:44.748546 30005 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:44.748672 30005 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:44.754765 30005 blocking_queue.cpp:49] Waiting for data
I0428 20:02:44.809566 30050 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:44.810148 30005 solver.cpp:398]     Test net output #0: accuracy = 0.1295
I0428 20:02:44.810168 30005 solver.cpp:398]     Test net output #1: loss = 2.32177 (* 1 = 2.32177 loss)
I0428 20:02:44.813614 30005 solver.cpp:219] Iteration 0 (-4.84958e-31 iter/s, 0.0650409s/100 iters), loss = 2.33189
I0428 20:02:44.813639 30005 solver.cpp:238]     Train net output #0: loss = 2.33189 (* 1 = 2.33189 loss)
I0428 20:02:44.813652 30005 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:44.947036 30005 solver.cpp:219] Iteration 100 (749.727 iter/s, 0.133382s/100 iters), loss = 1.60678
I0428 20:02:44.947083 30005 solver.cpp:238]     Train net output #0: loss = 1.60678 (* 1 = 1.60678 loss)
I0428 20:02:44.947090 30005 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:45.083962 30005 solver.cpp:219] Iteration 200 (730.544 iter/s, 0.136884s/100 iters), loss = 1.50773
I0428 20:02:45.084004 30005 solver.cpp:238]     Train net output #0: loss = 1.50773 (* 1 = 1.50773 loss)
I0428 20:02:45.084012 30005 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:45.236932 30005 solver.cpp:219] Iteration 300 (653.901 iter/s, 0.152928s/100 iters), loss = 1.43584
I0428 20:02:45.236963 30005 solver.cpp:238]     Train net output #0: loss = 1.43584 (* 1 = 1.43584 loss)
I0428 20:02:45.236976 30005 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:45.380235 30005 solver.cpp:219] Iteration 400 (698.028 iter/s, 0.143261s/100 iters), loss = 1.40419
I0428 20:02:45.380264 30005 solver.cpp:238]     Train net output #0: loss = 1.40419 (* 1 = 1.40419 loss)
I0428 20:02:45.380272 30005 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:45.522117 30005 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:45.580211 30050 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:45.582033 30005 solver.cpp:398]     Test net output #0: accuracy = 0.5717
I0428 20:02:45.582063 30005 solver.cpp:398]     Test net output #1: loss = 1.06855 (* 1 = 1.06855 loss)
I0428 20:02:45.583443 30005 solver.cpp:219] Iteration 500 (492.217 iter/s, 0.203163s/100 iters), loss = 1.25994
I0428 20:02:45.583473 30005 solver.cpp:238]     Train net output #0: loss = 1.25994 (* 1 = 1.25994 loss)
I0428 20:02:45.583482 30005 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:45.729588 30005 solver.cpp:219] Iteration 600 (684.452 iter/s, 0.146102s/100 iters), loss = 1.04349
I0428 20:02:45.729619 30005 solver.cpp:238]     Train net output #0: loss = 1.04349 (* 1 = 1.04349 loss)
I0428 20:02:45.729627 30005 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:45.874532 30005 solver.cpp:219] Iteration 700 (690.126 iter/s, 0.144901s/100 iters), loss = 0.634154
I0428 20:02:45.874563 30005 solver.cpp:238]     Train net output #0: loss = 0.634154 (* 1 = 0.634154 loss)
I0428 20:02:45.874572 30005 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:46.019083 30005 solver.cpp:219] Iteration 800 (692.057 iter/s, 0.144497s/100 iters), loss = 0.913125
I0428 20:02:46.019125 30005 solver.cpp:238]     Train net output #0: loss = 0.913125 (* 1 = 0.913125 loss)
I0428 20:02:46.019134 30005 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:46.163470 30005 solver.cpp:219] Iteration 900 (692.794 iter/s, 0.144343s/100 iters), loss = 0.993324
I0428 20:02:46.163501 30005 solver.cpp:238]     Train net output #0: loss = 0.993324 (* 1 = 0.993324 loss)
I0428 20:02:46.163509 30005 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:46.212069 30011 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:46.306217 30005 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:46.308046 30005 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:46.308887 30005 solver.cpp:311] Iteration 1000, loss = 0.792256
I0428 20:02:46.308905 30005 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:46.380862 30050 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:46.381464 30005 solver.cpp:398]     Test net output #0: accuracy = 0.673
I0428 20:02:46.381487 30005 solver.cpp:398]     Test net output #1: loss = 0.79754 (* 1 = 0.79754 loss)
I0428 20:02:46.381494 30005 solver.cpp:316] Optimization Done.
I0428 20:02:46.381497 30005 caffe.cpp:259] Optimization Done.
