I0428 19:53:56.377885 27901 caffe.cpp:218] Using GPUs 0
I0428 19:53:56.406674 27901 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:53:56.848598 27901 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test700.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:53:56.848731 27901 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test700.prototxt
I0428 19:53:56.849143 27901 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:53:56.849174 27901 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:53:56.849268 27901 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:56.849333 27901 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:56.849416 27901 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:53:56.849436 27901 net.cpp:86] Creating Layer mnist
I0428 19:53:56.849442 27901 net.cpp:382] mnist -> data
I0428 19:53:56.849462 27901 net.cpp:382] mnist -> label
I0428 19:53:56.850392 27901 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:53:56.852603 27901 net.cpp:124] Setting up mnist
I0428 19:53:56.852648 27901 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:53:56.852653 27901 net.cpp:131] Top shape: 64 (64)
I0428 19:53:56.852656 27901 net.cpp:139] Memory required for data: 200960
I0428 19:53:56.852663 27901 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:56.852674 27901 net.cpp:86] Creating Layer conv0
I0428 19:53:56.852691 27901 net.cpp:408] conv0 <- data
I0428 19:53:56.852705 27901 net.cpp:382] conv0 -> conv0
I0428 19:53:57.077069 27901 net.cpp:124] Setting up conv0
I0428 19:53:57.077109 27901 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:53:57.077113 27901 net.cpp:139] Memory required for data: 938240
I0428 19:53:57.077144 27901 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:57.077172 27901 net.cpp:86] Creating Layer pool0
I0428 19:53:57.077177 27901 net.cpp:408] pool0 <- conv0
I0428 19:53:57.077198 27901 net.cpp:382] pool0 -> pool0
I0428 19:53:57.077241 27901 net.cpp:124] Setting up pool0
I0428 19:53:57.077246 27901 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:53:57.077250 27901 net.cpp:139] Memory required for data: 1122560
I0428 19:53:57.077252 27901 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:57.077263 27901 net.cpp:86] Creating Layer conv1
I0428 19:53:57.077266 27901 net.cpp:408] conv1 <- pool0
I0428 19:53:57.077271 27901 net.cpp:382] conv1 -> conv1
I0428 19:53:57.080086 27901 net.cpp:124] Setting up conv1
I0428 19:53:57.080117 27901 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:53:57.080121 27901 net.cpp:139] Memory required for data: 1941760
I0428 19:53:57.080129 27901 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:57.080137 27901 net.cpp:86] Creating Layer pool1
I0428 19:53:57.080140 27901 net.cpp:408] pool1 <- conv1
I0428 19:53:57.080145 27901 net.cpp:382] pool1 -> pool1
I0428 19:53:57.080198 27901 net.cpp:124] Setting up pool1
I0428 19:53:57.080204 27901 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:53:57.080205 27901 net.cpp:139] Memory required for data: 2146560
I0428 19:53:57.080209 27901 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:57.080216 27901 net.cpp:86] Creating Layer ip1
I0428 19:53:57.080219 27901 net.cpp:408] ip1 <- pool1
I0428 19:53:57.080224 27901 net.cpp:382] ip1 -> ip1
I0428 19:53:57.080585 27901 net.cpp:124] Setting up ip1
I0428 19:53:57.080591 27901 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:57.080610 27901 net.cpp:139] Memory required for data: 2159360
I0428 19:53:57.080616 27901 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:57.080623 27901 net.cpp:86] Creating Layer relu1
I0428 19:53:57.080627 27901 net.cpp:408] relu1 <- ip1
I0428 19:53:57.080631 27901 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:57.080806 27901 net.cpp:124] Setting up relu1
I0428 19:53:57.080835 27901 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:57.080838 27901 net.cpp:139] Memory required for data: 2172160
I0428 19:53:57.080842 27901 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:57.080848 27901 net.cpp:86] Creating Layer ip2
I0428 19:53:57.080852 27901 net.cpp:408] ip2 <- ip1
I0428 19:53:57.080857 27901 net.cpp:382] ip2 -> ip2
I0428 19:53:57.081907 27901 net.cpp:124] Setting up ip2
I0428 19:53:57.081919 27901 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:57.081938 27901 net.cpp:139] Memory required for data: 2184960
I0428 19:53:57.081944 27901 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:57.081953 27901 net.cpp:86] Creating Layer relu2
I0428 19:53:57.081955 27901 net.cpp:408] relu2 <- ip2
I0428 19:53:57.081960 27901 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:57.082772 27901 net.cpp:124] Setting up relu2
I0428 19:53:57.082785 27901 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:57.082806 27901 net.cpp:139] Memory required for data: 2197760
I0428 19:53:57.082810 27901 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:57.082818 27901 net.cpp:86] Creating Layer ip3
I0428 19:53:57.082821 27901 net.cpp:408] ip3 <- ip2
I0428 19:53:57.082828 27901 net.cpp:382] ip3 -> ip3
I0428 19:53:57.082978 27901 net.cpp:124] Setting up ip3
I0428 19:53:57.082985 27901 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:57.082988 27901 net.cpp:139] Memory required for data: 2200320
I0428 19:53:57.082996 27901 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:57.083001 27901 net.cpp:86] Creating Layer relu3
I0428 19:53:57.083004 27901 net.cpp:408] relu3 <- ip3
I0428 19:53:57.083009 27901 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:57.083173 27901 net.cpp:124] Setting up relu3
I0428 19:53:57.083181 27901 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:57.083184 27901 net.cpp:139] Memory required for data: 2202880
I0428 19:53:57.083187 27901 layer_factory.hpp:77] Creating layer loss
I0428 19:53:57.083192 27901 net.cpp:86] Creating Layer loss
I0428 19:53:57.083206 27901 net.cpp:408] loss <- ip3
I0428 19:53:57.083209 27901 net.cpp:408] loss <- label
I0428 19:53:57.083217 27901 net.cpp:382] loss -> loss
I0428 19:53:57.083231 27901 layer_factory.hpp:77] Creating layer loss
I0428 19:53:57.083480 27901 net.cpp:124] Setting up loss
I0428 19:53:57.083489 27901 net.cpp:131] Top shape: (1)
I0428 19:53:57.083492 27901 net.cpp:134]     with loss weight 1
I0428 19:53:57.083506 27901 net.cpp:139] Memory required for data: 2202884
I0428 19:53:57.083509 27901 net.cpp:200] loss needs backward computation.
I0428 19:53:57.083513 27901 net.cpp:200] relu3 needs backward computation.
I0428 19:53:57.083516 27901 net.cpp:200] ip3 needs backward computation.
I0428 19:53:57.083519 27901 net.cpp:200] relu2 needs backward computation.
I0428 19:53:57.083521 27901 net.cpp:200] ip2 needs backward computation.
I0428 19:53:57.083524 27901 net.cpp:200] relu1 needs backward computation.
I0428 19:53:57.083528 27901 net.cpp:200] ip1 needs backward computation.
I0428 19:53:57.083530 27901 net.cpp:200] pool1 needs backward computation.
I0428 19:53:57.083534 27901 net.cpp:200] conv1 needs backward computation.
I0428 19:53:57.083536 27901 net.cpp:200] pool0 needs backward computation.
I0428 19:53:57.083539 27901 net.cpp:200] conv0 needs backward computation.
I0428 19:53:57.083542 27901 net.cpp:202] mnist does not need backward computation.
I0428 19:53:57.083545 27901 net.cpp:244] This network produces output loss
I0428 19:53:57.083555 27901 net.cpp:257] Network initialization done.
I0428 19:53:57.083928 27901 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test700.prototxt
I0428 19:53:57.083969 27901 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:53:57.084079 27901 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:57.084162 27901 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:57.084205 27901 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:53:57.084218 27901 net.cpp:86] Creating Layer mnist
I0428 19:53:57.084223 27901 net.cpp:382] mnist -> data
I0428 19:53:57.084230 27901 net.cpp:382] mnist -> label
I0428 19:53:57.084311 27901 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:53:57.086469 27901 net.cpp:124] Setting up mnist
I0428 19:53:57.086498 27901 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:53:57.086501 27901 net.cpp:131] Top shape: 100 (100)
I0428 19:53:57.086505 27901 net.cpp:139] Memory required for data: 314000
I0428 19:53:57.086508 27901 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:53:57.086541 27901 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:53:57.086545 27901 net.cpp:408] label_mnist_1_split <- label
I0428 19:53:57.086549 27901 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:53:57.086555 27901 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:53:57.086593 27901 net.cpp:124] Setting up label_mnist_1_split
I0428 19:53:57.086598 27901 net.cpp:131] Top shape: 100 (100)
I0428 19:53:57.086601 27901 net.cpp:131] Top shape: 100 (100)
I0428 19:53:57.086604 27901 net.cpp:139] Memory required for data: 314800
I0428 19:53:57.086606 27901 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:57.086616 27901 net.cpp:86] Creating Layer conv0
I0428 19:53:57.086618 27901 net.cpp:408] conv0 <- data
I0428 19:53:57.086623 27901 net.cpp:382] conv0 -> conv0
I0428 19:53:57.088382 27901 net.cpp:124] Setting up conv0
I0428 19:53:57.088397 27901 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:53:57.088399 27901 net.cpp:139] Memory required for data: 1466800
I0428 19:53:57.088408 27901 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:57.088424 27901 net.cpp:86] Creating Layer pool0
I0428 19:53:57.088428 27901 net.cpp:408] pool0 <- conv0
I0428 19:53:57.088433 27901 net.cpp:382] pool0 -> pool0
I0428 19:53:57.088469 27901 net.cpp:124] Setting up pool0
I0428 19:53:57.088474 27901 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:53:57.088476 27901 net.cpp:139] Memory required for data: 1754800
I0428 19:53:57.088479 27901 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:57.088488 27901 net.cpp:86] Creating Layer conv1
I0428 19:53:57.088491 27901 net.cpp:408] conv1 <- pool0
I0428 19:53:57.088496 27901 net.cpp:382] conv1 -> conv1
I0428 19:53:57.090227 27901 net.cpp:124] Setting up conv1
I0428 19:53:57.090241 27901 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:53:57.090245 27901 net.cpp:139] Memory required for data: 3034800
I0428 19:53:57.090255 27901 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:57.090262 27901 net.cpp:86] Creating Layer pool1
I0428 19:53:57.090273 27901 net.cpp:408] pool1 <- conv1
I0428 19:53:57.090281 27901 net.cpp:382] pool1 -> pool1
I0428 19:53:57.090317 27901 net.cpp:124] Setting up pool1
I0428 19:53:57.090337 27901 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:53:57.090347 27901 net.cpp:139] Memory required for data: 3354800
I0428 19:53:57.090349 27901 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:57.090356 27901 net.cpp:86] Creating Layer ip1
I0428 19:53:57.090379 27901 net.cpp:408] ip1 <- pool1
I0428 19:53:57.090389 27901 net.cpp:382] ip1 -> ip1
I0428 19:53:57.090705 27901 net.cpp:124] Setting up ip1
I0428 19:53:57.090713 27901 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:57.090726 27901 net.cpp:139] Memory required for data: 3374800
I0428 19:53:57.090734 27901 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:57.090740 27901 net.cpp:86] Creating Layer relu1
I0428 19:53:57.090744 27901 net.cpp:408] relu1 <- ip1
I0428 19:53:57.090749 27901 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:57.090929 27901 net.cpp:124] Setting up relu1
I0428 19:53:57.090939 27901 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:57.090941 27901 net.cpp:139] Memory required for data: 3394800
I0428 19:53:57.090950 27901 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:57.090958 27901 net.cpp:86] Creating Layer ip2
I0428 19:53:57.090961 27901 net.cpp:408] ip2 <- ip1
I0428 19:53:57.090967 27901 net.cpp:382] ip2 -> ip2
I0428 19:53:57.091095 27901 net.cpp:124] Setting up ip2
I0428 19:53:57.091119 27901 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:57.091121 27901 net.cpp:139] Memory required for data: 3414800
I0428 19:53:57.091147 27901 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:57.091152 27901 net.cpp:86] Creating Layer relu2
I0428 19:53:57.091156 27901 net.cpp:408] relu2 <- ip2
I0428 19:53:57.091159 27901 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:57.091336 27901 net.cpp:124] Setting up relu2
I0428 19:53:57.091343 27901 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:57.091347 27901 net.cpp:139] Memory required for data: 3434800
I0428 19:53:57.091351 27901 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:57.091356 27901 net.cpp:86] Creating Layer ip3
I0428 19:53:57.091358 27901 net.cpp:408] ip3 <- ip2
I0428 19:53:57.091365 27901 net.cpp:382] ip3 -> ip3
I0428 19:53:57.091550 27901 net.cpp:124] Setting up ip3
I0428 19:53:57.091557 27901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:57.091562 27901 net.cpp:139] Memory required for data: 3438800
I0428 19:53:57.091569 27901 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:57.091573 27901 net.cpp:86] Creating Layer relu3
I0428 19:53:57.091576 27901 net.cpp:408] relu3 <- ip3
I0428 19:53:57.091581 27901 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:57.092387 27901 net.cpp:124] Setting up relu3
I0428 19:53:57.092401 27901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:57.092403 27901 net.cpp:139] Memory required for data: 3442800
I0428 19:53:57.092406 27901 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:53:57.092427 27901 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:53:57.092437 27901 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:53:57.092443 27901 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:53:57.092465 27901 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:53:57.092510 27901 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:53:57.092515 27901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:57.092519 27901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:57.092522 27901 net.cpp:139] Memory required for data: 3450800
I0428 19:53:57.092525 27901 layer_factory.hpp:77] Creating layer accuracy
I0428 19:53:57.092545 27901 net.cpp:86] Creating Layer accuracy
I0428 19:53:57.092550 27901 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:53:57.092571 27901 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:53:57.092576 27901 net.cpp:382] accuracy -> accuracy
I0428 19:53:57.092595 27901 net.cpp:124] Setting up accuracy
I0428 19:53:57.092599 27901 net.cpp:131] Top shape: (1)
I0428 19:53:57.092602 27901 net.cpp:139] Memory required for data: 3450804
I0428 19:53:57.092605 27901 layer_factory.hpp:77] Creating layer loss
I0428 19:53:57.092610 27901 net.cpp:86] Creating Layer loss
I0428 19:53:57.092613 27901 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:53:57.092623 27901 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:53:57.092628 27901 net.cpp:382] loss -> loss
I0428 19:53:57.092633 27901 layer_factory.hpp:77] Creating layer loss
I0428 19:53:57.092949 27901 net.cpp:124] Setting up loss
I0428 19:53:57.092960 27901 net.cpp:131] Top shape: (1)
I0428 19:53:57.092964 27901 net.cpp:134]     with loss weight 1
I0428 19:53:57.092970 27901 net.cpp:139] Memory required for data: 3450808
I0428 19:53:57.092983 27901 net.cpp:200] loss needs backward computation.
I0428 19:53:57.092988 27901 net.cpp:202] accuracy does not need backward computation.
I0428 19:53:57.092990 27901 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:53:57.092993 27901 net.cpp:200] relu3 needs backward computation.
I0428 19:53:57.092996 27901 net.cpp:200] ip3 needs backward computation.
I0428 19:53:57.092999 27901 net.cpp:200] relu2 needs backward computation.
I0428 19:53:57.093001 27901 net.cpp:200] ip2 needs backward computation.
I0428 19:53:57.093016 27901 net.cpp:200] relu1 needs backward computation.
I0428 19:53:57.093019 27901 net.cpp:200] ip1 needs backward computation.
I0428 19:53:57.093021 27901 net.cpp:200] pool1 needs backward computation.
I0428 19:53:57.093030 27901 net.cpp:200] conv1 needs backward computation.
I0428 19:53:57.093034 27901 net.cpp:200] pool0 needs backward computation.
I0428 19:53:57.093036 27901 net.cpp:200] conv0 needs backward computation.
I0428 19:53:57.093039 27901 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:53:57.093044 27901 net.cpp:202] mnist does not need backward computation.
I0428 19:53:57.093051 27901 net.cpp:244] This network produces output accuracy
I0428 19:53:57.093055 27901 net.cpp:244] This network produces output loss
I0428 19:53:57.093066 27901 net.cpp:257] Network initialization done.
I0428 19:53:57.093106 27901 solver.cpp:56] Solver scaffolding done.
I0428 19:53:57.093468 27901 caffe.cpp:248] Starting Optimization
I0428 19:53:57.093475 27901 solver.cpp:273] Solving LeNet
I0428 19:53:57.093477 27901 solver.cpp:274] Learning Rate Policy: inv
I0428 19:53:57.094332 27901 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:53:57.098302 27901 blocking_queue.cpp:49] Waiting for data
I0428 19:53:57.171933 27908 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:57.172459 27901 solver.cpp:398]     Test net output #0: accuracy = 0.1085
I0428 19:53:57.172480 27901 solver.cpp:398]     Test net output #1: loss = 2.29259 (* 1 = 2.29259 loss)
I0428 19:53:57.175642 27901 solver.cpp:219] Iteration 0 (0 iter/s, 0.0821382s/100 iters), loss = 2.30626
I0428 19:53:57.175665 27901 solver.cpp:238]     Train net output #0: loss = 2.30626 (* 1 = 2.30626 loss)
I0428 19:53:57.175691 27901 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:53:57.282058 27901 solver.cpp:219] Iteration 100 (940.014 iter/s, 0.106381s/100 iters), loss = 1.35755
I0428 19:53:57.282083 27901 solver.cpp:238]     Train net output #0: loss = 1.35755 (* 1 = 1.35755 loss)
I0428 19:53:57.282088 27901 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:53:57.389510 27901 solver.cpp:219] Iteration 200 (930.964 iter/s, 0.107416s/100 iters), loss = 0.478564
I0428 19:53:57.389536 27901 solver.cpp:238]     Train net output #0: loss = 0.478564 (* 1 = 0.478564 loss)
I0428 19:53:57.389541 27901 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:53:57.495396 27901 solver.cpp:219] Iteration 300 (944.734 iter/s, 0.10585s/100 iters), loss = 0.890216
I0428 19:53:57.495424 27901 solver.cpp:238]     Train net output #0: loss = 0.890216 (* 1 = 0.890216 loss)
I0428 19:53:57.495430 27901 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:53:57.599519 27901 solver.cpp:219] Iteration 400 (960.758 iter/s, 0.104084s/100 iters), loss = 0.205296
I0428 19:53:57.599545 27901 solver.cpp:238]     Train net output #0: loss = 0.205296 (* 1 = 0.205296 loss)
I0428 19:53:57.599550 27901 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:53:57.701396 27901 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:53:57.755023 27908 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:57.755548 27901 solver.cpp:398]     Test net output #0: accuracy = 0.8641
I0428 19:53:57.755569 27901 solver.cpp:398]     Test net output #1: loss = 0.356691 (* 1 = 0.356691 loss)
I0428 19:53:57.756629 27901 solver.cpp:219] Iteration 500 (636.648 iter/s, 0.157073s/100 iters), loss = 0.269318
I0428 19:53:57.756669 27901 solver.cpp:238]     Train net output #0: loss = 0.269318 (* 1 = 0.269318 loss)
I0428 19:53:57.756691 27901 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:53:57.868223 27901 solver.cpp:219] Iteration 600 (896.5 iter/s, 0.111545s/100 iters), loss = 0.400961
I0428 19:53:57.868249 27901 solver.cpp:238]     Train net output #0: loss = 0.400961 (* 1 = 0.400961 loss)
I0428 19:53:57.868271 27901 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:53:57.972144 27901 solver.cpp:219] Iteration 700 (962.614 iter/s, 0.103884s/100 iters), loss = 0.412522
I0428 19:53:57.972172 27901 solver.cpp:238]     Train net output #0: loss = 0.412522 (* 1 = 0.412522 loss)
I0428 19:53:57.972179 27901 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:53:58.079672 27901 solver.cpp:219] Iteration 800 (930.325 iter/s, 0.107489s/100 iters), loss = 0.475885
I0428 19:53:58.079699 27901 solver.cpp:238]     Train net output #0: loss = 0.475885 (* 1 = 0.475885 loss)
I0428 19:53:58.079722 27901 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:53:58.185847 27901 solver.cpp:219] Iteration 900 (942.182 iter/s, 0.106137s/100 iters), loss = 0.416079
I0428 19:53:58.185904 27901 solver.cpp:238]     Train net output #0: loss = 0.416079 (* 1 = 0.416079 loss)
I0428 19:53:58.185930 27901 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:53:58.220293 27907 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:58.288384 27901 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:53:58.290119 27901 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:53:58.290910 27901 solver.cpp:311] Iteration 1000, loss = 0.433703
I0428 19:53:58.290925 27901 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:53:58.368572 27908 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:58.369118 27901 solver.cpp:398]     Test net output #0: accuracy = 0.8795
I0428 19:53:58.369140 27901 solver.cpp:398]     Test net output #1: loss = 0.302625 (* 1 = 0.302625 loss)
I0428 19:53:58.369145 27901 solver.cpp:316] Optimization Done.
I0428 19:53:58.369148 27901 caffe.cpp:259] Optimization Done.
