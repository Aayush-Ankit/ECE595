I0428 19:39:49.475260 24395 caffe.cpp:218] Using GPUs 0
I0428 19:39:49.515228 24395 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:39:49.982378 24395 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test316.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:39:49.982511 24395 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test316.prototxt
I0428 19:39:49.982854 24395 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:39:49.982883 24395 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:39:49.982956 24395 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:39:49.983034 24395 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:49.983134 24395 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:39:49.983156 24395 net.cpp:86] Creating Layer mnist
I0428 19:39:49.983165 24395 net.cpp:382] mnist -> data
I0428 19:39:49.983186 24395 net.cpp:382] mnist -> label
I0428 19:39:49.984114 24395 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:39:49.986393 24395 net.cpp:124] Setting up mnist
I0428 19:39:49.986408 24395 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:39:49.986415 24395 net.cpp:131] Top shape: 64 (64)
I0428 19:39:49.986418 24395 net.cpp:139] Memory required for data: 200960
I0428 19:39:49.986424 24395 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:49.986439 24395 net.cpp:86] Creating Layer conv0
I0428 19:39:49.986443 24395 net.cpp:408] conv0 <- data
I0428 19:39:49.986454 24395 net.cpp:382] conv0 -> conv0
I0428 19:39:50.224517 24395 net.cpp:124] Setting up conv0
I0428 19:39:50.224560 24395 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:39:50.224565 24395 net.cpp:139] Memory required for data: 495872
I0428 19:39:50.224599 24395 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:50.224627 24395 net.cpp:86] Creating Layer pool0
I0428 19:39:50.224632 24395 net.cpp:408] pool0 <- conv0
I0428 19:39:50.224638 24395 net.cpp:382] pool0 -> pool0
I0428 19:39:50.224750 24395 net.cpp:124] Setting up pool0
I0428 19:39:50.224757 24395 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:39:50.224761 24395 net.cpp:139] Memory required for data: 569600
I0428 19:39:50.224763 24395 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:50.224774 24395 net.cpp:86] Creating Layer conv1
I0428 19:39:50.224777 24395 net.cpp:408] conv1 <- pool0
I0428 19:39:50.224782 24395 net.cpp:382] conv1 -> conv1
I0428 19:39:50.226603 24395 net.cpp:124] Setting up conv1
I0428 19:39:50.226618 24395 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:39:50.226636 24395 net.cpp:139] Memory required for data: 651520
I0428 19:39:50.226660 24395 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:50.226667 24395 net.cpp:86] Creating Layer pool1
I0428 19:39:50.226671 24395 net.cpp:408] pool1 <- conv1
I0428 19:39:50.226675 24395 net.cpp:382] pool1 -> pool1
I0428 19:39:50.226713 24395 net.cpp:124] Setting up pool1
I0428 19:39:50.226718 24395 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:39:50.226722 24395 net.cpp:139] Memory required for data: 672000
I0428 19:39:50.226724 24395 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:50.226732 24395 net.cpp:86] Creating Layer ip1
I0428 19:39:50.226734 24395 net.cpp:408] ip1 <- pool1
I0428 19:39:50.226739 24395 net.cpp:382] ip1 -> ip1
I0428 19:39:50.226836 24395 net.cpp:124] Setting up ip1
I0428 19:39:50.226843 24395 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:50.226846 24395 net.cpp:139] Memory required for data: 674560
I0428 19:39:50.226853 24395 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:50.226860 24395 net.cpp:86] Creating Layer relu1
I0428 19:39:50.226862 24395 net.cpp:408] relu1 <- ip1
I0428 19:39:50.226866 24395 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:50.227056 24395 net.cpp:124] Setting up relu1
I0428 19:39:50.227064 24395 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:50.227067 24395 net.cpp:139] Memory required for data: 677120
I0428 19:39:50.227071 24395 layer_factory.hpp:77] Creating layer ip2
I0428 19:39:50.227077 24395 net.cpp:86] Creating Layer ip2
I0428 19:39:50.227079 24395 net.cpp:408] ip2 <- ip1
I0428 19:39:50.227083 24395 net.cpp:382] ip2 -> ip2
I0428 19:39:50.227186 24395 net.cpp:124] Setting up ip2
I0428 19:39:50.227193 24395 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:50.227196 24395 net.cpp:139] Memory required for data: 679680
I0428 19:39:50.227202 24395 layer_factory.hpp:77] Creating layer relu2
I0428 19:39:50.227207 24395 net.cpp:86] Creating Layer relu2
I0428 19:39:50.227210 24395 net.cpp:408] relu2 <- ip2
I0428 19:39:50.227214 24395 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:39:50.227957 24395 net.cpp:124] Setting up relu2
I0428 19:39:50.227967 24395 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:50.227987 24395 net.cpp:139] Memory required for data: 682240
I0428 19:39:50.227990 24395 layer_factory.hpp:77] Creating layer loss
I0428 19:39:50.227996 24395 net.cpp:86] Creating Layer loss
I0428 19:39:50.227999 24395 net.cpp:408] loss <- ip2
I0428 19:39:50.228003 24395 net.cpp:408] loss <- label
I0428 19:39:50.228009 24395 net.cpp:382] loss -> loss
I0428 19:39:50.228029 24395 layer_factory.hpp:77] Creating layer loss
I0428 19:39:50.228261 24395 net.cpp:124] Setting up loss
I0428 19:39:50.228271 24395 net.cpp:131] Top shape: (1)
I0428 19:39:50.228274 24395 net.cpp:134]     with loss weight 1
I0428 19:39:50.228287 24395 net.cpp:139] Memory required for data: 682244
I0428 19:39:50.228291 24395 net.cpp:200] loss needs backward computation.
I0428 19:39:50.228294 24395 net.cpp:200] relu2 needs backward computation.
I0428 19:39:50.228297 24395 net.cpp:200] ip2 needs backward computation.
I0428 19:39:50.228301 24395 net.cpp:200] relu1 needs backward computation.
I0428 19:39:50.228303 24395 net.cpp:200] ip1 needs backward computation.
I0428 19:39:50.228305 24395 net.cpp:200] pool1 needs backward computation.
I0428 19:39:50.228318 24395 net.cpp:200] conv1 needs backward computation.
I0428 19:39:50.228322 24395 net.cpp:200] pool0 needs backward computation.
I0428 19:39:50.228325 24395 net.cpp:200] conv0 needs backward computation.
I0428 19:39:50.228328 24395 net.cpp:202] mnist does not need backward computation.
I0428 19:39:50.228332 24395 net.cpp:244] This network produces output loss
I0428 19:39:50.228339 24395 net.cpp:257] Network initialization done.
I0428 19:39:50.228643 24395 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test316.prototxt
I0428 19:39:50.228677 24395 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:39:50.228756 24395 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:39:50.228838 24395 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:50.228899 24395 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:39:50.228929 24395 net.cpp:86] Creating Layer mnist
I0428 19:39:50.228934 24395 net.cpp:382] mnist -> data
I0428 19:39:50.228941 24395 net.cpp:382] mnist -> label
I0428 19:39:50.229029 24395 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:39:50.231161 24395 net.cpp:124] Setting up mnist
I0428 19:39:50.231204 24395 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:39:50.231209 24395 net.cpp:131] Top shape: 100 (100)
I0428 19:39:50.231212 24395 net.cpp:139] Memory required for data: 314000
I0428 19:39:50.231215 24395 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:39:50.231222 24395 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:39:50.231225 24395 net.cpp:408] label_mnist_1_split <- label
I0428 19:39:50.231230 24395 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:39:50.231236 24395 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:39:50.231331 24395 net.cpp:124] Setting up label_mnist_1_split
I0428 19:39:50.231349 24395 net.cpp:131] Top shape: 100 (100)
I0428 19:39:50.231353 24395 net.cpp:131] Top shape: 100 (100)
I0428 19:39:50.231355 24395 net.cpp:139] Memory required for data: 314800
I0428 19:39:50.231359 24395 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:50.231366 24395 net.cpp:86] Creating Layer conv0
I0428 19:39:50.231370 24395 net.cpp:408] conv0 <- data
I0428 19:39:50.231374 24395 net.cpp:382] conv0 -> conv0
I0428 19:39:50.233218 24395 net.cpp:124] Setting up conv0
I0428 19:39:50.233234 24395 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:39:50.233237 24395 net.cpp:139] Memory required for data: 775600
I0428 19:39:50.233247 24395 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:50.233253 24395 net.cpp:86] Creating Layer pool0
I0428 19:39:50.233258 24395 net.cpp:408] pool0 <- conv0
I0428 19:39:50.233263 24395 net.cpp:382] pool0 -> pool0
I0428 19:39:50.233299 24395 net.cpp:124] Setting up pool0
I0428 19:39:50.233305 24395 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:39:50.233309 24395 net.cpp:139] Memory required for data: 890800
I0428 19:39:50.233311 24395 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:50.233319 24395 net.cpp:86] Creating Layer conv1
I0428 19:39:50.233324 24395 net.cpp:408] conv1 <- pool0
I0428 19:39:50.233328 24395 net.cpp:382] conv1 -> conv1
I0428 19:39:50.234796 24395 net.cpp:124] Setting up conv1
I0428 19:39:50.234818 24395 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:39:50.234822 24395 net.cpp:139] Memory required for data: 1018800
I0428 19:39:50.234848 24395 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:50.234854 24395 net.cpp:86] Creating Layer pool1
I0428 19:39:50.234858 24395 net.cpp:408] pool1 <- conv1
I0428 19:39:50.234863 24395 net.cpp:382] pool1 -> pool1
I0428 19:39:50.234935 24395 net.cpp:124] Setting up pool1
I0428 19:39:50.234944 24395 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:39:50.234947 24395 net.cpp:139] Memory required for data: 1050800
I0428 19:39:50.234951 24395 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:50.234957 24395 net.cpp:86] Creating Layer ip1
I0428 19:39:50.234961 24395 net.cpp:408] ip1 <- pool1
I0428 19:39:50.234967 24395 net.cpp:382] ip1 -> ip1
I0428 19:39:50.235069 24395 net.cpp:124] Setting up ip1
I0428 19:39:50.235079 24395 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:50.235081 24395 net.cpp:139] Memory required for data: 1054800
I0428 19:39:50.235090 24395 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:50.235096 24395 net.cpp:86] Creating Layer relu1
I0428 19:39:50.235116 24395 net.cpp:408] relu1 <- ip1
I0428 19:39:50.235121 24395 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:50.235299 24395 net.cpp:124] Setting up relu1
I0428 19:39:50.235307 24395 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:50.235311 24395 net.cpp:139] Memory required for data: 1058800
I0428 19:39:50.235316 24395 layer_factory.hpp:77] Creating layer ip2
I0428 19:39:50.235322 24395 net.cpp:86] Creating Layer ip2
I0428 19:39:50.235327 24395 net.cpp:408] ip2 <- ip1
I0428 19:39:50.235332 24395 net.cpp:382] ip2 -> ip2
I0428 19:39:50.235438 24395 net.cpp:124] Setting up ip2
I0428 19:39:50.235445 24395 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:50.235450 24395 net.cpp:139] Memory required for data: 1062800
I0428 19:39:50.235455 24395 layer_factory.hpp:77] Creating layer relu2
I0428 19:39:50.235458 24395 net.cpp:86] Creating Layer relu2
I0428 19:39:50.235462 24395 net.cpp:408] relu2 <- ip2
I0428 19:39:50.235466 24395 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:39:50.235613 24395 net.cpp:124] Setting up relu2
I0428 19:39:50.235622 24395 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:50.235625 24395 net.cpp:139] Memory required for data: 1066800
I0428 19:39:50.235630 24395 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:39:50.235635 24395 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:39:50.235638 24395 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:39:50.235642 24395 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:39:50.235658 24395 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:39:50.235697 24395 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:39:50.235704 24395 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:50.235708 24395 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:50.235710 24395 net.cpp:139] Memory required for data: 1074800
I0428 19:39:50.235713 24395 layer_factory.hpp:77] Creating layer accuracy
I0428 19:39:50.235723 24395 net.cpp:86] Creating Layer accuracy
I0428 19:39:50.235725 24395 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:39:50.235729 24395 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:39:50.235734 24395 net.cpp:382] accuracy -> accuracy
I0428 19:39:50.235743 24395 net.cpp:124] Setting up accuracy
I0428 19:39:50.235745 24395 net.cpp:131] Top shape: (1)
I0428 19:39:50.235749 24395 net.cpp:139] Memory required for data: 1074804
I0428 19:39:50.235751 24395 layer_factory.hpp:77] Creating layer loss
I0428 19:39:50.235755 24395 net.cpp:86] Creating Layer loss
I0428 19:39:50.235759 24395 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:39:50.235762 24395 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:39:50.235766 24395 net.cpp:382] loss -> loss
I0428 19:39:50.235771 24395 layer_factory.hpp:77] Creating layer loss
I0428 19:39:50.236080 24395 net.cpp:124] Setting up loss
I0428 19:39:50.236089 24395 net.cpp:131] Top shape: (1)
I0428 19:39:50.236104 24395 net.cpp:134]     with loss weight 1
I0428 19:39:50.236110 24395 net.cpp:139] Memory required for data: 1074808
I0428 19:39:50.236126 24395 net.cpp:200] loss needs backward computation.
I0428 19:39:50.236130 24395 net.cpp:202] accuracy does not need backward computation.
I0428 19:39:50.236135 24395 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:39:50.236138 24395 net.cpp:200] relu2 needs backward computation.
I0428 19:39:50.236140 24395 net.cpp:200] ip2 needs backward computation.
I0428 19:39:50.236148 24395 net.cpp:200] relu1 needs backward computation.
I0428 19:39:50.236151 24395 net.cpp:200] ip1 needs backward computation.
I0428 19:39:50.236160 24395 net.cpp:200] pool1 needs backward computation.
I0428 19:39:50.236162 24395 net.cpp:200] conv1 needs backward computation.
I0428 19:39:50.236166 24395 net.cpp:200] pool0 needs backward computation.
I0428 19:39:50.236168 24395 net.cpp:200] conv0 needs backward computation.
I0428 19:39:50.236171 24395 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:39:50.236176 24395 net.cpp:202] mnist does not need backward computation.
I0428 19:39:50.236178 24395 net.cpp:244] This network produces output accuracy
I0428 19:39:50.236198 24395 net.cpp:244] This network produces output loss
I0428 19:39:50.236209 24395 net.cpp:257] Network initialization done.
I0428 19:39:50.236261 24395 solver.cpp:56] Solver scaffolding done.
I0428 19:39:50.236533 24395 caffe.cpp:248] Starting Optimization
I0428 19:39:50.236539 24395 solver.cpp:273] Solving LeNet
I0428 19:39:50.236542 24395 solver.cpp:274] Learning Rate Policy: inv
I0428 19:39:50.237399 24395 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:39:50.239275 24395 blocking_queue.cpp:49] Waiting for data
I0428 19:39:50.310947 24404 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:50.311414 24395 solver.cpp:398]     Test net output #0: accuracy = 0.1214
I0428 19:39:50.311449 24395 solver.cpp:398]     Test net output #1: loss = 2.32236 (* 1 = 2.32236 loss)
I0428 19:39:50.313261 24395 solver.cpp:219] Iteration 0 (-7.5995e-31 iter/s, 0.0766925s/100 iters), loss = 2.3355
I0428 19:39:50.313333 24395 solver.cpp:238]     Train net output #0: loss = 2.3355 (* 1 = 2.3355 loss)
I0428 19:39:50.313345 24395 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:39:50.386612 24395 solver.cpp:219] Iteration 100 (1364.78 iter/s, 0.0732716s/100 iters), loss = 1.07063
I0428 19:39:50.386653 24395 solver.cpp:238]     Train net output #0: loss = 1.07063 (* 1 = 1.07063 loss)
I0428 19:39:50.386674 24395 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:39:50.450358 24395 solver.cpp:219] Iteration 200 (1569.61 iter/s, 0.0637102s/100 iters), loss = 0.635951
I0428 19:39:50.450408 24395 solver.cpp:238]     Train net output #0: loss = 0.635951 (* 1 = 0.635951 loss)
I0428 19:39:50.450415 24395 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:39:50.514782 24395 solver.cpp:219] Iteration 300 (1553.68 iter/s, 0.0643635s/100 iters), loss = 0.647217
I0428 19:39:50.514822 24395 solver.cpp:238]     Train net output #0: loss = 0.647217 (* 1 = 0.647217 loss)
I0428 19:39:50.514827 24395 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:39:50.579313 24395 solver.cpp:219] Iteration 400 (1550.45 iter/s, 0.0644976s/100 iters), loss = 0.339172
I0428 19:39:50.579337 24395 solver.cpp:238]     Train net output #0: loss = 0.339172 (* 1 = 0.339172 loss)
I0428 19:39:50.579344 24395 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:39:50.643221 24395 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:39:50.718379 24404 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:50.718837 24395 solver.cpp:398]     Test net output #0: accuracy = 0.8336
I0428 19:39:50.718857 24395 solver.cpp:398]     Test net output #1: loss = 0.459752 (* 1 = 0.459752 loss)
I0428 19:39:50.719620 24395 solver.cpp:219] Iteration 500 (712.909 iter/s, 0.14027s/100 iters), loss = 0.434095
I0428 19:39:50.719660 24395 solver.cpp:238]     Train net output #0: loss = 0.434095 (* 1 = 0.434095 loss)
I0428 19:39:50.719666 24395 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:39:50.790585 24395 solver.cpp:219] Iteration 600 (1409.93 iter/s, 0.0709253s/100 iters), loss = 0.478054
I0428 19:39:50.790611 24395 solver.cpp:238]     Train net output #0: loss = 0.478054 (* 1 = 0.478054 loss)
I0428 19:39:50.790616 24395 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:39:50.853926 24395 solver.cpp:219] Iteration 700 (1579.66 iter/s, 0.0633047s/100 iters), loss = 0.654911
I0428 19:39:50.853966 24395 solver.cpp:238]     Train net output #0: loss = 0.654911 (* 1 = 0.654911 loss)
I0428 19:39:50.853972 24395 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:39:50.917551 24395 solver.cpp:219] Iteration 800 (1572.59 iter/s, 0.0635894s/100 iters), loss = 0.625131
I0428 19:39:50.917592 24395 solver.cpp:238]     Train net output #0: loss = 0.625131 (* 1 = 0.625131 loss)
I0428 19:39:50.917598 24395 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:39:50.981041 24395 solver.cpp:219] Iteration 900 (1575.97 iter/s, 0.0634532s/100 iters), loss = 0.582091
I0428 19:39:50.981081 24395 solver.cpp:238]     Train net output #0: loss = 0.582091 (* 1 = 0.582091 loss)
I0428 19:39:50.981087 24395 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:39:51.002141 24403 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:51.043804 24395 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:39:51.044369 24395 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:39:51.044781 24395 solver.cpp:311] Iteration 1000, loss = 0.549786
I0428 19:39:51.044796 24395 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:39:51.119633 24404 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:51.120062 24395 solver.cpp:398]     Test net output #0: accuracy = 0.8435
I0428 19:39:51.120096 24395 solver.cpp:398]     Test net output #1: loss = 0.423821 (* 1 = 0.423821 loss)
I0428 19:39:51.120101 24395 solver.cpp:316] Optimization Done.
I0428 19:39:51.120105 24395 caffe.cpp:259] Optimization Done.
