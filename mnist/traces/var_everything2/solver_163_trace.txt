I0428 19:32:48.407282 22963 caffe.cpp:218] Using GPUs 0
I0428 19:32:48.449385 22963 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:32:48.967484 22963 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test163.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:32:48.967654 22963 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test163.prototxt
I0428 19:32:48.967991 22963 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:32:48.968013 22963 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:32:48.968101 22963 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:32:48.968194 22963 layer_factory.hpp:77] Creating layer mnist
I0428 19:32:48.968333 22963 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:32:48.968367 22963 net.cpp:86] Creating Layer mnist
I0428 19:32:48.968380 22963 net.cpp:382] mnist -> data
I0428 19:32:48.968412 22963 net.cpp:382] mnist -> label
I0428 19:32:48.969619 22963 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:32:48.972110 22963 net.cpp:124] Setting up mnist
I0428 19:32:48.972131 22963 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:32:48.972142 22963 net.cpp:131] Top shape: 64 (64)
I0428 19:32:48.972149 22963 net.cpp:139] Memory required for data: 200960
I0428 19:32:48.972162 22963 layer_factory.hpp:77] Creating layer conv0
I0428 19:32:48.972185 22963 net.cpp:86] Creating Layer conv0
I0428 19:32:48.972198 22963 net.cpp:408] conv0 <- data
I0428 19:32:48.972216 22963 net.cpp:382] conv0 -> conv0
I0428 19:32:49.260727 22963 net.cpp:124] Setting up conv0
I0428 19:32:49.260761 22963 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 19:32:49.260767 22963 net.cpp:139] Memory required for data: 3887360
I0428 19:32:49.260792 22963 layer_factory.hpp:77] Creating layer pool0
I0428 19:32:49.260818 22963 net.cpp:86] Creating Layer pool0
I0428 19:32:49.260828 22963 net.cpp:408] pool0 <- conv0
I0428 19:32:49.260839 22963 net.cpp:382] pool0 -> pool0
I0428 19:32:49.260905 22963 net.cpp:124] Setting up pool0
I0428 19:32:49.260915 22963 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 19:32:49.260922 22963 net.cpp:139] Memory required for data: 4808960
I0428 19:32:49.260948 22963 layer_factory.hpp:77] Creating layer ip1
I0428 19:32:49.260963 22963 net.cpp:86] Creating Layer ip1
I0428 19:32:49.260972 22963 net.cpp:408] ip1 <- pool0
I0428 19:32:49.260982 22963 net.cpp:382] ip1 -> ip1
I0428 19:32:49.262573 22963 net.cpp:124] Setting up ip1
I0428 19:32:49.262589 22963 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:32:49.262598 22963 net.cpp:139] Memory required for data: 4815360
I0428 19:32:49.262612 22963 layer_factory.hpp:77] Creating layer relu1
I0428 19:32:49.262625 22963 net.cpp:86] Creating Layer relu1
I0428 19:32:49.262640 22963 net.cpp:408] relu1 <- ip1
I0428 19:32:49.262650 22963 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:32:49.262843 22963 net.cpp:124] Setting up relu1
I0428 19:32:49.262856 22963 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:32:49.262861 22963 net.cpp:139] Memory required for data: 4821760
I0428 19:32:49.262868 22963 layer_factory.hpp:77] Creating layer ip2
I0428 19:32:49.262881 22963 net.cpp:86] Creating Layer ip2
I0428 19:32:49.262890 22963 net.cpp:408] ip2 <- ip1
I0428 19:32:49.262902 22963 net.cpp:382] ip2 -> ip2
I0428 19:32:49.263013 22963 net.cpp:124] Setting up ip2
I0428 19:32:49.263025 22963 net.cpp:131] Top shape: 64 10 (640)
I0428 19:32:49.263031 22963 net.cpp:139] Memory required for data: 4824320
I0428 19:32:49.263046 22963 layer_factory.hpp:77] Creating layer relu2
I0428 19:32:49.263057 22963 net.cpp:86] Creating Layer relu2
I0428 19:32:49.263064 22963 net.cpp:408] relu2 <- ip2
I0428 19:32:49.263073 22963 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:32:49.263870 22963 net.cpp:124] Setting up relu2
I0428 19:32:49.263886 22963 net.cpp:131] Top shape: 64 10 (640)
I0428 19:32:49.263893 22963 net.cpp:139] Memory required for data: 4826880
I0428 19:32:49.263901 22963 layer_factory.hpp:77] Creating layer loss
I0428 19:32:49.263919 22963 net.cpp:86] Creating Layer loss
I0428 19:32:49.263928 22963 net.cpp:408] loss <- ip2
I0428 19:32:49.263937 22963 net.cpp:408] loss <- label
I0428 19:32:49.263948 22963 net.cpp:382] loss -> loss
I0428 19:32:49.263972 22963 layer_factory.hpp:77] Creating layer loss
I0428 19:32:49.264226 22963 net.cpp:124] Setting up loss
I0428 19:32:49.264240 22963 net.cpp:131] Top shape: (1)
I0428 19:32:49.264247 22963 net.cpp:134]     with loss weight 1
I0428 19:32:49.264268 22963 net.cpp:139] Memory required for data: 4826884
I0428 19:32:49.264276 22963 net.cpp:200] loss needs backward computation.
I0428 19:32:49.264284 22963 net.cpp:200] relu2 needs backward computation.
I0428 19:32:49.264292 22963 net.cpp:200] ip2 needs backward computation.
I0428 19:32:49.264298 22963 net.cpp:200] relu1 needs backward computation.
I0428 19:32:49.264304 22963 net.cpp:200] ip1 needs backward computation.
I0428 19:32:49.264312 22963 net.cpp:200] pool0 needs backward computation.
I0428 19:32:49.264318 22963 net.cpp:200] conv0 needs backward computation.
I0428 19:32:49.264325 22963 net.cpp:202] mnist does not need backward computation.
I0428 19:32:49.264333 22963 net.cpp:244] This network produces output loss
I0428 19:32:49.264346 22963 net.cpp:257] Network initialization done.
I0428 19:32:49.264628 22963 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test163.prototxt
I0428 19:32:49.264663 22963 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:32:49.264752 22963 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:32:49.264881 22963 layer_factory.hpp:77] Creating layer mnist
I0428 19:32:49.264961 22963 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:32:49.264986 22963 net.cpp:86] Creating Layer mnist
I0428 19:32:49.264995 22963 net.cpp:382] mnist -> data
I0428 19:32:49.265009 22963 net.cpp:382] mnist -> label
I0428 19:32:49.265137 22963 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:32:49.266347 22963 net.cpp:124] Setting up mnist
I0428 19:32:49.266363 22963 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:32:49.266373 22963 net.cpp:131] Top shape: 100 (100)
I0428 19:32:49.266379 22963 net.cpp:139] Memory required for data: 314000
I0428 19:32:49.266387 22963 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:32:49.266398 22963 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:32:49.266405 22963 net.cpp:408] label_mnist_1_split <- label
I0428 19:32:49.266415 22963 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:32:49.266430 22963 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:32:49.266510 22963 net.cpp:124] Setting up label_mnist_1_split
I0428 19:32:49.266520 22963 net.cpp:131] Top shape: 100 (100)
I0428 19:32:49.266528 22963 net.cpp:131] Top shape: 100 (100)
I0428 19:32:49.266535 22963 net.cpp:139] Memory required for data: 314800
I0428 19:32:49.266541 22963 layer_factory.hpp:77] Creating layer conv0
I0428 19:32:49.266557 22963 net.cpp:86] Creating Layer conv0
I0428 19:32:49.266566 22963 net.cpp:408] conv0 <- data
I0428 19:32:49.266577 22963 net.cpp:382] conv0 -> conv0
I0428 19:32:49.268162 22963 net.cpp:124] Setting up conv0
I0428 19:32:49.268180 22963 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 19:32:49.268187 22963 net.cpp:139] Memory required for data: 6074800
I0428 19:32:49.268203 22963 layer_factory.hpp:77] Creating layer pool0
I0428 19:32:49.268215 22963 net.cpp:86] Creating Layer pool0
I0428 19:32:49.268223 22963 net.cpp:408] pool0 <- conv0
I0428 19:32:49.268231 22963 net.cpp:382] pool0 -> pool0
I0428 19:32:49.268278 22963 net.cpp:124] Setting up pool0
I0428 19:32:49.268288 22963 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 19:32:49.268296 22963 net.cpp:139] Memory required for data: 7514800
I0428 19:32:49.268302 22963 layer_factory.hpp:77] Creating layer ip1
I0428 19:32:49.268314 22963 net.cpp:86] Creating Layer ip1
I0428 19:32:49.268322 22963 net.cpp:408] ip1 <- pool0
I0428 19:32:49.268332 22963 net.cpp:382] ip1 -> ip1
I0428 19:32:49.269032 22963 net.cpp:124] Setting up ip1
I0428 19:32:49.269045 22963 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:32:49.269052 22963 net.cpp:139] Memory required for data: 7524800
I0428 19:32:49.269067 22963 layer_factory.hpp:77] Creating layer relu1
I0428 19:32:49.269076 22963 net.cpp:86] Creating Layer relu1
I0428 19:32:49.269084 22963 net.cpp:408] relu1 <- ip1
I0428 19:32:49.269094 22963 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:32:49.269285 22963 net.cpp:124] Setting up relu1
I0428 19:32:49.269297 22963 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:32:49.269316 22963 net.cpp:139] Memory required for data: 7534800
I0428 19:32:49.269325 22963 layer_factory.hpp:77] Creating layer ip2
I0428 19:32:49.269336 22963 net.cpp:86] Creating Layer ip2
I0428 19:32:49.269343 22963 net.cpp:408] ip2 <- ip1
I0428 19:32:49.269354 22963 net.cpp:382] ip2 -> ip2
I0428 19:32:49.269461 22963 net.cpp:124] Setting up ip2
I0428 19:32:49.269471 22963 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:49.269479 22963 net.cpp:139] Memory required for data: 7538800
I0428 19:32:49.269493 22963 layer_factory.hpp:77] Creating layer relu2
I0428 19:32:49.269503 22963 net.cpp:86] Creating Layer relu2
I0428 19:32:49.269510 22963 net.cpp:408] relu2 <- ip2
I0428 19:32:49.269520 22963 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:32:49.269690 22963 net.cpp:124] Setting up relu2
I0428 19:32:49.269702 22963 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:49.269708 22963 net.cpp:139] Memory required for data: 7542800
I0428 19:32:49.269716 22963 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:32:49.269727 22963 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:32:49.269734 22963 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:32:49.269744 22963 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:32:49.269758 22963 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:32:49.269803 22963 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:32:49.269812 22963 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:49.269820 22963 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:49.269827 22963 net.cpp:139] Memory required for data: 7550800
I0428 19:32:49.269834 22963 layer_factory.hpp:77] Creating layer accuracy
I0428 19:32:49.269843 22963 net.cpp:86] Creating Layer accuracy
I0428 19:32:49.269850 22963 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:32:49.269858 22963 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:32:49.269867 22963 net.cpp:382] accuracy -> accuracy
I0428 19:32:49.269881 22963 net.cpp:124] Setting up accuracy
I0428 19:32:49.269891 22963 net.cpp:131] Top shape: (1)
I0428 19:32:49.269897 22963 net.cpp:139] Memory required for data: 7550804
I0428 19:32:49.269903 22963 layer_factory.hpp:77] Creating layer loss
I0428 19:32:49.269912 22963 net.cpp:86] Creating Layer loss
I0428 19:32:49.269917 22963 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:32:49.269925 22963 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:32:49.269933 22963 net.cpp:382] loss -> loss
I0428 19:32:49.269945 22963 layer_factory.hpp:77] Creating layer loss
I0428 19:32:49.270822 22963 net.cpp:124] Setting up loss
I0428 19:32:49.270835 22963 net.cpp:131] Top shape: (1)
I0428 19:32:49.270841 22963 net.cpp:134]     with loss weight 1
I0428 19:32:49.270851 22963 net.cpp:139] Memory required for data: 7550808
I0428 19:32:49.270859 22963 net.cpp:200] loss needs backward computation.
I0428 19:32:49.270865 22963 net.cpp:202] accuracy does not need backward computation.
I0428 19:32:49.270872 22963 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:32:49.270879 22963 net.cpp:200] relu2 needs backward computation.
I0428 19:32:49.270884 22963 net.cpp:200] ip2 needs backward computation.
I0428 19:32:49.270890 22963 net.cpp:200] relu1 needs backward computation.
I0428 19:32:49.270895 22963 net.cpp:200] ip1 needs backward computation.
I0428 19:32:49.270901 22963 net.cpp:200] pool0 needs backward computation.
I0428 19:32:49.270907 22963 net.cpp:200] conv0 needs backward computation.
I0428 19:32:49.270916 22963 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:32:49.270923 22963 net.cpp:202] mnist does not need backward computation.
I0428 19:32:49.270928 22963 net.cpp:244] This network produces output accuracy
I0428 19:32:49.270936 22963 net.cpp:244] This network produces output loss
I0428 19:32:49.270951 22963 net.cpp:257] Network initialization done.
I0428 19:32:49.270993 22963 solver.cpp:56] Solver scaffolding done.
I0428 19:32:49.271210 22963 caffe.cpp:248] Starting Optimization
I0428 19:32:49.271219 22963 solver.cpp:273] Solving LeNet
I0428 19:32:49.271237 22963 solver.cpp:274] Learning Rate Policy: inv
I0428 19:32:49.272004 22963 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:32:49.278746 22963 blocking_queue.cpp:49] Waiting for data
I0428 19:32:49.348403 22970 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:49.349115 22963 solver.cpp:398]     Test net output #0: accuracy = 0.1189
I0428 19:32:49.349136 22963 solver.cpp:398]     Test net output #1: loss = 2.32539 (* 1 = 2.32539 loss)
I0428 19:32:49.352722 22963 solver.cpp:219] Iteration 0 (-1.01454e-42 iter/s, 0.0814499s/100 iters), loss = 2.3138
I0428 19:32:49.352777 22963 solver.cpp:238]     Train net output #0: loss = 2.3138 (* 1 = 2.3138 loss)
I0428 19:32:49.352797 22963 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:32:49.450657 22963 solver.cpp:219] Iteration 100 (1021.58 iter/s, 0.0978876s/100 iters), loss = 0.59726
I0428 19:32:49.450691 22963 solver.cpp:238]     Train net output #0: loss = 0.59726 (* 1 = 0.59726 loss)
I0428 19:32:49.450703 22963 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:32:49.541707 22963 solver.cpp:219] Iteration 200 (1098.76 iter/s, 0.091012s/100 iters), loss = 0.259861
I0428 19:32:49.541735 22963 solver.cpp:238]     Train net output #0: loss = 0.259861 (* 1 = 0.259861 loss)
I0428 19:32:49.541746 22963 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:32:49.631230 22963 solver.cpp:219] Iteration 300 (1117.46 iter/s, 0.0894886s/100 iters), loss = 0.285152
I0428 19:32:49.631258 22963 solver.cpp:238]     Train net output #0: loss = 0.285152 (* 1 = 0.285152 loss)
I0428 19:32:49.631285 22963 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:32:49.721340 22963 solver.cpp:219] Iteration 400 (1110.2 iter/s, 0.0900741s/100 iters), loss = 0.130923
I0428 19:32:49.721369 22963 solver.cpp:238]     Train net output #0: loss = 0.130923 (* 1 = 0.130923 loss)
I0428 19:32:49.721396 22963 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:32:49.810448 22963 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:32:49.886698 22970 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:49.887476 22963 solver.cpp:398]     Test net output #0: accuracy = 0.9475
I0428 19:32:49.887503 22963 solver.cpp:398]     Test net output #1: loss = 0.187585 (* 1 = 0.187585 loss)
I0428 19:32:49.888486 22963 solver.cpp:219] Iteration 500 (598.428 iter/s, 0.167105s/100 iters), loss = 0.287883
I0428 19:32:49.888514 22963 solver.cpp:238]     Train net output #0: loss = 0.287883 (* 1 = 0.287883 loss)
I0428 19:32:49.888522 22963 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:32:49.986140 22963 solver.cpp:219] Iteration 600 (1024.42 iter/s, 0.0976159s/100 iters), loss = 0.150759
I0428 19:32:49.986171 22963 solver.cpp:238]     Train net output #0: loss = 0.150759 (* 1 = 0.150759 loss)
I0428 19:32:49.986191 22963 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:32:50.080862 22963 solver.cpp:219] Iteration 700 (1056.22 iter/s, 0.0946769s/100 iters), loss = 0.264092
I0428 19:32:50.080917 22963 solver.cpp:238]     Train net output #0: loss = 0.264092 (* 1 = 0.264092 loss)
I0428 19:32:50.080932 22963 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:32:50.184258 22963 solver.cpp:219] Iteration 800 (967.727 iter/s, 0.103335s/100 iters), loss = 0.262155
I0428 19:32:50.184293 22963 solver.cpp:238]     Train net output #0: loss = 0.262155 (* 1 = 0.262155 loss)
I0428 19:32:50.184303 22963 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:32:50.279747 22963 solver.cpp:219] Iteration 900 (1047.71 iter/s, 0.095446s/100 iters), loss = 0.175296
I0428 19:32:50.279780 22963 solver.cpp:238]     Train net output #0: loss = 0.175296 (* 1 = 0.175296 loss)
I0428 19:32:50.279789 22963 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:32:50.310879 22969 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:50.371949 22963 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:32:50.374017 22963 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:32:50.375450 22963 solver.cpp:311] Iteration 1000, loss = 0.162394
I0428 19:32:50.375481 22963 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:32:50.456770 22970 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:50.458011 22963 solver.cpp:398]     Test net output #0: accuracy = 0.9635
I0428 19:32:50.458052 22963 solver.cpp:398]     Test net output #1: loss = 0.121285 (* 1 = 0.121285 loss)
I0428 19:32:50.458066 22963 solver.cpp:316] Optimization Done.
I0428 19:32:50.458079 22963 caffe.cpp:259] Optimization Done.
